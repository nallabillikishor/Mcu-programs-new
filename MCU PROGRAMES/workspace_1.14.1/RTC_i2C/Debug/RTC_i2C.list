
RTC_i2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003348  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003590  08003590  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003598  08003598  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080035a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000006c  0800360c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  0800360c  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa63  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d9  00000000  00000000  0002ab42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ba  00000000  00000000  0002cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b0f  00000000  00000000  0002d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d394  00000000  00000000  0004e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c91d5  00000000  00000000  0005b455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dfc  00000000  00000000  0012462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00127428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003500 	.word	0x08003500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08003500 	.word	0x08003500

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	I2C1_init();
 80005b2:	f000 f9a1 	bl	80008f8 <I2C1_init>
	 LCD_pin_init();
 80005b6:	f000 fbd3 	bl	8000d60 <LCD_pin_init>
	 LCD_disp_init();
 80005ba:	f000 fc05 	bl	8000dc8 <LCD_disp_init>
	// LCD_data('m');
	 lcd_send_string("RTC:");
 80005be:	4820      	ldr	r0, [pc, #128]	; (8000640 <main+0x94>)
 80005c0:	f000 fc8c 	bl	8000edc <lcd_send_string>
	 deci_2_bcd_conver(timeDateToSet);
 80005c4:	481f      	ldr	r0, [pc, #124]	; (8000644 <main+0x98>)
 80005c6:	f000 fba7 	bl	8000d18 <deci_2_bcd_conver>
	 I2C1_burstWrite(SLAVE_ADDR, 0x00, 7, set_time);
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <main+0x9c>)
 80005cc:	2207      	movs	r2, #7
 80005ce:	2100      	movs	r1, #0
 80005d0:	20d0      	movs	r0, #208	; 0xd0
 80005d2:	f000 f9f3 	bl	80009bc <I2C1_burstWrite>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fdf9 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f83f 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8f5 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8c9 	bl	8000778 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005e6:	f000 f899 	bl	800071c <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LCD_command(0x80);
 80005ea:	2080      	movs	r0, #128	; 0x80
 80005ec:	f000 fc0e 	bl	8000e0c <LCD_command>
	   Get_Time(); //reading RTC data
 80005f0:	f000 faec 	bl	8000bcc <Get_Time>
	   sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0xa0>)
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0xa0>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	4619      	mov	r1, r3
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <main+0xa0>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	460b      	mov	r3, r1
 8000608:	4911      	ldr	r1, [pc, #68]	; (8000650 <main+0xa4>)
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <main+0xa8>)
 800060c:	f002 fad4 	bl	8002bb8 <siprintf>
	   // delay(1);
	   lcd_send_string(buffer);
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <main+0xa8>)
 8000612:	f000 fc63 	bl	8000edc <lcd_send_string>
	   // delay(1);
	   sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <main+0xa0>)
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	461a      	mov	r2, r3
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <main+0xa0>)
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	4619      	mov	r1, r3
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <main+0xa0>)
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	460b      	mov	r3, r1
 800062a:	490b      	ldr	r1, [pc, #44]	; (8000658 <main+0xac>)
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <main+0xa8>)
 800062e:	f002 fac3 	bl	8002bb8 <siprintf>
	   // delay(1);
	   LCD_command(0xC0);
 8000632:	20c0      	movs	r0, #192	; 0xc0
 8000634:	f000 fbea 	bl	8000e0c <LCD_command>
	   lcd_send_string(buffer);
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <main+0xa8>)
 800063a:	f000 fc4f 	bl	8000edc <lcd_send_string>
  {
 800063e:	e7d4      	b.n	80005ea <main+0x3e>
 8000640:	08003518 	.word	0x08003518
 8000644:	20000000 	.word	0x20000000
 8000648:	2000013c 	.word	0x2000013c
 800064c:	20000124 	.word	0x20000124
 8000650:	08003520 	.word	0x08003520
 8000654:	2000014c 	.word	0x2000014c
 8000658:	08003530 	.word	0x08003530

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fac4 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xb8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xb8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <SystemClock_Config+0xbc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xbc>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xbc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fd0f 	bl	80020f4 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006dc:	f000 fc1d 	bl	8000f1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f9af 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000708:	f000 fc07 	bl	8000f1a <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_I2C1_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_I2C1_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_I2C1_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_I2C1_Init+0x50>)
 800075a:	f001 f83d 	bl	80017d8 <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 fbd9 	bl	8000f1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000088 	.word	0x20000088
 8000770:	40005400 	.word	0x40005400
 8000774:	00061a80 	.word	0x00061a80

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 ff3e 	bl	8002630 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 fbae 	bl	8000f1a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000dc 	.word	0x200000dc
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <MX_GPIO_Init+0x11c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a3f      	ldr	r2, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x11c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x11c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a38      	ldr	r2, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x11c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_GPIO_Init+0x11c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x11c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000852:	2200      	movs	r2, #0
 8000854:	21ff      	movs	r1, #255	; 0xff
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x120>)
 8000858:	f000 ffa4 	bl	80017a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2120      	movs	r1, #32
 8000860:	4823      	ldr	r0, [pc, #140]	; (80008f0 <MX_GPIO_Init+0x124>)
 8000862:	f000 ff9f 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	21e0      	movs	r1, #224	; 0xe0
 800086a:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x128>)
 800086c:	f000 ff9a 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000876:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <MX_GPIO_Init+0x120>)
 8000888:	f000 fdf8 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800088c:	23ff      	movs	r3, #255	; 0xff
 800088e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_GPIO_Init+0x120>)
 80008a4:	f000 fdea 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_GPIO_Init+0x124>)
 80008c0:	f000 fddc 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c4:	23e0      	movs	r3, #224	; 0xe0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_GPIO_Init+0x128>)
 80008dc:	f000 fdce 	bl	800147c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400

080008f8 <I2C1_init>:

/* USER CODE BEGIN 4 */
void I2C1_init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
RCC->AHB1ENR |= 2; /* Enable GPIOB clock */
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <I2C1_init+0xb8>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	4a2b      	ldr	r2, [pc, #172]	; (80009b0 <I2C1_init+0xb8>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	6313      	str	r3, [r2, #48]	; 0x30
 RCC->APB1ENR |= 0x00200000; /* Enable I2C1 clock */
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <I2C1_init+0xb8>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a28      	ldr	r2, [pc, #160]	; (80009b0 <I2C1_init+0xb8>)
 800090e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 /* configure PB8, PB9 pins for I2C1 */
 GPIOB->AFR[1] &= ~0x000000FF; /* PB8, PB9 I2C1 SCL, SDA */
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <I2C1_init+0xbc>)
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <I2C1_init+0xbc>)
 800091a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800091e:	6253      	str	r3, [r2, #36]	; 0x24
 GPIOB->AFR[1] |= 0x00000044;
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <I2C1_init+0xbc>)
 8000922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000924:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <I2C1_init+0xbc>)
 8000926:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800092a:	6253      	str	r3, [r2, #36]	; 0x24
 GPIOB->MODER &= ~0x000F0000; /* PB8, PB9 use alternate function */
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <I2C1_init+0xbc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a20      	ldr	r2, [pc, #128]	; (80009b4 <I2C1_init+0xbc>)
 8000932:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000936:	6013      	str	r3, [r2, #0]
 GPIOB->MODER |= 0x000A0000;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <I2C1_init+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <I2C1_init+0xbc>)
 800093e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000942:	6013      	str	r3, [r2, #0]
 GPIOB->OTYPER |= 0x00000300; /* output open-drain */
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <I2C1_init+0xbc>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <I2C1_init+0xbc>)
 800094a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800094e:	6053      	str	r3, [r2, #4]
 GPIOB->PUPDR &= ~0x000F0000; /* with pull-ups */
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <I2C1_init+0xbc>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <I2C1_init+0xbc>)
 8000956:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800095a:	60d3      	str	r3, [r2, #12]
 GPIOB->PUPDR |= 0x00050000;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <I2C1_init+0xbc>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <I2C1_init+0xbc>)
 8000962:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000966:	60d3      	str	r3, [r2, #12]
 I2C1->CR1 = 0x8000; /* software reset I2C1 */
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <I2C1_init+0xc0>)
 800096a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800096e:	601a      	str	r2, [r3, #0]
 I2C1->CR1 &= ~0x8000; /* out of reset */
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <I2C1_init+0xc0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <I2C1_init+0xc0>)
 8000976:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800097a:	6013      	str	r3, [r2, #0]
 I2C1->CR2 = 0x0010; /* peripheral clock is 16 MHz */
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <I2C1_init+0xc0>)
 800097e:	2210      	movs	r2, #16
 8000980:	605a      	str	r2, [r3, #4]
I2C1->CR1 |= 0x400; /* Enabling the
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <I2C1_init+0xc0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <I2C1_init+0xc0>)
 8000988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098c:	6013      	str	r3, [r2, #0]
acknowledgment */
 I2C1->CCR = 80; /* standard mode, 100kHz clock */
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <I2C1_init+0xc0>)
 8000990:	2250      	movs	r2, #80	; 0x50
 8000992:	61da      	str	r2, [r3, #28]
 I2C1->TRISE = 17; /* maximum rise time */
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <I2C1_init+0xc0>)
 8000996:	2211      	movs	r2, #17
 8000998:	621a      	str	r2, [r3, #32]
 I2C1->CR1 |= 0x0001; /* enable I2C1 module */
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <I2C1_init+0xc0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <I2C1_init+0xc0>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6013      	str	r3, [r2, #0]
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40005400 	.word	0x40005400

080009bc <I2C1_burstWrite>:


void I2C1_burstWrite(char saddr, char maddr, int n, char* data)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60ba      	str	r2, [r7, #8]
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4603      	mov	r3, r0
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	460b      	mov	r3, r1
 80009cc:	73bb      	strb	r3, [r7, #14]
 int i;
 volatile int tmp;
 while (I2C1->SR2 & 2); /* wait until bus not busy */
 80009ce:	bf00      	nop
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <I2C1_burstWrite+0xc8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f9      	bne.n	80009d0 <I2C1_burstWrite+0x14>
 I2C1->CR1 &= ~0x800; /* disable POS */
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <I2C1_burstWrite+0xc8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <I2C1_burstWrite+0xc8>)
 80009e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009e6:	6013      	str	r3, [r2, #0]
 I2C1->CR1 |= 0x100; /* generate start */
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <I2C1_burstWrite+0xc8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <I2C1_burstWrite+0xc8>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
 while (!(I2C1->SR1 & 1)); /* wait until start flag is set */
 80009f4:	bf00      	nop
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <I2C1_burstWrite+0xc8>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f9      	beq.n	80009f6 <I2C1_burstWrite+0x3a>
 I2C1->DR = saddr << 1; /* transmit slave address */
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	005a      	lsls	r2, r3, #1
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a08:	611a      	str	r2, [r3, #16]
 while (!(I2C1->SR1 & 0x2)); /* wait until addr flag is set */
 8000a0a:	bf00      	nop
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f9      	beq.n	8000a0c <I2C1_burstWrite+0x50>
 tmp = I2C1->SR2; /* clear addr flag */
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	613b      	str	r3, [r7, #16]
 while (!(I2C1->SR1 & 0x80)); /* wait until data register empty */
 8000a1e:	bf00      	nop
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f9      	beq.n	8000a20 <I2C1_burstWrite+0x64>
 I2C1->DR = maddr; /* send memory address */
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	6113      	str	r3, [r2, #16]
 /* write all the data */
 for (i = 0; i < n; i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e00e      	b.n	8000a56 <I2C1_burstWrite+0x9a>
 while (!(I2C1->SR1 & 0x80)); /* wait until data register empty */
 8000a38:	bf00      	nop
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f9      	beq.n	8000a3a <I2C1_burstWrite+0x7e>
 I2C1->DR = data++;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a4e:	6113      	str	r3, [r2, #16]
 for (i = 0; i < n; i++) {
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dbec      	blt.n	8000a38 <I2C1_burstWrite+0x7c>
 }
 while (!(I2C1->SR1 & 4)); /* wait until transfer finished */
 8000a5e:	bf00      	nop
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f9      	beq.n	8000a60 <I2C1_burstWrite+0xa4>
 I2C1->CR1 |= 0x200; /* generate stop */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <I2C1_burstWrite+0xc8>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40005400 	.word	0x40005400

08000a88 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60ba      	str	r2, [r7, #8]
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
 8000a96:	460b      	mov	r3, r1
 8000a98:	73bb      	strb	r3, [r7, #14]
 volatile int tmp;
 while (I2C1->SR2 & 2);               /* wait until bus not busy */
 8000a9a:	bf00      	nop
 8000a9c:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1f9      	bne.n	8000a9c <I2C1_burstRead+0x14>
 I2C1->CR1 &= ~0x800;                   /* disable POS */
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a46      	ldr	r2, [pc, #280]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ab2:	6013      	str	r3, [r2, #0]
 I2C1->CR1 |= 0x100;                          /* generate start */
 8000ab4:	4b44      	ldr	r3, [pc, #272]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a43      	ldr	r2, [pc, #268]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
 while (!(I2C1->SR1 & 1));                 /* wait until start flag is set */
 8000ac0:	bf00      	nop
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <I2C1_burstRead+0x3a>
 I2C1->DR = saddr << 1;                   /* transmit slave address + Write */
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	005a      	lsls	r2, r3, #1
 8000ad2:	4b3d      	ldr	r3, [pc, #244]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000ad4:	611a      	str	r2, [r3, #16]
 while (!(I2C1->SR1 & 2));                 /* wait until addr flag is set */
 8000ad6:	bf00      	nop
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f9      	beq.n	8000ad8 <I2C1_burstRead+0x50>
 tmp = I2C1->SR2;                          /* clear addr flag */
 8000ae4:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	617b      	str	r3, [r7, #20]
 while (!(I2C1->SR1 & 0x80));               /* wait until transmitter empty */
 8000aea:	bf00      	nop
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f9      	beq.n	8000aec <I2C1_burstRead+0x64>
 I2C1->DR = maddr;                      /* send memory address */
 8000af8:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	6113      	str	r3, [r2, #16]
 while (!(I2C1->SR1 & 0x80));             /* wait until transmitter empty */
 8000afe:	bf00      	nop
 8000b00:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <I2C1_burstRead+0x78>
 I2C1->CR1 |= 0x100;                        /* generate restart */
 8000b0c:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a2d      	ldr	r2, [pc, #180]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
 while (!(I2C1->SR1 & 1));            /* wait until start flag is set */
 8000b18:	bf00      	nop
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f9      	beq.n	8000b1a <I2C1_burstRead+0x92>
 I2C1->DR = saddr << 1 | 1;                /* transmit slave address + Read */
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	f043 0201 	orr.w	r2, r3, #1
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b30:	611a      	str	r2, [r3, #16]
 while (!(I2C1->SR1 & 2));                      /* wait until addr flag is set */
 8000b32:	bf00      	nop
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f9      	beq.n	8000b34 <I2C1_burstRead+0xac>
 tmp = I2C1->SR2;                    /* clear addr flag */
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	617b      	str	r3, [r7, #20]
 I2C1->CR1 |= 0x0400;              /* Enable Acknowledge */
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b50:	6013      	str	r3, [r2, #0]
 while(n > 0)
 8000b52:	e02e      	b.n	8000bb2 <I2C1_burstRead+0x12a>
 {
 /* One byte left */
 if(n == 1)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d11a      	bne.n	8000b90 <I2C1_burstRead+0x108>
 {
 I2C1->CR1 &= ~(0x400);         /* Disable Acknowledge */
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b64:	6013      	str	r3, [r2, #0]
 I2C1->CR1 |= 0x200;              /* Generate Stop */
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b70:	6013      	str	r3, [r2, #0]
 while (!(I2C1->SR1 & 0x40));    /* Wait for RXNE flag set */
 8000b72:	bf00      	nop
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f9      	beq.n	8000b74 <I2C1_burstRead+0xec>
 *data++ = I2C1->DR;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b82:	6919      	ldr	r1, [r3, #16]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
 break;
 8000b8e:	e014      	b.n	8000bba <I2C1_burstRead+0x132>
 }
 else
 {
 while (!(I2C1->SR1 & 0x40)); /* Wait until RXNE flag is set */
 8000b90:	bf00      	nop
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f9      	beq.n	8000b92 <I2C1_burstRead+0x10a>
 *data++ = I2C1->DR;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <I2C1_burstRead+0x140>)
 8000ba0:	6919      	ldr	r1, [r3, #16]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
 n--;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 while(n > 0)
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dccd      	bgt.n	8000b54 <I2C1_burstRead+0xcc>
 }
 }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	371c      	adds	r7, #28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40005400 	.word	0x40005400

08000bcc <Get_Time>:

void Get_Time()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
//uint8_t get_time[7];
I2C1_burstRead(SLAVE_ADDR, 0x00, 7, timeDateReadback);
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <Get_Time+0x94>)
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	20d0      	movs	r0, #208	; 0xd0
 8000bd8:	f7ff ff56 	bl	8000a88 <I2C1_burstRead>
time.seconds = BCDtoDecimal(timeDateReadback[0]);
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <Get_Time+0x94>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f861 	bl	8000ca8 <BCDtoDecimal>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <Get_Time+0x98>)
 8000bec:	701a      	strb	r2, [r3, #0]
time.minutes = BCDtoDecimal(timeDateReadback[1]);
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <Get_Time+0x94>)
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f858 	bl	8000ca8 <BCDtoDecimal>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <Get_Time+0x98>)
 8000bfe:	705a      	strb	r2, [r3, #1]
time.hour = BCDtoDecimal(timeDateReadback[2]);
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <Get_Time+0x94>)
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f84f 	bl	8000ca8 <BCDtoDecimal>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <Get_Time+0x98>)
 8000c10:	709a      	strb	r2, [r3, #2]
time.dayofweek = BCDtoDecimal(timeDateReadback[3]);
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <Get_Time+0x94>)
 8000c14:	78db      	ldrb	r3, [r3, #3]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f846 	bl	8000ca8 <BCDtoDecimal>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <Get_Time+0x98>)
 8000c22:	70da      	strb	r2, [r3, #3]
time.dayofmonth = BCDtoDecimal(timeDateReadback[4]);
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <Get_Time+0x94>)
 8000c26:	791b      	ldrb	r3, [r3, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f83d 	bl	8000ca8 <BCDtoDecimal>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <Get_Time+0x98>)
 8000c34:	711a      	strb	r2, [r3, #4]
time.month = BCDtoDecimal(timeDateReadback[5]);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <Get_Time+0x94>)
 8000c38:	795b      	ldrb	r3, [r3, #5]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f834 	bl	8000ca8 <BCDtoDecimal>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <Get_Time+0x98>)
 8000c46:	715a      	strb	r2, [r3, #5]
time.year = BCDtoDecimal(timeDateReadback[6]);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <Get_Time+0x94>)
 8000c4a:	799b      	ldrb	r3, [r3, #6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f82b 	bl	8000ca8 <BCDtoDecimal>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <Get_Time+0x98>)
 8000c58:	719a      	strb	r2, [r3, #6]
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000012c 	.word	0x2000012c
 8000c64:	20000124 	.word	0x20000124

08000c68 <delay>:


void delay(uint32_t x)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
for(int i=0;i<x;i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e00d      	b.n	8000c92 <delay+0x2a>
{
for(int j=0;j<3000;j++);
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	e002      	b.n	8000c82 <delay+0x1a>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	ddf7      	ble.n	8000c7c <delay+0x14>
for(int i=0;i<x;i++)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d8ed      	bhi.n	8000c76 <delay+0xe>
}
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <BCDtoDecimal>:
int BCDtoDecimal(int BCD)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
return(((BCD>>4)*10) + (BCD & 0xf));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	111a      	asrs	r2, r3, #4
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	4413      	add	r3, r2
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <decimalToBCD>:
int decimalToBCD(int decimal)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
return(((decimal/10)<<4) | (decimal%10));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <decimalToBCD+0x40>)
 8000ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce4:	1092      	asrs	r2, r2, #2
 8000ce6:	17db      	asrs	r3, r3, #31
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	0118      	lsls	r0, r3, #4
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <decimalToBCD+0x40>)
 8000cf0:	fb83 2301 	smull	r2, r3, r3, r1
 8000cf4:	109a      	asrs	r2, r3, #2
 8000cf6:	17cb      	asrs	r3, r1, #31
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	1aca      	subs	r2, r1, r3
 8000d04:	ea40 0302 	orr.w	r3, r0, r2
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	66666667 	.word	0x66666667

08000d18 <deci_2_bcd_conver>:
void deci_2_bcd_conver(char *ptr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
int i=0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
while(i<7)
 8000d24:	e011      	b.n	8000d4a <deci_2_bcd_conver+0x32>
{
set_time[i] = decimalToBCD(*ptr);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ffd2 	bl	8000cd4 <decimalToBCD>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b2d9      	uxtb	r1, r3
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <deci_2_bcd_conver+0x44>)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
i++;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
ptr++;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3301      	adds	r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
while(i<7)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	ddea      	ble.n	8000d26 <deci_2_bcd_conver+0xe>
}
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000013c 	.word	0x2000013c

08000d60 <LCD_pin_init>:


void LCD_pin_init()
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
//port initialization
RCC -> AHB1ENR |= 0x06; //enable clock for port B and C
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <LCD_pin_init+0x5c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <LCD_pin_init+0x5c>)
 8000d6a:	f043 0306 	orr.w	r3, r3, #6
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
GPIOB -> MODER &= ~0x0000FC00; //clear pin PB5,6,7
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <LCD_pin_init+0x60>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <LCD_pin_init+0x60>)
 8000d76:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000d7a:	6013      	str	r3, [r2, #0]
GPIOB -> MODER |= 0x00005400; //set as output PB5,6,7
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <LCD_pin_init+0x60>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <LCD_pin_init+0x60>)
 8000d82:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8000d86:	6013      	str	r3, [r2, #0]
GPIOB -> ODR &= 0x0000FF1F; // making pin PB5,6,7
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <LCD_pin_init+0x60>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <LCD_pin_init+0x60>)
 8000d8e:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8000d92:	4013      	ands	r3, r2
 8000d94:	614b      	str	r3, [r1, #20]
GPIOC -> MODER &= ~0x0000FFFF;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <LCD_pin_init+0x64>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LCD_pin_init+0x64>)
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	6013      	str	r3, [r2, #0]
GPIOC -> MODER |= 0x00005555; // port c pin 0-7 configured as output pin
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LCD_pin_init+0x64>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <LCD_pin_init+0x64>)
 8000da8:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000dac:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <LCD_disp_init>:

void LCD_disp_init()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
LCD_command(0x38);//8 bit 2*16 data
 8000dcc:	2038      	movs	r0, #56	; 0x38
 8000dce:	f000 f81d 	bl	8000e0c <LCD_command>
delay(100);
 8000dd2:	2064      	movs	r0, #100	; 0x64
 8000dd4:	f7ff ff48 	bl	8000c68 <delay>
LCD_command(0x06);//entry and cursur move right to left
 8000dd8:	2006      	movs	r0, #6
 8000dda:	f000 f817 	bl	8000e0c <LCD_command>
delay(100);
 8000dde:	2064      	movs	r0, #100	; 0x64
 8000de0:	f7ff ff42 	bl	8000c68 <delay>
LCD_command(0x01);//clear screen
 8000de4:	2001      	movs	r0, #1
 8000de6:	f000 f811 	bl	8000e0c <LCD_command>
delay(100);
 8000dea:	2064      	movs	r0, #100	; 0x64
 8000dec:	f7ff ff3c 	bl	8000c68 <delay>
LCD_command(0x80);//force curser to bigining of 1st row
 8000df0:	2080      	movs	r0, #128	; 0x80
 8000df2:	f000 f80b 	bl	8000e0c <LCD_command>
delay(100);
 8000df6:	2064      	movs	r0, #100	; 0x64
 8000df8:	f7ff ff36 	bl	8000c68 <delay>
//LCD_command(0x0f);//clear screen
LCD_command(0x0C); //disp on cursur off
 8000dfc:	200c      	movs	r0, #12
 8000dfe:	f000 f805 	bl	8000e0c <LCD_command>
delay(100);
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f7ff ff30 	bl	8000c68 <delay>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <LCD_command>:

void LCD_command(unsigned char command)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
GPIOB->ODR &= 0xFF9F;//RS= 0;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <LCD_command+0x68>)
 8000e18:	695a      	ldr	r2, [r3, #20]
 8000e1a:	4916      	ldr	r1, [pc, #88]	; (8000e74 <LCD_command+0x68>)
 8000e1c:	f64f 739f 	movw	r3, #65439	; 0xff9f
 8000e20:	4013      	ands	r3, r2
 8000e22:	614b      	str	r3, [r1, #20]
GPIOB->ODR &= 0xFFBF;//R/W = 0;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <LCD_command+0x68>)
 8000e26:	695a      	ldr	r2, [r3, #20]
 8000e28:	4912      	ldr	r1, [pc, #72]	; (8000e74 <LCD_command+0x68>)
 8000e2a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000e2e:	4013      	ands	r3, r2
 8000e30:	614b      	str	r3, [r1, #20]
GPIOC->ODR = command;
 8000e32:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <LCD_command+0x6c>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	6153      	str	r3, [r2, #20]
GPIOB->ODR |= 0x0080;//E = 1
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <LCD_command+0x68>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LCD_command+0x68>)
 8000e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e42:	6153      	str	r3, [r2, #20]
delay(50);
 8000e44:	2032      	movs	r0, #50	; 0x32
 8000e46:	f7ff ff0f 	bl	8000c68 <delay>
GPIOB->ODR &= ~0x0080;//clear E
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <LCD_command+0x68>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <LCD_command+0x68>)
 8000e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e54:	6153      	str	r3, [r2, #20]
if(command<4)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d803      	bhi.n	8000e64 <LCD_command+0x58>
delay(2);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f7ff ff03 	bl	8000c68 <delay>
else
delay(1);
}
 8000e62:	e002      	b.n	8000e6a <LCD_command+0x5e>
delay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff feff 	bl	8000c68 <delay>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40020800 	.word	0x40020800

08000e7c <LCD_data>:

void LCD_data(char data)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
GPIOB->ODR |= 0x0020;//RS= 1;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <LCD_data+0x58>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <LCD_data+0x58>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	6153      	str	r3, [r2, #20]
GPIOB->ODR &= 0xFFBF;//R/W = 0;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <LCD_data+0x58>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	490f      	ldr	r1, [pc, #60]	; (8000ed4 <LCD_data+0x58>)
 8000e98:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	614b      	str	r3, [r1, #20]
GPIOC->ODR = data;//put data
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <LCD_data+0x5c>)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	6153      	str	r3, [r2, #20]
GPIOB->ODR |= 0x0080;//E = 1
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LCD_data+0x58>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LCD_data+0x58>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6153      	str	r3, [r2, #20]
delay(50);
 8000eb2:	2032      	movs	r0, #50	; 0x32
 8000eb4:	f7ff fed8 	bl	8000c68 <delay>
GPIOB->ODR &= ~0x0080;//clear E
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <LCD_data+0x58>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <LCD_data+0x58>)
 8000ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ec2:	6153      	str	r3, [r2, #20]
delay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff fecf 	bl	8000c68 <delay>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800

08000edc <lcd_send_string>:


void lcd_send_string (char *str)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
int i;
for(i=0;*(str+i)!='\0';i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e00c      	b.n	8000f04 <lcd_send_string+0x28>
{
LCD_data(*(str+i));
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffc2 	bl	8000e7c <LCD_data>
delay(80);
 8000ef8:	2050      	movs	r0, #80	; 0x50
 8000efa:	f7ff feb5 	bl	8000c68 <delay>
for(i=0;*(str+i)!='\0';i++)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ec      	bne.n	8000eea <lcd_send_string+0xe>
}
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1e:	b672      	cpsid	i
}
 8000f20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f62:	2007      	movs	r0, #7
 8000f64:	f000 fa56 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_I2C_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12c      	bne.n	8000ff0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_I2C_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb8:	2312      	movs	r3, #18
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480c      	ldr	r0, [pc, #48]	; (8001000 <HAL_I2C_MspInit+0x8c>)
 8000fd0:	f000 fa54 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020400 	.word	0x40020400

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_UART_MspInit+0x84>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d12b      	bne.n	800107e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_UART_MspInit+0x88>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_UART_MspInit+0x88>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_UART_MspInit+0x88>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_UART_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_UART_MspInit+0x88>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_UART_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105e:	230c      	movs	r3, #12
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_UART_MspInit+0x8c>)
 800107a:	f000 f9ff 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004400 	.word	0x40004400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f8c6 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f001 fd76 	bl	8002c08 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20020000 	.word	0x20020000
 8001148:	00000400 	.word	0x00000400
 800114c:	2000015c 	.word	0x2000015c
 8001150:	200002b0 	.word	0x200002b0

08001154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800117c:	f7ff ffea 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f001 fd35 	bl	8002c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff f9ff 	bl	80005ac <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011bc:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 80011c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011c4:	200002ac 	.word	0x200002ac

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f90d 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fe90 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f917 	bl	8001462 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f8ed 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000010 	.word	0x20000010
 8001268:	20000018 	.word	0x20000018
 800126c:	20000014 	.word	0x20000014

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000018 	.word	0x20000018
 8001294:	20000160 	.word	0x20000160

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000160 	.word	0x20000160

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e165      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8154 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d005      	beq.n	80014ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d130      	bne.n	8001530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b03      	cmp	r3, #3
 800153a:	d017      	beq.n	800156c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80ae 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_GPIO_Init+0x300>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a5c      	ldr	r2, [pc, #368]	; (800177c <HAL_GPIO_Init+0x300>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_GPIO_Init+0x300>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4f      	ldr	r2, [pc, #316]	; (8001784 <HAL_GPIO_Init+0x308>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x21a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_GPIO_Init+0x30c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x216>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4d      	ldr	r2, [pc, #308]	; (800178c <HAL_GPIO_Init+0x310>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x212>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_GPIO_Init+0x314>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x20e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_GPIO_Init+0x318>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x20a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x31c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x206>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a49      	ldr	r2, [pc, #292]	; (800179c <HAL_GPIO_Init+0x320>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x202>
 800167a:	2306      	movs	r3, #6
 800167c:	e00c      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800167e:	2307      	movs	r3, #7
 8001680:	e00a      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001682:	2305      	movs	r3, #5
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001686:	2304      	movs	r3, #4
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x21c>
 8001696:	2300      	movs	r3, #0
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a8:	4935      	ldr	r1, [pc, #212]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016da:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x324>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_GPIO_Init+0x324>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_GPIO_Init+0x324>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3301      	adds	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	f67f ae96 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40013800 	.word	0x40013800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40021000 	.word	0x40021000
 8001798:	40021400 	.word	0x40021400
 800179c:	40021800 	.word	0x40021800
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e12b      	b.n	8001a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d106      	bne.n	8001804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fbb8 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2224      	movs	r2, #36	; 0x24
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800182a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800183a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800183c:	f000 fa02 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8001840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a81      	ldr	r2, [pc, #516]	; (8001a4c <HAL_I2C_Init+0x274>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d807      	bhi.n	800185c <HAL_I2C_Init+0x84>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <HAL_I2C_Init+0x278>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e006      	b.n	800186a <HAL_I2C_Init+0x92>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_I2C_Init+0x27c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0e7      	b.n	8001a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a78      	ldr	r2, [pc, #480]	; (8001a58 <HAL_I2C_Init+0x280>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <HAL_I2C_Init+0x274>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d802      	bhi.n	80018ac <HAL_I2C_Init+0xd4>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	e009      	b.n	80018c0 <HAL_I2C_Init+0xe8>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_I2C_Init+0x284>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	3301      	adds	r3, #1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	495c      	ldr	r1, [pc, #368]	; (8001a4c <HAL_I2C_Init+0x274>)
 80018dc:	428b      	cmp	r3, r1
 80018de:	d819      	bhi.n	8001914 <HAL_I2C_Init+0x13c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e59      	subs	r1, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018f4:	400b      	ands	r3, r1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <HAL_I2C_Init+0x138>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1e59      	subs	r1, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fbb1 f3f3 	udiv	r3, r1, r3
 8001908:	3301      	adds	r3, #1
 800190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190e:	e051      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001910:	2304      	movs	r3, #4
 8001912:	e04f      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d111      	bne.n	8001940 <HAL_I2C_Init+0x168>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e012      	b.n	8001966 <HAL_I2C_Init+0x18e>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1e58      	subs	r0, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	0099      	lsls	r1, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	fbb0 f3f3 	udiv	r3, r0, r3
 8001956:	3301      	adds	r3, #1
 8001958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Init+0x196>
 800196a:	2301      	movs	r3, #1
 800196c:	e022      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10e      	bne.n	8001994 <HAL_I2C_Init+0x1bc>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e58      	subs	r0, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	440b      	add	r3, r1
 8001984:	fbb0 f3f3 	udiv	r3, r0, r3
 8001988:	3301      	adds	r3, #1
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001992:	e00f      	b.n	80019b4 <HAL_I2C_Init+0x1dc>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e58      	subs	r0, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	0099      	lsls	r1, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	6809      	ldr	r1, [r1, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69da      	ldr	r2, [r3, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6911      	ldr	r1, [r2, #16]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	000186a0 	.word	0x000186a0
 8001a50:	001e847f 	.word	0x001e847f
 8001a54:	003d08ff 	.word	0x003d08ff
 8001a58:	431bde83 	.word	0x431bde83
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cc      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d90c      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d044      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e067      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff fba2 	bl	8001298 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff fb9e 	bl	8001298 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20c      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f855 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb02 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08003544 	.word	0x08003544
 8001c24:	20000010 	.word	0x20000010
 8001c28:	20000014 	.word	0x20000014

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000010 	.word	0x20000010

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003554 	.word	0x08003554

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffdc 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08003554 	.word	0x08003554

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b0ae      	sub	sp, #184	; 0xb8
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cba:	4bcb      	ldr	r3, [pc, #812]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	f200 8206 	bhi.w	80020d4 <HAL_RCC_GetSysClockFreq+0x440>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001d05 	.word	0x08001d05
 8001cd4:	080020d5 	.word	0x080020d5
 8001cd8:	080020d5 	.word	0x080020d5
 8001cdc:	080020d5 	.word	0x080020d5
 8001ce0:	08001d0d 	.word	0x08001d0d
 8001ce4:	080020d5 	.word	0x080020d5
 8001ce8:	080020d5 	.word	0x080020d5
 8001cec:	080020d5 	.word	0x080020d5
 8001cf0:	08001d15 	.word	0x08001d15
 8001cf4:	080020d5 	.word	0x080020d5
 8001cf8:	080020d5 	.word	0x080020d5
 8001cfc:	080020d5 	.word	0x080020d5
 8001d00:	08001f05 	.word	0x08001f05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4bb9      	ldr	r3, [pc, #740]	; (8001fec <HAL_RCC_GetSysClockFreq+0x358>)
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d0a:	e1e7      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0c:	4bb8      	ldr	r3, [pc, #736]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d12:	e1e3      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d14:	4bb4      	ldr	r3, [pc, #720]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d20:	4bb1      	ldr	r3, [pc, #708]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d071      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2c:	4bae      	ldr	r3, [pc, #696]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	2200      	movs	r2, #0
 8001d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d52:	4622      	mov	r2, r4
 8001d54:	462b      	mov	r3, r5
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	0159      	lsls	r1, r3, #5
 8001d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d64:	0150      	lsls	r0, r2, #5
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	1a51      	subs	r1, r2, r1
 8001d6e:	6439      	str	r1, [r7, #64]	; 0x40
 8001d70:	4629      	mov	r1, r5
 8001d72:	eb63 0301 	sbc.w	r3, r3, r1
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d84:	4649      	mov	r1, r9
 8001d86:	018b      	lsls	r3, r1, #6
 8001d88:	4641      	mov	r1, r8
 8001d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d8e:	4641      	mov	r1, r8
 8001d90:	018a      	lsls	r2, r1, #6
 8001d92:	4641      	mov	r1, r8
 8001d94:	1a51      	subs	r1, r2, r1
 8001d96:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d98:	4649      	mov	r1, r9
 8001d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001dac:	4649      	mov	r1, r9
 8001dae:	00cb      	lsls	r3, r1, #3
 8001db0:	4641      	mov	r1, r8
 8001db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001db6:	4641      	mov	r1, r8
 8001db8:	00ca      	lsls	r2, r1, #3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc6:	462b      	mov	r3, r5
 8001dc8:	460a      	mov	r2, r1
 8001dca:	eb42 0303 	adc.w	r3, r2, r3
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ddc:	4629      	mov	r1, r5
 8001dde:	024b      	lsls	r3, r1, #9
 8001de0:	4621      	mov	r1, r4
 8001de2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001de6:	4621      	mov	r1, r4
 8001de8:	024a      	lsls	r2, r1, #9
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001df8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001dfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e00:	f7fe fa56 	bl	80002b0 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e0e:	e067      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e10:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	2200      	movs	r2, #0
 8001e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e64:	4649      	mov	r1, r9
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4641      	mov	r1, r8
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4641      	mov	r1, r8
 8001e74:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e78:	4649      	mov	r1, r9
 8001e7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e92:	4692      	mov	sl, r2
 8001e94:	469b      	mov	fp, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb1a 0303 	adds.w	r3, sl, r3
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	028b      	lsls	r3, r1, #10
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	028a      	lsls	r2, r1, #10
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec8:	2200      	movs	r2, #0
 8001eca:	673b      	str	r3, [r7, #112]	; 0x70
 8001ecc:	677a      	str	r2, [r7, #116]	; 0x74
 8001ece:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ed2:	f7fe f9ed 	bl	80002b0 <__aeabi_uldivmod>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4613      	mov	r3, r2
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f02:	e0eb      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d06b      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1c:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	2200      	movs	r2, #0
 8001f24:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f30:	2300      	movs	r3, #0
 8001f32:	667b      	str	r3, [r7, #100]	; 0x64
 8001f34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f38:	4622      	mov	r2, r4
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	0159      	lsls	r1, r3, #5
 8001f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4a:	0150      	lsls	r0, r2, #5
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4621      	mov	r1, r4
 8001f52:	1a51      	subs	r1, r2, r1
 8001f54:	61b9      	str	r1, [r7, #24]
 8001f56:	4629      	mov	r1, r5
 8001f58:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f6a:	4659      	mov	r1, fp
 8001f6c:	018b      	lsls	r3, r1, #6
 8001f6e:	4651      	mov	r1, sl
 8001f70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f74:	4651      	mov	r1, sl
 8001f76:	018a      	lsls	r2, r1, #6
 8001f78:	4651      	mov	r1, sl
 8001f7a:	ebb2 0801 	subs.w	r8, r2, r1
 8001f7e:	4659      	mov	r1, fp
 8001f80:	eb63 0901 	sbc.w	r9, r3, r1
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f98:	4690      	mov	r8, r2
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	eb18 0303 	adds.w	r3, r8, r3
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	eb49 0303 	adc.w	r3, r9, r3
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fb8:	4629      	mov	r1, r5
 8001fba:	024b      	lsls	r3, r1, #9
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	024a      	lsls	r2, r1, #9
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fce:	2200      	movs	r2, #0
 8001fd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fd8:	f7fe f96a 	bl	80002b0 <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fe6:	e065      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x420>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_GetSysClockFreq+0x458>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4611      	mov	r1, r2
 8002000:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002004:	653b      	str	r3, [r7, #80]	; 0x50
 8002006:	2300      	movs	r3, #0
 8002008:	657b      	str	r3, [r7, #84]	; 0x54
 800200a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800200e:	4642      	mov	r2, r8
 8002010:	464b      	mov	r3, r9
 8002012:	f04f 0000 	mov.w	r0, #0
 8002016:	f04f 0100 	mov.w	r1, #0
 800201a:	0159      	lsls	r1, r3, #5
 800201c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002020:	0150      	lsls	r0, r2, #5
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4641      	mov	r1, r8
 8002028:	1a51      	subs	r1, r2, r1
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	4649      	mov	r1, r9
 800202e:	eb63 0301 	sbc.w	r3, r3, r1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002040:	4659      	mov	r1, fp
 8002042:	018b      	lsls	r3, r1, #6
 8002044:	4651      	mov	r1, sl
 8002046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800204a:	4651      	mov	r1, sl
 800204c:	018a      	lsls	r2, r1, #6
 800204e:	4651      	mov	r1, sl
 8002050:	1a54      	subs	r4, r2, r1
 8002052:	4659      	mov	r1, fp
 8002054:	eb63 0501 	sbc.w	r5, r3, r1
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	00eb      	lsls	r3, r5, #3
 8002062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002066:	00e2      	lsls	r2, r4, #3
 8002068:	4614      	mov	r4, r2
 800206a:	461d      	mov	r5, r3
 800206c:	4643      	mov	r3, r8
 800206e:	18e3      	adds	r3, r4, r3
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	464b      	mov	r3, r9
 8002074:	eb45 0303 	adc.w	r3, r5, r3
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002086:	4629      	mov	r1, r5
 8002088:	028b      	lsls	r3, r1, #10
 800208a:	4621      	mov	r1, r4
 800208c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002090:	4621      	mov	r1, r4
 8002092:	028a      	lsls	r2, r1, #10
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800209c:	2200      	movs	r2, #0
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80020a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020a6:	f7fe f903 	bl	80002b0 <__aeabi_uldivmod>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4613      	mov	r3, r2
 80020b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_GetSysClockFreq+0x458>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0f1b      	lsrs	r3, r3, #28
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80020c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020d2:	e003      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	37b8      	adds	r7, #184	; 0xb8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	00f42400 	.word	0x00f42400

080020f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e28d      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8083 	beq.w	800221a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002114:	4b94      	ldr	r3, [pc, #592]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b04      	cmp	r3, #4
 800211e:	d019      	beq.n	8002154 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002120:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002128:	2b08      	cmp	r3, #8
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800212c:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002138:	d00c      	beq.n	8002154 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213a:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d112      	bne.n	800216c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002146:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002152:	d10b      	bne.n	800216c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	4b84      	ldr	r3, [pc, #528]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d05b      	beq.n	8002218 <HAL_RCC_OscConfig+0x124>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d157      	bne.n	8002218 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e25a      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d106      	bne.n	8002184 <HAL_RCC_OscConfig+0x90>
 8002176:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7b      	ldr	r2, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xcc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xb4>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xcc>
 80021a8:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6b      	ldr	r2, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f866 	bl	8001298 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f862 	bl	8001298 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e21f      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xdc>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f852 	bl	8001298 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f84e 	bl	8001298 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e20b      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x104>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d06f      	beq.n	8002306 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d017      	beq.n	8002262 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800223a:	2b08      	cmp	r3, #8
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x186>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1d3      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	e03a      	b.n	8002306 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_OscConfig+0x278>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe fffb 	bl	8001298 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a6:	f7fe fff7 	bl	8001298 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1b4      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4925      	ldr	r1, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_OscConfig+0x278>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe ffda 	bl	8001298 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e8:	f7fe ffd6 	bl	8001298 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e193      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d036      	beq.n	8002380 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x27c>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe ffba 	bl	8001298 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe ffb6 	bl	8001298 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e173      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 800233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x234>
 8002346:	e01b      	b.n	8002380 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_OscConfig+0x27c>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe ffa3 	bl	8001298 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	e00e      	b.n	8002374 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe ff9f 	bl	8001298 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d907      	bls.n	8002374 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e15c      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
 8002368:	40023800 	.word	0x40023800
 800236c:	42470000 	.word	0x42470000
 8002370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	4b8a      	ldr	r3, [pc, #552]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ea      	bne.n	8002356 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8097 	beq.w	80024bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a7e      	ldr	r2, [pc, #504]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b7c      	ldr	r3, [pc, #496]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_RCC_OscConfig+0x4b0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x4b0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x4b0>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7fe ff5f 	bl	8001298 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7fe ff5b 	bl	8001298 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e118      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x4b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x31e>
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a65      	ldr	r2, [pc, #404]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	e01c      	b.n	800244c <HAL_RCC_OscConfig+0x358>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b05      	cmp	r3, #5
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x340>
 800241a:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a60      	ldr	r2, [pc, #384]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
 8002426:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a5d      	ldr	r2, [pc, #372]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x358>
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a59      	ldr	r2, [pc, #356]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a56      	ldr	r2, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d015      	beq.n	8002480 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe ff20 	bl	8001298 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe ff1c 	bl	8001298 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0d7      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ee      	beq.n	800245c <HAL_RCC_OscConfig+0x368>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe ff0a 	bl	8001298 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe ff06 	bl	8001298 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0c1      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ee      	bne.n	8002488 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80024b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80ad 	beq.w	8002620 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d060      	beq.n	8002594 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d145      	bne.n	8002566 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_OscConfig+0x4b4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe feda 	bl	8001298 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fed6 	bl	8001298 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e093      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	019b      	lsls	r3, r3, #6
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	491b      	ldr	r1, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4b4>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe feab 	bl	8001298 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fea7 	bl	8001298 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e064      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x452>
 8002564:	e05c      	b.n	8002620 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_OscConfig+0x4b4>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fe94 	bl	8001298 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fe90 	bl	8001298 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04d      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x480>
 8002592:	e045      	b.n	8002620 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e040      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_RCC_OscConfig+0x538>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d030      	beq.n	800261c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d129      	bne.n	800261c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d122      	bne.n	800261c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d119      	bne.n	800261c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	3b01      	subs	r3, #1
 80025f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10f      	bne.n	800261c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e042      	b.n	80026c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fcd4 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f82b 	bl	80026d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d4:	b0c0      	sub	sp, #256	; 0x100
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ec:	68d9      	ldr	r1, [r3, #12]
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	ea40 0301 	orr.w	r3, r0, r1
 80026f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	431a      	orrs	r2, r3
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	431a      	orrs	r2, r3
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002728:	f021 010c 	bic.w	r1, r1, #12
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002736:	430b      	orrs	r3, r1
 8002738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274a:	6999      	ldr	r1, [r3, #24]
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	ea40 0301 	orr.w	r3, r0, r1
 8002756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8f      	ldr	r3, [pc, #572]	; (800299c <UART_SetConfig+0x2cc>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0xa0>
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b8d      	ldr	r3, [pc, #564]	; (80029a0 <UART_SetConfig+0x2d0>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d104      	bne.n	800277a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002770:	f7ff fa7c 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8002774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002778:	e003      	b.n	8002782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800277a:	f7ff fa63 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 800277e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278c:	f040 810c 	bne.w	80029a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800279a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800279e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	1891      	adds	r1, r2, r2
 80027a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80027aa:	415b      	adcs	r3, r3
 80027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027b2:	4621      	mov	r1, r4
 80027b4:	eb12 0801 	adds.w	r8, r2, r1
 80027b8:	4629      	mov	r1, r5
 80027ba:	eb43 0901 	adc.w	r9, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d2:	4690      	mov	r8, r2
 80027d4:	4699      	mov	r9, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb18 0303 	adds.w	r3, r8, r3
 80027dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027e0:	462b      	mov	r3, r5
 80027e2:	eb49 0303 	adc.w	r3, r9, r3
 80027e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027fe:	460b      	mov	r3, r1
 8002800:	18db      	adds	r3, r3, r3
 8002802:	653b      	str	r3, [r7, #80]	; 0x50
 8002804:	4613      	mov	r3, r2
 8002806:	eb42 0303 	adc.w	r3, r2, r3
 800280a:	657b      	str	r3, [r7, #84]	; 0x54
 800280c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002814:	f7fd fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <UART_SetConfig+0x2d4>)
 800281e:	fba3 2302 	umull	r2, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	011c      	lsls	r4, r3, #4
 8002826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002830:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002838:	4642      	mov	r2, r8
 800283a:	464b      	mov	r3, r9
 800283c:	1891      	adds	r1, r2, r2
 800283e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002840:	415b      	adcs	r3, r3
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002848:	4641      	mov	r1, r8
 800284a:	eb12 0a01 	adds.w	sl, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb43 0b01 	adc.w	fp, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002868:	4692      	mov	sl, r2
 800286a:	469b      	mov	fp, r3
 800286c:	4643      	mov	r3, r8
 800286e:	eb1a 0303 	adds.w	r3, sl, r3
 8002872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002876:	464b      	mov	r3, r9
 8002878:	eb4b 0303 	adc.w	r3, fp, r3
 800287c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800288c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002894:	460b      	mov	r3, r1
 8002896:	18db      	adds	r3, r3, r3
 8002898:	643b      	str	r3, [r7, #64]	; 0x40
 800289a:	4613      	mov	r3, r2
 800289c:	eb42 0303 	adc.w	r3, r2, r3
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
 80028a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028aa:	f7fd fd01 	bl	80002b0 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <UART_SetConfig+0x2d4>)
 80028b6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2264      	movs	r2, #100	; 0x64
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	1acb      	subs	r3, r1, r3
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <UART_SetConfig+0x2d4>)
 80028cc:	fba3 2302 	umull	r2, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d8:	441c      	add	r4, r3
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028f4:	415b      	adcs	r3, r3
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028fc:	4641      	mov	r1, r8
 80028fe:	1851      	adds	r1, r2, r1
 8002900:	6339      	str	r1, [r7, #48]	; 0x30
 8002902:	4649      	mov	r1, r9
 8002904:	414b      	adcs	r3, r1
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002914:	4659      	mov	r1, fp
 8002916:	00cb      	lsls	r3, r1, #3
 8002918:	4651      	mov	r1, sl
 800291a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800291e:	4651      	mov	r1, sl
 8002920:	00ca      	lsls	r2, r1, #3
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	4603      	mov	r3, r0
 8002928:	4642      	mov	r2, r8
 800292a:	189b      	adds	r3, r3, r2
 800292c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002930:	464b      	mov	r3, r9
 8002932:	460a      	mov	r2, r1
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002948:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800294c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002950:	460b      	mov	r3, r1
 8002952:	18db      	adds	r3, r3, r3
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
 8002956:	4613      	mov	r3, r2
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002966:	f7fd fca3 	bl	80002b0 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <UART_SetConfig+0x2d4>)
 8002970:	fba3 1302 	umull	r1, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	2164      	movs	r1, #100	; 0x64
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	3332      	adds	r3, #50	; 0x32
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <UART_SetConfig+0x2d4>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	f003 0207 	and.w	r2, r3, #7
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4422      	add	r2, r4
 8002996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002998:	e106      	b.n	8002ba8 <UART_SetConfig+0x4d8>
 800299a:	bf00      	nop
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029ba:	4642      	mov	r2, r8
 80029bc:	464b      	mov	r3, r9
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	6239      	str	r1, [r7, #32]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ca:	4641      	mov	r1, r8
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb43 0501 	adc.w	r5, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029f0:	464b      	mov	r3, r9
 80029f2:	eb45 0303 	adc.w	r3, r5, r3
 80029f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a16:	4629      	mov	r1, r5
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a20:	4621      	mov	r1, r4
 8002a22:	008a      	lsls	r2, r1, #2
 8002a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a28:	f7fd fc42 	bl	80002b0 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	011c      	lsls	r4, r3, #4
 8002a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	61b9      	str	r1, [r7, #24]
 8002a54:	415b      	adcs	r3, r3
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	1851      	adds	r1, r2, r1
 8002a60:	6139      	str	r1, [r7, #16]
 8002a62:	4649      	mov	r1, r9
 8002a64:	414b      	adcs	r3, r1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a74:	4659      	mov	r1, fp
 8002a76:	00cb      	lsls	r3, r1, #3
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7e:	4651      	mov	r1, sl
 8002a80:	00ca      	lsls	r2, r1, #3
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	008b      	lsls	r3, r1, #2
 8002ab8:	4641      	mov	r1, r8
 8002aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002abe:	4641      	mov	r1, r8
 8002ac0:	008a      	lsls	r2, r1, #2
 8002ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ac6:	f7fd fbf3 	bl	80002b0 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2264      	movs	r2, #100	; 0x64
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	1acb      	subs	r3, r1, r3
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	441c      	add	r4, r3
 8002af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	673b      	str	r3, [r7, #112]	; 0x70
 8002afa:	677a      	str	r2, [r7, #116]	; 0x74
 8002afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b42:	464b      	mov	r3, r9
 8002b44:	460a      	mov	r2, r1
 8002b46:	eb42 0303 	adc.w	r3, r2, r3
 8002b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
 8002b56:	667a      	str	r2, [r7, #100]	; 0x64
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b64:	4649      	mov	r1, r9
 8002b66:	008b      	lsls	r3, r1, #2
 8002b68:	4641      	mov	r1, r8
 8002b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6e:	4641      	mov	r1, r8
 8002b70:	008a      	lsls	r2, r1, #2
 8002b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b76:	f7fd fb9b 	bl	80002b0 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002b80:	fba3 1302 	umull	r1, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	2164      	movs	r1, #100	; 0x64
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <UART_SetConfig+0x4e4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4422      	add	r2, r4
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb4:	51eb851f 	.word	0x51eb851f

08002bb8 <siprintf>:
 8002bb8:	b40e      	push	{r1, r2, r3}
 8002bba:	b500      	push	{lr}
 8002bbc:	b09c      	sub	sp, #112	; 0x70
 8002bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8002bc0:	9002      	str	r0, [sp, #8]
 8002bc2:	9006      	str	r0, [sp, #24]
 8002bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bc8:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <siprintf+0x38>)
 8002bca:	9107      	str	r1, [sp, #28]
 8002bcc:	9104      	str	r1, [sp, #16]
 8002bce:	4909      	ldr	r1, [pc, #36]	; (8002bf4 <siprintf+0x3c>)
 8002bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bd4:	9105      	str	r1, [sp, #20]
 8002bd6:	6800      	ldr	r0, [r0, #0]
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	a902      	add	r1, sp, #8
 8002bdc:	f000 f992 	bl	8002f04 <_svfiprintf_r>
 8002be0:	9b02      	ldr	r3, [sp, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	b01c      	add	sp, #112	; 0x70
 8002be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bec:	b003      	add	sp, #12
 8002bee:	4770      	bx	lr
 8002bf0:	20000068 	.word	0x20000068
 8002bf4:	ffff0208 	.word	0xffff0208

08002bf8 <memset>:
 8002bf8:	4402      	add	r2, r0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	f803 1b01 	strb.w	r1, [r3], #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <__errno>:
 8002c08:	4b01      	ldr	r3, [pc, #4]	; (8002c10 <__errno+0x8>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000068 	.word	0x20000068

08002c14 <__libc_init_array>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4d0d      	ldr	r5, [pc, #52]	; (8002c4c <__libc_init_array+0x38>)
 8002c18:	4c0d      	ldr	r4, [pc, #52]	; (8002c50 <__libc_init_array+0x3c>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	2600      	movs	r6, #0
 8002c20:	42a6      	cmp	r6, r4
 8002c22:	d109      	bne.n	8002c38 <__libc_init_array+0x24>
 8002c24:	4d0b      	ldr	r5, [pc, #44]	; (8002c54 <__libc_init_array+0x40>)
 8002c26:	4c0c      	ldr	r4, [pc, #48]	; (8002c58 <__libc_init_array+0x44>)
 8002c28:	f000 fc6a 	bl	8003500 <_init>
 8002c2c:	1b64      	subs	r4, r4, r5
 8002c2e:	10a4      	asrs	r4, r4, #2
 8002c30:	2600      	movs	r6, #0
 8002c32:	42a6      	cmp	r6, r4
 8002c34:	d105      	bne.n	8002c42 <__libc_init_array+0x2e>
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3c:	4798      	blx	r3
 8002c3e:	3601      	adds	r6, #1
 8002c40:	e7ee      	b.n	8002c20 <__libc_init_array+0xc>
 8002c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c46:	4798      	blx	r3
 8002c48:	3601      	adds	r6, #1
 8002c4a:	e7f2      	b.n	8002c32 <__libc_init_array+0x1e>
 8002c4c:	08003598 	.word	0x08003598
 8002c50:	08003598 	.word	0x08003598
 8002c54:	08003598 	.word	0x08003598
 8002c58:	0800359c 	.word	0x0800359c

08002c5c <__retarget_lock_acquire_recursive>:
 8002c5c:	4770      	bx	lr

08002c5e <__retarget_lock_release_recursive>:
 8002c5e:	4770      	bx	lr

08002c60 <_free_r>:
 8002c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c62:	2900      	cmp	r1, #0
 8002c64:	d044      	beq.n	8002cf0 <_free_r+0x90>
 8002c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c6a:	9001      	str	r0, [sp, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8002c72:	bfb8      	it	lt
 8002c74:	18e4      	addlt	r4, r4, r3
 8002c76:	f000 f8df 	bl	8002e38 <__malloc_lock>
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <_free_r+0x94>)
 8002c7c:	9801      	ldr	r0, [sp, #4]
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	b933      	cbnz	r3, 8002c90 <_free_r+0x30>
 8002c82:	6063      	str	r3, [r4, #4]
 8002c84:	6014      	str	r4, [r2, #0]
 8002c86:	b003      	add	sp, #12
 8002c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c8c:	f000 b8da 	b.w	8002e44 <__malloc_unlock>
 8002c90:	42a3      	cmp	r3, r4
 8002c92:	d908      	bls.n	8002ca6 <_free_r+0x46>
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	1961      	adds	r1, r4, r5
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	bf01      	itttt	eq
 8002c9c:	6819      	ldreq	r1, [r3, #0]
 8002c9e:	685b      	ldreq	r3, [r3, #4]
 8002ca0:	1949      	addeq	r1, r1, r5
 8002ca2:	6021      	streq	r1, [r4, #0]
 8002ca4:	e7ed      	b.n	8002c82 <_free_r+0x22>
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	b10b      	cbz	r3, 8002cb0 <_free_r+0x50>
 8002cac:	42a3      	cmp	r3, r4
 8002cae:	d9fa      	bls.n	8002ca6 <_free_r+0x46>
 8002cb0:	6811      	ldr	r1, [r2, #0]
 8002cb2:	1855      	adds	r5, r2, r1
 8002cb4:	42a5      	cmp	r5, r4
 8002cb6:	d10b      	bne.n	8002cd0 <_free_r+0x70>
 8002cb8:	6824      	ldr	r4, [r4, #0]
 8002cba:	4421      	add	r1, r4
 8002cbc:	1854      	adds	r4, r2, r1
 8002cbe:	42a3      	cmp	r3, r4
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	d1e0      	bne.n	8002c86 <_free_r+0x26>
 8002cc4:	681c      	ldr	r4, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	6053      	str	r3, [r2, #4]
 8002cca:	440c      	add	r4, r1
 8002ccc:	6014      	str	r4, [r2, #0]
 8002cce:	e7da      	b.n	8002c86 <_free_r+0x26>
 8002cd0:	d902      	bls.n	8002cd8 <_free_r+0x78>
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	6003      	str	r3, [r0, #0]
 8002cd6:	e7d6      	b.n	8002c86 <_free_r+0x26>
 8002cd8:	6825      	ldr	r5, [r4, #0]
 8002cda:	1961      	adds	r1, r4, r5
 8002cdc:	428b      	cmp	r3, r1
 8002cde:	bf04      	itt	eq
 8002ce0:	6819      	ldreq	r1, [r3, #0]
 8002ce2:	685b      	ldreq	r3, [r3, #4]
 8002ce4:	6063      	str	r3, [r4, #4]
 8002ce6:	bf04      	itt	eq
 8002ce8:	1949      	addeq	r1, r1, r5
 8002cea:	6021      	streq	r1, [r4, #0]
 8002cec:	6054      	str	r4, [r2, #4]
 8002cee:	e7ca      	b.n	8002c86 <_free_r+0x26>
 8002cf0:	b003      	add	sp, #12
 8002cf2:	bd30      	pop	{r4, r5, pc}
 8002cf4:	200002a4 	.word	0x200002a4

08002cf8 <sbrk_aligned>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4e0e      	ldr	r6, [pc, #56]	; (8002d34 <sbrk_aligned+0x3c>)
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	6831      	ldr	r1, [r6, #0]
 8002d00:	4605      	mov	r5, r0
 8002d02:	b911      	cbnz	r1, 8002d0a <sbrk_aligned+0x12>
 8002d04:	f000 fba6 	bl	8003454 <_sbrk_r>
 8002d08:	6030      	str	r0, [r6, #0]
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f000 fba1 	bl	8003454 <_sbrk_r>
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	d00a      	beq.n	8002d2c <sbrk_aligned+0x34>
 8002d16:	1cc4      	adds	r4, r0, #3
 8002d18:	f024 0403 	bic.w	r4, r4, #3
 8002d1c:	42a0      	cmp	r0, r4
 8002d1e:	d007      	beq.n	8002d30 <sbrk_aligned+0x38>
 8002d20:	1a21      	subs	r1, r4, r0
 8002d22:	4628      	mov	r0, r5
 8002d24:	f000 fb96 	bl	8003454 <_sbrk_r>
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d101      	bne.n	8002d30 <sbrk_aligned+0x38>
 8002d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002d30:	4620      	mov	r0, r4
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	200002a8 	.word	0x200002a8

08002d38 <_malloc_r>:
 8002d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d3c:	1ccd      	adds	r5, r1, #3
 8002d3e:	f025 0503 	bic.w	r5, r5, #3
 8002d42:	3508      	adds	r5, #8
 8002d44:	2d0c      	cmp	r5, #12
 8002d46:	bf38      	it	cc
 8002d48:	250c      	movcc	r5, #12
 8002d4a:	2d00      	cmp	r5, #0
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	db01      	blt.n	8002d54 <_malloc_r+0x1c>
 8002d50:	42a9      	cmp	r1, r5
 8002d52:	d905      	bls.n	8002d60 <_malloc_r+0x28>
 8002d54:	230c      	movs	r3, #12
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	2600      	movs	r6, #0
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e34 <_malloc_r+0xfc>
 8002d64:	f000 f868 	bl	8002e38 <__malloc_lock>
 8002d68:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	bb5c      	cbnz	r4, 8002dc8 <_malloc_r+0x90>
 8002d70:	4629      	mov	r1, r5
 8002d72:	4638      	mov	r0, r7
 8002d74:	f7ff ffc0 	bl	8002cf8 <sbrk_aligned>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	d155      	bne.n	8002e2a <_malloc_r+0xf2>
 8002d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8002d82:	4626      	mov	r6, r4
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	d145      	bne.n	8002e14 <_malloc_r+0xdc>
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d048      	beq.n	8002e1e <_malloc_r+0xe6>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4638      	mov	r0, r7
 8002d92:	eb04 0903 	add.w	r9, r4, r3
 8002d96:	f000 fb5d 	bl	8003454 <_sbrk_r>
 8002d9a:	4581      	cmp	r9, r0
 8002d9c:	d13f      	bne.n	8002e1e <_malloc_r+0xe6>
 8002d9e:	6821      	ldr	r1, [r4, #0]
 8002da0:	1a6d      	subs	r5, r5, r1
 8002da2:	4629      	mov	r1, r5
 8002da4:	4638      	mov	r0, r7
 8002da6:	f7ff ffa7 	bl	8002cf8 <sbrk_aligned>
 8002daa:	3001      	adds	r0, #1
 8002dac:	d037      	beq.n	8002e1e <_malloc_r+0xe6>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	442b      	add	r3, r5
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	f8d8 3000 	ldr.w	r3, [r8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d038      	beq.n	8002e2e <_malloc_r+0xf6>
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	42a2      	cmp	r2, r4
 8002dc0:	d12b      	bne.n	8002e1a <_malloc_r+0xe2>
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	e00f      	b.n	8002de8 <_malloc_r+0xb0>
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	1b52      	subs	r2, r2, r5
 8002dcc:	d41f      	bmi.n	8002e0e <_malloc_r+0xd6>
 8002dce:	2a0b      	cmp	r2, #11
 8002dd0:	d917      	bls.n	8002e02 <_malloc_r+0xca>
 8002dd2:	1961      	adds	r1, r4, r5
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	6025      	str	r5, [r4, #0]
 8002dd8:	bf18      	it	ne
 8002dda:	6059      	strne	r1, [r3, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	bf08      	it	eq
 8002de0:	f8c8 1000 	streq.w	r1, [r8]
 8002de4:	5162      	str	r2, [r4, r5]
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	4638      	mov	r0, r7
 8002dea:	f104 060b 	add.w	r6, r4, #11
 8002dee:	f000 f829 	bl	8002e44 <__malloc_unlock>
 8002df2:	f026 0607 	bic.w	r6, r6, #7
 8002df6:	1d23      	adds	r3, r4, #4
 8002df8:	1af2      	subs	r2, r6, r3
 8002dfa:	d0ae      	beq.n	8002d5a <_malloc_r+0x22>
 8002dfc:	1b9b      	subs	r3, r3, r6
 8002dfe:	50a3      	str	r3, [r4, r2]
 8002e00:	e7ab      	b.n	8002d5a <_malloc_r+0x22>
 8002e02:	42a3      	cmp	r3, r4
 8002e04:	6862      	ldr	r2, [r4, #4]
 8002e06:	d1dd      	bne.n	8002dc4 <_malloc_r+0x8c>
 8002e08:	f8c8 2000 	str.w	r2, [r8]
 8002e0c:	e7ec      	b.n	8002de8 <_malloc_r+0xb0>
 8002e0e:	4623      	mov	r3, r4
 8002e10:	6864      	ldr	r4, [r4, #4]
 8002e12:	e7ac      	b.n	8002d6e <_malloc_r+0x36>
 8002e14:	4634      	mov	r4, r6
 8002e16:	6876      	ldr	r6, [r6, #4]
 8002e18:	e7b4      	b.n	8002d84 <_malloc_r+0x4c>
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	e7cc      	b.n	8002db8 <_malloc_r+0x80>
 8002e1e:	230c      	movs	r3, #12
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4638      	mov	r0, r7
 8002e24:	f000 f80e 	bl	8002e44 <__malloc_unlock>
 8002e28:	e797      	b.n	8002d5a <_malloc_r+0x22>
 8002e2a:	6025      	str	r5, [r4, #0]
 8002e2c:	e7dc      	b.n	8002de8 <_malloc_r+0xb0>
 8002e2e:	605b      	str	r3, [r3, #4]
 8002e30:	deff      	udf	#255	; 0xff
 8002e32:	bf00      	nop
 8002e34:	200002a4 	.word	0x200002a4

08002e38 <__malloc_lock>:
 8002e38:	4801      	ldr	r0, [pc, #4]	; (8002e40 <__malloc_lock+0x8>)
 8002e3a:	f7ff bf0f 	b.w	8002c5c <__retarget_lock_acquire_recursive>
 8002e3e:	bf00      	nop
 8002e40:	200002a0 	.word	0x200002a0

08002e44 <__malloc_unlock>:
 8002e44:	4801      	ldr	r0, [pc, #4]	; (8002e4c <__malloc_unlock+0x8>)
 8002e46:	f7ff bf0a 	b.w	8002c5e <__retarget_lock_release_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	200002a0 	.word	0x200002a0

08002e50 <__ssputs_r>:
 8002e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e54:	688e      	ldr	r6, [r1, #8]
 8002e56:	461f      	mov	r7, r3
 8002e58:	42be      	cmp	r6, r7
 8002e5a:	680b      	ldr	r3, [r1, #0]
 8002e5c:	4682      	mov	sl, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	4690      	mov	r8, r2
 8002e62:	d82c      	bhi.n	8002ebe <__ssputs_r+0x6e>
 8002e64:	898a      	ldrh	r2, [r1, #12]
 8002e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e6a:	d026      	beq.n	8002eba <__ssputs_r+0x6a>
 8002e6c:	6965      	ldr	r5, [r4, #20]
 8002e6e:	6909      	ldr	r1, [r1, #16]
 8002e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e74:	eba3 0901 	sub.w	r9, r3, r1
 8002e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e7c:	1c7b      	adds	r3, r7, #1
 8002e7e:	444b      	add	r3, r9
 8002e80:	106d      	asrs	r5, r5, #1
 8002e82:	429d      	cmp	r5, r3
 8002e84:	bf38      	it	cc
 8002e86:	461d      	movcc	r5, r3
 8002e88:	0553      	lsls	r3, r2, #21
 8002e8a:	d527      	bpl.n	8002edc <__ssputs_r+0x8c>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f7ff ff53 	bl	8002d38 <_malloc_r>
 8002e92:	4606      	mov	r6, r0
 8002e94:	b360      	cbz	r0, 8002ef0 <__ssputs_r+0xa0>
 8002e96:	6921      	ldr	r1, [r4, #16]
 8002e98:	464a      	mov	r2, r9
 8002e9a:	f000 faeb 	bl	8003474 <memcpy>
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea8:	81a3      	strh	r3, [r4, #12]
 8002eaa:	6126      	str	r6, [r4, #16]
 8002eac:	6165      	str	r5, [r4, #20]
 8002eae:	444e      	add	r6, r9
 8002eb0:	eba5 0509 	sub.w	r5, r5, r9
 8002eb4:	6026      	str	r6, [r4, #0]
 8002eb6:	60a5      	str	r5, [r4, #8]
 8002eb8:	463e      	mov	r6, r7
 8002eba:	42be      	cmp	r6, r7
 8002ebc:	d900      	bls.n	8002ec0 <__ssputs_r+0x70>
 8002ebe:	463e      	mov	r6, r7
 8002ec0:	6820      	ldr	r0, [r4, #0]
 8002ec2:	4632      	mov	r2, r6
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	f000 faab 	bl	8003420 <memmove>
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	1b9b      	subs	r3, r3, r6
 8002ece:	60a3      	str	r3, [r4, #8]
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	4433      	add	r3, r6
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002edc:	462a      	mov	r2, r5
 8002ede:	f000 fad7 	bl	8003490 <_realloc_r>
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1e0      	bne.n	8002eaa <__ssputs_r+0x5a>
 8002ee8:	6921      	ldr	r1, [r4, #16]
 8002eea:	4650      	mov	r0, sl
 8002eec:	f7ff feb8 	bl	8002c60 <_free_r>
 8002ef0:	230c      	movs	r3, #12
 8002ef2:	f8ca 3000 	str.w	r3, [sl]
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	e7e9      	b.n	8002ed8 <__ssputs_r+0x88>

08002f04 <_svfiprintf_r>:
 8002f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f08:	4698      	mov	r8, r3
 8002f0a:	898b      	ldrh	r3, [r1, #12]
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	b09d      	sub	sp, #116	; 0x74
 8002f10:	4607      	mov	r7, r0
 8002f12:	460d      	mov	r5, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	d50e      	bpl.n	8002f36 <_svfiprintf_r+0x32>
 8002f18:	690b      	ldr	r3, [r1, #16]
 8002f1a:	b963      	cbnz	r3, 8002f36 <_svfiprintf_r+0x32>
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	f7ff ff0b 	bl	8002d38 <_malloc_r>
 8002f22:	6028      	str	r0, [r5, #0]
 8002f24:	6128      	str	r0, [r5, #16]
 8002f26:	b920      	cbnz	r0, 8002f32 <_svfiprintf_r+0x2e>
 8002f28:	230c      	movs	r3, #12
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	e0d0      	b.n	80030d4 <_svfiprintf_r+0x1d0>
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	616b      	str	r3, [r5, #20]
 8002f36:	2300      	movs	r3, #0
 8002f38:	9309      	str	r3, [sp, #36]	; 0x24
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f44:	2330      	movs	r3, #48	; 0x30
 8002f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030ec <_svfiprintf_r+0x1e8>
 8002f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f4e:	f04f 0901 	mov.w	r9, #1
 8002f52:	4623      	mov	r3, r4
 8002f54:	469a      	mov	sl, r3
 8002f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f5a:	b10a      	cbz	r2, 8002f60 <_svfiprintf_r+0x5c>
 8002f5c:	2a25      	cmp	r2, #37	; 0x25
 8002f5e:	d1f9      	bne.n	8002f54 <_svfiprintf_r+0x50>
 8002f60:	ebba 0b04 	subs.w	fp, sl, r4
 8002f64:	d00b      	beq.n	8002f7e <_svfiprintf_r+0x7a>
 8002f66:	465b      	mov	r3, fp
 8002f68:	4622      	mov	r2, r4
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f7ff ff6f 	bl	8002e50 <__ssputs_r>
 8002f72:	3001      	adds	r0, #1
 8002f74:	f000 80a9 	beq.w	80030ca <_svfiprintf_r+0x1c6>
 8002f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f7a:	445a      	add	r2, fp
 8002f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80a1 	beq.w	80030ca <_svfiprintf_r+0x1c6>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f92:	f10a 0a01 	add.w	sl, sl, #1
 8002f96:	9304      	str	r3, [sp, #16]
 8002f98:	9307      	str	r3, [sp, #28]
 8002f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8002fa0:	4654      	mov	r4, sl
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa8:	4850      	ldr	r0, [pc, #320]	; (80030ec <_svfiprintf_r+0x1e8>)
 8002faa:	f7fd f931 	bl	8000210 <memchr>
 8002fae:	9a04      	ldr	r2, [sp, #16]
 8002fb0:	b9d8      	cbnz	r0, 8002fea <_svfiprintf_r+0xe6>
 8002fb2:	06d0      	lsls	r0, r2, #27
 8002fb4:	bf44      	itt	mi
 8002fb6:	2320      	movmi	r3, #32
 8002fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fbc:	0711      	lsls	r1, r2, #28
 8002fbe:	bf44      	itt	mi
 8002fc0:	232b      	movmi	r3, #43	; 0x2b
 8002fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8002fca:	2b2a      	cmp	r3, #42	; 0x2a
 8002fcc:	d015      	beq.n	8002ffa <_svfiprintf_r+0xf6>
 8002fce:	9a07      	ldr	r2, [sp, #28]
 8002fd0:	4654      	mov	r4, sl
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f04f 0c0a 	mov.w	ip, #10
 8002fd8:	4621      	mov	r1, r4
 8002fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fde:	3b30      	subs	r3, #48	; 0x30
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d94d      	bls.n	8003080 <_svfiprintf_r+0x17c>
 8002fe4:	b1b0      	cbz	r0, 8003014 <_svfiprintf_r+0x110>
 8002fe6:	9207      	str	r2, [sp, #28]
 8002fe8:	e014      	b.n	8003014 <_svfiprintf_r+0x110>
 8002fea:	eba0 0308 	sub.w	r3, r0, r8
 8002fee:	fa09 f303 	lsl.w	r3, r9, r3
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	9304      	str	r3, [sp, #16]
 8002ff6:	46a2      	mov	sl, r4
 8002ff8:	e7d2      	b.n	8002fa0 <_svfiprintf_r+0x9c>
 8002ffa:	9b03      	ldr	r3, [sp, #12]
 8002ffc:	1d19      	adds	r1, r3, #4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	9103      	str	r1, [sp, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	bfbb      	ittet	lt
 8003006:	425b      	neglt	r3, r3
 8003008:	f042 0202 	orrlt.w	r2, r2, #2
 800300c:	9307      	strge	r3, [sp, #28]
 800300e:	9307      	strlt	r3, [sp, #28]
 8003010:	bfb8      	it	lt
 8003012:	9204      	strlt	r2, [sp, #16]
 8003014:	7823      	ldrb	r3, [r4, #0]
 8003016:	2b2e      	cmp	r3, #46	; 0x2e
 8003018:	d10c      	bne.n	8003034 <_svfiprintf_r+0x130>
 800301a:	7863      	ldrb	r3, [r4, #1]
 800301c:	2b2a      	cmp	r3, #42	; 0x2a
 800301e:	d134      	bne.n	800308a <_svfiprintf_r+0x186>
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	1d1a      	adds	r2, r3, #4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	9203      	str	r2, [sp, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	bfb8      	it	lt
 800302c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003030:	3402      	adds	r4, #2
 8003032:	9305      	str	r3, [sp, #20]
 8003034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80030fc <_svfiprintf_r+0x1f8>
 8003038:	7821      	ldrb	r1, [r4, #0]
 800303a:	2203      	movs	r2, #3
 800303c:	4650      	mov	r0, sl
 800303e:	f7fd f8e7 	bl	8000210 <memchr>
 8003042:	b138      	cbz	r0, 8003054 <_svfiprintf_r+0x150>
 8003044:	9b04      	ldr	r3, [sp, #16]
 8003046:	eba0 000a 	sub.w	r0, r0, sl
 800304a:	2240      	movs	r2, #64	; 0x40
 800304c:	4082      	lsls	r2, r0
 800304e:	4313      	orrs	r3, r2
 8003050:	3401      	adds	r4, #1
 8003052:	9304      	str	r3, [sp, #16]
 8003054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003058:	4825      	ldr	r0, [pc, #148]	; (80030f0 <_svfiprintf_r+0x1ec>)
 800305a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800305e:	2206      	movs	r2, #6
 8003060:	f7fd f8d6 	bl	8000210 <memchr>
 8003064:	2800      	cmp	r0, #0
 8003066:	d038      	beq.n	80030da <_svfiprintf_r+0x1d6>
 8003068:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <_svfiprintf_r+0x1f0>)
 800306a:	bb1b      	cbnz	r3, 80030b4 <_svfiprintf_r+0x1b0>
 800306c:	9b03      	ldr	r3, [sp, #12]
 800306e:	3307      	adds	r3, #7
 8003070:	f023 0307 	bic.w	r3, r3, #7
 8003074:	3308      	adds	r3, #8
 8003076:	9303      	str	r3, [sp, #12]
 8003078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800307a:	4433      	add	r3, r6
 800307c:	9309      	str	r3, [sp, #36]	; 0x24
 800307e:	e768      	b.n	8002f52 <_svfiprintf_r+0x4e>
 8003080:	fb0c 3202 	mla	r2, ip, r2, r3
 8003084:	460c      	mov	r4, r1
 8003086:	2001      	movs	r0, #1
 8003088:	e7a6      	b.n	8002fd8 <_svfiprintf_r+0xd4>
 800308a:	2300      	movs	r3, #0
 800308c:	3401      	adds	r4, #1
 800308e:	9305      	str	r3, [sp, #20]
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 0c0a 	mov.w	ip, #10
 8003096:	4620      	mov	r0, r4
 8003098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800309c:	3a30      	subs	r2, #48	; 0x30
 800309e:	2a09      	cmp	r2, #9
 80030a0:	d903      	bls.n	80030aa <_svfiprintf_r+0x1a6>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0c6      	beq.n	8003034 <_svfiprintf_r+0x130>
 80030a6:	9105      	str	r1, [sp, #20]
 80030a8:	e7c4      	b.n	8003034 <_svfiprintf_r+0x130>
 80030aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80030ae:	4604      	mov	r4, r0
 80030b0:	2301      	movs	r3, #1
 80030b2:	e7f0      	b.n	8003096 <_svfiprintf_r+0x192>
 80030b4:	ab03      	add	r3, sp, #12
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	462a      	mov	r2, r5
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <_svfiprintf_r+0x1f4>)
 80030bc:	a904      	add	r1, sp, #16
 80030be:	4638      	mov	r0, r7
 80030c0:	f3af 8000 	nop.w
 80030c4:	1c42      	adds	r2, r0, #1
 80030c6:	4606      	mov	r6, r0
 80030c8:	d1d6      	bne.n	8003078 <_svfiprintf_r+0x174>
 80030ca:	89ab      	ldrh	r3, [r5, #12]
 80030cc:	065b      	lsls	r3, r3, #25
 80030ce:	f53f af2d 	bmi.w	8002f2c <_svfiprintf_r+0x28>
 80030d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030d4:	b01d      	add	sp, #116	; 0x74
 80030d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030da:	ab03      	add	r3, sp, #12
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	462a      	mov	r2, r5
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <_svfiprintf_r+0x1f4>)
 80030e2:	a904      	add	r1, sp, #16
 80030e4:	4638      	mov	r0, r7
 80030e6:	f000 f879 	bl	80031dc <_printf_i>
 80030ea:	e7eb      	b.n	80030c4 <_svfiprintf_r+0x1c0>
 80030ec:	0800355c 	.word	0x0800355c
 80030f0:	08003566 	.word	0x08003566
 80030f4:	00000000 	.word	0x00000000
 80030f8:	08002e51 	.word	0x08002e51
 80030fc:	08003562 	.word	0x08003562

08003100 <_printf_common>:
 8003100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	4616      	mov	r6, r2
 8003106:	4699      	mov	r9, r3
 8003108:	688a      	ldr	r2, [r1, #8]
 800310a:	690b      	ldr	r3, [r1, #16]
 800310c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003110:	4293      	cmp	r3, r2
 8003112:	bfb8      	it	lt
 8003114:	4613      	movlt	r3, r2
 8003116:	6033      	str	r3, [r6, #0]
 8003118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800311c:	4607      	mov	r7, r0
 800311e:	460c      	mov	r4, r1
 8003120:	b10a      	cbz	r2, 8003126 <_printf_common+0x26>
 8003122:	3301      	adds	r3, #1
 8003124:	6033      	str	r3, [r6, #0]
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	0699      	lsls	r1, r3, #26
 800312a:	bf42      	ittt	mi
 800312c:	6833      	ldrmi	r3, [r6, #0]
 800312e:	3302      	addmi	r3, #2
 8003130:	6033      	strmi	r3, [r6, #0]
 8003132:	6825      	ldr	r5, [r4, #0]
 8003134:	f015 0506 	ands.w	r5, r5, #6
 8003138:	d106      	bne.n	8003148 <_printf_common+0x48>
 800313a:	f104 0a19 	add.w	sl, r4, #25
 800313e:	68e3      	ldr	r3, [r4, #12]
 8003140:	6832      	ldr	r2, [r6, #0]
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	42ab      	cmp	r3, r5
 8003146:	dc26      	bgt.n	8003196 <_printf_common+0x96>
 8003148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800314c:	1e13      	subs	r3, r2, #0
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	bf18      	it	ne
 8003152:	2301      	movne	r3, #1
 8003154:	0692      	lsls	r2, r2, #26
 8003156:	d42b      	bmi.n	80031b0 <_printf_common+0xb0>
 8003158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800315c:	4649      	mov	r1, r9
 800315e:	4638      	mov	r0, r7
 8003160:	47c0      	blx	r8
 8003162:	3001      	adds	r0, #1
 8003164:	d01e      	beq.n	80031a4 <_printf_common+0xa4>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	6922      	ldr	r2, [r4, #16]
 800316a:	f003 0306 	and.w	r3, r3, #6
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf02      	ittt	eq
 8003172:	68e5      	ldreq	r5, [r4, #12]
 8003174:	6833      	ldreq	r3, [r6, #0]
 8003176:	1aed      	subeq	r5, r5, r3
 8003178:	68a3      	ldr	r3, [r4, #8]
 800317a:	bf0c      	ite	eq
 800317c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003180:	2500      	movne	r5, #0
 8003182:	4293      	cmp	r3, r2
 8003184:	bfc4      	itt	gt
 8003186:	1a9b      	subgt	r3, r3, r2
 8003188:	18ed      	addgt	r5, r5, r3
 800318a:	2600      	movs	r6, #0
 800318c:	341a      	adds	r4, #26
 800318e:	42b5      	cmp	r5, r6
 8003190:	d11a      	bne.n	80031c8 <_printf_common+0xc8>
 8003192:	2000      	movs	r0, #0
 8003194:	e008      	b.n	80031a8 <_printf_common+0xa8>
 8003196:	2301      	movs	r3, #1
 8003198:	4652      	mov	r2, sl
 800319a:	4649      	mov	r1, r9
 800319c:	4638      	mov	r0, r7
 800319e:	47c0      	blx	r8
 80031a0:	3001      	adds	r0, #1
 80031a2:	d103      	bne.n	80031ac <_printf_common+0xac>
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ac:	3501      	adds	r5, #1
 80031ae:	e7c6      	b.n	800313e <_printf_common+0x3e>
 80031b0:	18e1      	adds	r1, r4, r3
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	2030      	movs	r0, #48	; 0x30
 80031b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031ba:	4422      	add	r2, r4
 80031bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031c4:	3302      	adds	r3, #2
 80031c6:	e7c7      	b.n	8003158 <_printf_common+0x58>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4622      	mov	r2, r4
 80031cc:	4649      	mov	r1, r9
 80031ce:	4638      	mov	r0, r7
 80031d0:	47c0      	blx	r8
 80031d2:	3001      	adds	r0, #1
 80031d4:	d0e6      	beq.n	80031a4 <_printf_common+0xa4>
 80031d6:	3601      	adds	r6, #1
 80031d8:	e7d9      	b.n	800318e <_printf_common+0x8e>
	...

080031dc <_printf_i>:
 80031dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	7e0f      	ldrb	r7, [r1, #24]
 80031e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031e4:	2f78      	cmp	r7, #120	; 0x78
 80031e6:	4691      	mov	r9, r2
 80031e8:	4680      	mov	r8, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	469a      	mov	sl, r3
 80031ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031f2:	d807      	bhi.n	8003204 <_printf_i+0x28>
 80031f4:	2f62      	cmp	r7, #98	; 0x62
 80031f6:	d80a      	bhi.n	800320e <_printf_i+0x32>
 80031f8:	2f00      	cmp	r7, #0
 80031fa:	f000 80d4 	beq.w	80033a6 <_printf_i+0x1ca>
 80031fe:	2f58      	cmp	r7, #88	; 0x58
 8003200:	f000 80c0 	beq.w	8003384 <_printf_i+0x1a8>
 8003204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800320c:	e03a      	b.n	8003284 <_printf_i+0xa8>
 800320e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003212:	2b15      	cmp	r3, #21
 8003214:	d8f6      	bhi.n	8003204 <_printf_i+0x28>
 8003216:	a101      	add	r1, pc, #4	; (adr r1, 800321c <_printf_i+0x40>)
 8003218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800321c:	08003275 	.word	0x08003275
 8003220:	08003289 	.word	0x08003289
 8003224:	08003205 	.word	0x08003205
 8003228:	08003205 	.word	0x08003205
 800322c:	08003205 	.word	0x08003205
 8003230:	08003205 	.word	0x08003205
 8003234:	08003289 	.word	0x08003289
 8003238:	08003205 	.word	0x08003205
 800323c:	08003205 	.word	0x08003205
 8003240:	08003205 	.word	0x08003205
 8003244:	08003205 	.word	0x08003205
 8003248:	0800338d 	.word	0x0800338d
 800324c:	080032b5 	.word	0x080032b5
 8003250:	08003347 	.word	0x08003347
 8003254:	08003205 	.word	0x08003205
 8003258:	08003205 	.word	0x08003205
 800325c:	080033af 	.word	0x080033af
 8003260:	08003205 	.word	0x08003205
 8003264:	080032b5 	.word	0x080032b5
 8003268:	08003205 	.word	0x08003205
 800326c:	08003205 	.word	0x08003205
 8003270:	0800334f 	.word	0x0800334f
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	602a      	str	r2, [r5, #0]
 800327c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003284:	2301      	movs	r3, #1
 8003286:	e09f      	b.n	80033c8 <_printf_i+0x1ec>
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	0607      	lsls	r7, r0, #24
 800328e:	f103 0104 	add.w	r1, r3, #4
 8003292:	6029      	str	r1, [r5, #0]
 8003294:	d501      	bpl.n	800329a <_printf_i+0xbe>
 8003296:	681e      	ldr	r6, [r3, #0]
 8003298:	e003      	b.n	80032a2 <_printf_i+0xc6>
 800329a:	0646      	lsls	r6, r0, #25
 800329c:	d5fb      	bpl.n	8003296 <_printf_i+0xba>
 800329e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032a2:	2e00      	cmp	r6, #0
 80032a4:	da03      	bge.n	80032ae <_printf_i+0xd2>
 80032a6:	232d      	movs	r3, #45	; 0x2d
 80032a8:	4276      	negs	r6, r6
 80032aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ae:	485a      	ldr	r0, [pc, #360]	; (8003418 <_printf_i+0x23c>)
 80032b0:	230a      	movs	r3, #10
 80032b2:	e012      	b.n	80032da <_printf_i+0xfe>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	1d19      	adds	r1, r3, #4
 80032ba:	6029      	str	r1, [r5, #0]
 80032bc:	0605      	lsls	r5, r0, #24
 80032be:	d501      	bpl.n	80032c4 <_printf_i+0xe8>
 80032c0:	681e      	ldr	r6, [r3, #0]
 80032c2:	e002      	b.n	80032ca <_printf_i+0xee>
 80032c4:	0641      	lsls	r1, r0, #25
 80032c6:	d5fb      	bpl.n	80032c0 <_printf_i+0xe4>
 80032c8:	881e      	ldrh	r6, [r3, #0]
 80032ca:	4853      	ldr	r0, [pc, #332]	; (8003418 <_printf_i+0x23c>)
 80032cc:	2f6f      	cmp	r7, #111	; 0x6f
 80032ce:	bf0c      	ite	eq
 80032d0:	2308      	moveq	r3, #8
 80032d2:	230a      	movne	r3, #10
 80032d4:	2100      	movs	r1, #0
 80032d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032da:	6865      	ldr	r5, [r4, #4]
 80032dc:	60a5      	str	r5, [r4, #8]
 80032de:	2d00      	cmp	r5, #0
 80032e0:	bfa2      	ittt	ge
 80032e2:	6821      	ldrge	r1, [r4, #0]
 80032e4:	f021 0104 	bicge.w	r1, r1, #4
 80032e8:	6021      	strge	r1, [r4, #0]
 80032ea:	b90e      	cbnz	r6, 80032f0 <_printf_i+0x114>
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	d04b      	beq.n	8003388 <_printf_i+0x1ac>
 80032f0:	4615      	mov	r5, r2
 80032f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80032f6:	fb03 6711 	mls	r7, r3, r1, r6
 80032fa:	5dc7      	ldrb	r7, [r0, r7]
 80032fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003300:	4637      	mov	r7, r6
 8003302:	42bb      	cmp	r3, r7
 8003304:	460e      	mov	r6, r1
 8003306:	d9f4      	bls.n	80032f2 <_printf_i+0x116>
 8003308:	2b08      	cmp	r3, #8
 800330a:	d10b      	bne.n	8003324 <_printf_i+0x148>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	07de      	lsls	r6, r3, #31
 8003310:	d508      	bpl.n	8003324 <_printf_i+0x148>
 8003312:	6923      	ldr	r3, [r4, #16]
 8003314:	6861      	ldr	r1, [r4, #4]
 8003316:	4299      	cmp	r1, r3
 8003318:	bfde      	ittt	le
 800331a:	2330      	movle	r3, #48	; 0x30
 800331c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003324:	1b52      	subs	r2, r2, r5
 8003326:	6122      	str	r2, [r4, #16]
 8003328:	f8cd a000 	str.w	sl, [sp]
 800332c:	464b      	mov	r3, r9
 800332e:	aa03      	add	r2, sp, #12
 8003330:	4621      	mov	r1, r4
 8003332:	4640      	mov	r0, r8
 8003334:	f7ff fee4 	bl	8003100 <_printf_common>
 8003338:	3001      	adds	r0, #1
 800333a:	d14a      	bne.n	80033d2 <_printf_i+0x1f6>
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	b004      	add	sp, #16
 8003342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f043 0320 	orr.w	r3, r3, #32
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	4833      	ldr	r0, [pc, #204]	; (800341c <_printf_i+0x240>)
 8003350:	2778      	movs	r7, #120	; 0x78
 8003352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	6829      	ldr	r1, [r5, #0]
 800335a:	061f      	lsls	r7, r3, #24
 800335c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003360:	d402      	bmi.n	8003368 <_printf_i+0x18c>
 8003362:	065f      	lsls	r7, r3, #25
 8003364:	bf48      	it	mi
 8003366:	b2b6      	uxthmi	r6, r6
 8003368:	07df      	lsls	r7, r3, #31
 800336a:	bf48      	it	mi
 800336c:	f043 0320 	orrmi.w	r3, r3, #32
 8003370:	6029      	str	r1, [r5, #0]
 8003372:	bf48      	it	mi
 8003374:	6023      	strmi	r3, [r4, #0]
 8003376:	b91e      	cbnz	r6, 8003380 <_printf_i+0x1a4>
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	f023 0320 	bic.w	r3, r3, #32
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	2310      	movs	r3, #16
 8003382:	e7a7      	b.n	80032d4 <_printf_i+0xf8>
 8003384:	4824      	ldr	r0, [pc, #144]	; (8003418 <_printf_i+0x23c>)
 8003386:	e7e4      	b.n	8003352 <_printf_i+0x176>
 8003388:	4615      	mov	r5, r2
 800338a:	e7bd      	b.n	8003308 <_printf_i+0x12c>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	6826      	ldr	r6, [r4, #0]
 8003390:	6961      	ldr	r1, [r4, #20]
 8003392:	1d18      	adds	r0, r3, #4
 8003394:	6028      	str	r0, [r5, #0]
 8003396:	0635      	lsls	r5, r6, #24
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	d501      	bpl.n	80033a0 <_printf_i+0x1c4>
 800339c:	6019      	str	r1, [r3, #0]
 800339e:	e002      	b.n	80033a6 <_printf_i+0x1ca>
 80033a0:	0670      	lsls	r0, r6, #25
 80033a2:	d5fb      	bpl.n	800339c <_printf_i+0x1c0>
 80033a4:	8019      	strh	r1, [r3, #0]
 80033a6:	2300      	movs	r3, #0
 80033a8:	6123      	str	r3, [r4, #16]
 80033aa:	4615      	mov	r5, r2
 80033ac:	e7bc      	b.n	8003328 <_printf_i+0x14c>
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	1d1a      	adds	r2, r3, #4
 80033b2:	602a      	str	r2, [r5, #0]
 80033b4:	681d      	ldr	r5, [r3, #0]
 80033b6:	6862      	ldr	r2, [r4, #4]
 80033b8:	2100      	movs	r1, #0
 80033ba:	4628      	mov	r0, r5
 80033bc:	f7fc ff28 	bl	8000210 <memchr>
 80033c0:	b108      	cbz	r0, 80033c6 <_printf_i+0x1ea>
 80033c2:	1b40      	subs	r0, r0, r5
 80033c4:	6060      	str	r0, [r4, #4]
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	6123      	str	r3, [r4, #16]
 80033ca:	2300      	movs	r3, #0
 80033cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d0:	e7aa      	b.n	8003328 <_printf_i+0x14c>
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	462a      	mov	r2, r5
 80033d6:	4649      	mov	r1, r9
 80033d8:	4640      	mov	r0, r8
 80033da:	47d0      	blx	sl
 80033dc:	3001      	adds	r0, #1
 80033de:	d0ad      	beq.n	800333c <_printf_i+0x160>
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	079b      	lsls	r3, r3, #30
 80033e4:	d413      	bmi.n	800340e <_printf_i+0x232>
 80033e6:	68e0      	ldr	r0, [r4, #12]
 80033e8:	9b03      	ldr	r3, [sp, #12]
 80033ea:	4298      	cmp	r0, r3
 80033ec:	bfb8      	it	lt
 80033ee:	4618      	movlt	r0, r3
 80033f0:	e7a6      	b.n	8003340 <_printf_i+0x164>
 80033f2:	2301      	movs	r3, #1
 80033f4:	4632      	mov	r2, r6
 80033f6:	4649      	mov	r1, r9
 80033f8:	4640      	mov	r0, r8
 80033fa:	47d0      	blx	sl
 80033fc:	3001      	adds	r0, #1
 80033fe:	d09d      	beq.n	800333c <_printf_i+0x160>
 8003400:	3501      	adds	r5, #1
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	9903      	ldr	r1, [sp, #12]
 8003406:	1a5b      	subs	r3, r3, r1
 8003408:	42ab      	cmp	r3, r5
 800340a:	dcf2      	bgt.n	80033f2 <_printf_i+0x216>
 800340c:	e7eb      	b.n	80033e6 <_printf_i+0x20a>
 800340e:	2500      	movs	r5, #0
 8003410:	f104 0619 	add.w	r6, r4, #25
 8003414:	e7f5      	b.n	8003402 <_printf_i+0x226>
 8003416:	bf00      	nop
 8003418:	0800356d 	.word	0x0800356d
 800341c:	0800357e 	.word	0x0800357e

08003420 <memmove>:
 8003420:	4288      	cmp	r0, r1
 8003422:	b510      	push	{r4, lr}
 8003424:	eb01 0402 	add.w	r4, r1, r2
 8003428:	d902      	bls.n	8003430 <memmove+0x10>
 800342a:	4284      	cmp	r4, r0
 800342c:	4623      	mov	r3, r4
 800342e:	d807      	bhi.n	8003440 <memmove+0x20>
 8003430:	1e43      	subs	r3, r0, #1
 8003432:	42a1      	cmp	r1, r4
 8003434:	d008      	beq.n	8003448 <memmove+0x28>
 8003436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800343a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800343e:	e7f8      	b.n	8003432 <memmove+0x12>
 8003440:	4402      	add	r2, r0
 8003442:	4601      	mov	r1, r0
 8003444:	428a      	cmp	r2, r1
 8003446:	d100      	bne.n	800344a <memmove+0x2a>
 8003448:	bd10      	pop	{r4, pc}
 800344a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800344e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003452:	e7f7      	b.n	8003444 <memmove+0x24>

08003454 <_sbrk_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4d06      	ldr	r5, [pc, #24]	; (8003470 <_sbrk_r+0x1c>)
 8003458:	2300      	movs	r3, #0
 800345a:	4604      	mov	r4, r0
 800345c:	4608      	mov	r0, r1
 800345e:	602b      	str	r3, [r5, #0]
 8003460:	f7fd fe42 	bl	80010e8 <_sbrk>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d102      	bne.n	800346e <_sbrk_r+0x1a>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	b103      	cbz	r3, 800346e <_sbrk_r+0x1a>
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	2000029c 	.word	0x2000029c

08003474 <memcpy>:
 8003474:	440a      	add	r2, r1
 8003476:	4291      	cmp	r1, r2
 8003478:	f100 33ff 	add.w	r3, r0, #4294967295
 800347c:	d100      	bne.n	8003480 <memcpy+0xc>
 800347e:	4770      	bx	lr
 8003480:	b510      	push	{r4, lr}
 8003482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800348a:	4291      	cmp	r1, r2
 800348c:	d1f9      	bne.n	8003482 <memcpy+0xe>
 800348e:	bd10      	pop	{r4, pc}

08003490 <_realloc_r>:
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	4680      	mov	r8, r0
 8003496:	4614      	mov	r4, r2
 8003498:	460e      	mov	r6, r1
 800349a:	b921      	cbnz	r1, 80034a6 <_realloc_r+0x16>
 800349c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034a0:	4611      	mov	r1, r2
 80034a2:	f7ff bc49 	b.w	8002d38 <_malloc_r>
 80034a6:	b92a      	cbnz	r2, 80034b4 <_realloc_r+0x24>
 80034a8:	f7ff fbda 	bl	8002c60 <_free_r>
 80034ac:	4625      	mov	r5, r4
 80034ae:	4628      	mov	r0, r5
 80034b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b4:	f000 f81b 	bl	80034ee <_malloc_usable_size_r>
 80034b8:	4284      	cmp	r4, r0
 80034ba:	4607      	mov	r7, r0
 80034bc:	d802      	bhi.n	80034c4 <_realloc_r+0x34>
 80034be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034c2:	d812      	bhi.n	80034ea <_realloc_r+0x5a>
 80034c4:	4621      	mov	r1, r4
 80034c6:	4640      	mov	r0, r8
 80034c8:	f7ff fc36 	bl	8002d38 <_malloc_r>
 80034cc:	4605      	mov	r5, r0
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0ed      	beq.n	80034ae <_realloc_r+0x1e>
 80034d2:	42bc      	cmp	r4, r7
 80034d4:	4622      	mov	r2, r4
 80034d6:	4631      	mov	r1, r6
 80034d8:	bf28      	it	cs
 80034da:	463a      	movcs	r2, r7
 80034dc:	f7ff ffca 	bl	8003474 <memcpy>
 80034e0:	4631      	mov	r1, r6
 80034e2:	4640      	mov	r0, r8
 80034e4:	f7ff fbbc 	bl	8002c60 <_free_r>
 80034e8:	e7e1      	b.n	80034ae <_realloc_r+0x1e>
 80034ea:	4635      	mov	r5, r6
 80034ec:	e7df      	b.n	80034ae <_realloc_r+0x1e>

080034ee <_malloc_usable_size_r>:
 80034ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f2:	1f18      	subs	r0, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bfbc      	itt	lt
 80034f8:	580b      	ldrlt	r3, [r1, r0]
 80034fa:	18c0      	addlt	r0, r0, r3
 80034fc:	4770      	bx	lr
	...

08003500 <_init>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	bf00      	nop
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr

0800350c <_fini>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr
