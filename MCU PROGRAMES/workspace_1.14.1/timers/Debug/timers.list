
timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a84  08002a84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002a98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002a98  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000992e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000179a  00000000  00000000  000299ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a1  00000000  00000000  0002bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d5e  00000000  00000000  0002c2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b79c  00000000  00000000  0004d027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc89a  00000000  00000000  000587c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002910  00000000  00000000  00125060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00127970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002a54 	.word	0x08002a54

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002a54 	.word	0x08002a54

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
  * @retval int
  */
	uint32_t volatile timecapture;
uint32_t volatile capture;
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa22 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f82e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8fe 	bl	800070c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000510:	f000 f88a 	bl	8000628 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 /* USER CODE END 2 */
HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x20>)
 8000518:	f001 fba6 	bl	8001c68 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x1c>
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028

08000524 <HAL_TIM_IC_CaptureCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
	if(htim->Instance == TIM2 ){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000534:	d10e      	bne.n	8000554 <HAL_TIM_IC_CaptureCallback+0x30>
		timecapture = __HAL_TIM_GetCounter(htim);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_TIM_IC_CaptureCallback+0x38>)
 800053e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8000540:	2201      	movs	r2, #1
 8000542:	2120      	movs	r1, #32
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000546:	f000 fd19 	bl	8000f7c <HAL_GPIO_WritePin>
		capture++;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_TIM_IC_CaptureCallback+0x40>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3301      	adds	r3, #1
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000552:	6013      	str	r3, [r2, #0]
	}
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000070 	.word	0x20000070
 8000560:	40020000 	.word	0x40020000
 8000564:	20000074 	.word	0x20000074

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fa40 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <SystemClock_Config+0xb8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <SystemClock_Config+0xb8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <SystemClock_Config+0xbc>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <SystemClock_Config+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fffd 	bl	80015dc <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e8:	f000 f8c2 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fcd2 	bl	8000fb0 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000612:	f000 f8ad 	bl	8000770 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_TIM2_Init+0xdc>)
 8000654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000658:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_TIM2_Init+0xdc>)
 800065c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_TIM2_Init+0xdc>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500000;
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <MX_TIM2_Init+0xdc>)
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <MX_TIM2_Init+0xe0>)
 800066c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_TIM2_Init+0xdc>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_TIM2_Init+0xdc>)
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067a:	4822      	ldr	r0, [pc, #136]	; (8000704 <MX_TIM2_Init+0xdc>)
 800067c:	f001 fa4c 	bl	8001b18 <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000686:	f000 f873 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	4619      	mov	r1, r3
 8000696:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_TIM2_Init+0xdc>)
 8000698:	f001 fd9a 	bl	80021d0 <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006a2:	f000 f865 	bl	8000770 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <MX_TIM2_Init+0xdc>)
 80006a8:	f001 fa85 	bl	8001bb6 <HAL_TIM_IC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006b2:	f000 f85d 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	480f      	ldr	r0, [pc, #60]	; (8000704 <MX_TIM2_Init+0xdc>)
 80006c6:	f002 f909 	bl	80028dc <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80006d0:	f000 f84e 	bl	8000770 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 80006e0:	230a      	movs	r3, #10
 80006e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_TIM2_Init+0xdc>)
 80006ec:	f001 fcd4 	bl	8002098 <HAL_TIM_IC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80006f6:	f000 f83b 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000028 	.word	0x20000028
 8000708:	0007a120 	.word	0x0007a120

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_GPIO_Init+0x5c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <MX_GPIO_Init+0x5c>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_GPIO_Init+0x5c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2120      	movs	r1, #32
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <MX_GPIO_Init+0x60>)
 8000742:	f000 fc1b 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000746:	2320      	movs	r3, #32
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0x60>)
 800075c:	f000 fa7a 	bl	8000c54 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007be:	2007      	movs	r0, #7
 80007c0:	f000 fa06 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007f0:	d133      	bne.n	800085a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_TIM_Base_MspInit+0x94>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <HAL_TIM_Base_MspInit+0x94>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_TIM_Base_MspInit+0x94>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_TIM_Base_MspInit+0x94>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <HAL_TIM_Base_MspInit+0x94>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_TIM_Base_MspInit+0x94>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800083a:	2301      	movs	r3, #1
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <HAL_TIM_Base_MspInit+0x98>)
 8000846:	f000 fa05 	bl	8000c54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	201c      	movs	r0, #28
 8000850:	f000 f9c9 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000854:	201c      	movs	r0, #28
 8000856:	f000 f9e2 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f89a 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM2_IRQHandler+0x10>)
 80008c6:	f001 faf7 	bl	8001eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000028 	.word	0x20000028

080008d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 f871 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fde9 	bl	8000500 <main>
  bx  lr    
 800092e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	2000007c 	.word	0x2000007c

08000948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_Init+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_Init+0x40>)
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_Init+0x40>)
 8000962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x40>)
 800096e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f92b 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fefe 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f943 	bl	8000c3a <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f90b 	bl	8000be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000078 	.word	0x20000078

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000078 	.word	0x20000078

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff8e 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff29 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff3e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff8e 	bl	8000b24 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff31 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e165      	b.n	8000f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	f040 8154 	bne.w	8000f36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d005      	beq.n	8000ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d130      	bne.n	8000d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	f003 0201 	and.w	r2, r3, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d017      	beq.n	8000d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	69b9      	ldr	r1, [r7, #24]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80ae 	beq.w	8000f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_GPIO_Init+0x300>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a5c      	ldr	r2, [pc, #368]	; (8000f54 <HAL_GPIO_Init+0x300>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b5a      	ldr	r3, [pc, #360]	; (8000f54 <HAL_GPIO_Init+0x300>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df6:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x308>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d025      	beq.n	8000e6e <HAL_GPIO_Init+0x21a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <HAL_GPIO_Init+0x30c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01f      	beq.n	8000e6a <HAL_GPIO_Init+0x216>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4d      	ldr	r2, [pc, #308]	; (8000f64 <HAL_GPIO_Init+0x310>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x212>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <HAL_GPIO_Init+0x314>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x20e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_GPIO_Init+0x318>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x20a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <HAL_GPIO_Init+0x31c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x206>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x320>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x202>
 8000e52:	2306      	movs	r3, #6
 8000e54:	e00c      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e00a      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e008      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x21c>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	f002 0203 	and.w	r2, r2, #3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e80:	4935      	ldr	r1, [pc, #212]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb2:	4a31      	ldr	r2, [pc, #196]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000edc:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f30:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	f67f ae96 	bls.w	8000c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40021800 	.word	0x40021800
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0cc      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b68      	ldr	r3, [pc, #416]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d90c      	bls.n	8000fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b65      	ldr	r3, [pc, #404]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fda:	4b63      	ldr	r3, [pc, #396]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d001      	beq.n	8000fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0b8      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d020      	beq.n	800103a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001004:	4b59      	ldr	r3, [pc, #356]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a58      	ldr	r2, [pc, #352]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800100e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001028:	4b50      	ldr	r3, [pc, #320]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	494d      	ldr	r1, [pc, #308]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	4313      	orrs	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d044      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d107      	bne.n	800105e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b47      	ldr	r3, [pc, #284]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d119      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e07f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106a:	2b03      	cmp	r3, #3
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e06f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e067      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4934      	ldr	r1, [pc, #208]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a0:	f7ff fcba 	bl	8000a18 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff fcb6 	bl	8000a18 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e04f      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d20c      	bcs.n	80010f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e032      	b.n	800115e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4916      	ldr	r1, [pc, #88]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	4313      	orrs	r3, r2
 8001114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d009      	beq.n	8001136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001136:	f000 f821 	bl	800117c <HAL_RCC_GetSysClockFreq>
 800113a:	4602      	mov	r2, r0
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	490a      	ldr	r1, [pc, #40]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	5ccb      	ldrb	r3, [r1, r3]
 800114a:	fa22 f303 	lsr.w	r3, r2, r3
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc1a 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00
 800116c:	40023800 	.word	0x40023800
 8001170:	08002a6c 	.word	0x08002a6c
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800117c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001180:	b0ae      	sub	sp, #184	; 0xb8
 8001182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a2:	4bcb      	ldr	r3, [pc, #812]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b0c      	cmp	r3, #12
 80011ac:	f200 8206 	bhi.w	80015bc <HAL_RCC_GetSysClockFreq+0x440>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011ed 	.word	0x080011ed
 80011bc:	080015bd 	.word	0x080015bd
 80011c0:	080015bd 	.word	0x080015bd
 80011c4:	080015bd 	.word	0x080015bd
 80011c8:	080011f5 	.word	0x080011f5
 80011cc:	080015bd 	.word	0x080015bd
 80011d0:	080015bd 	.word	0x080015bd
 80011d4:	080015bd 	.word	0x080015bd
 80011d8:	080011fd 	.word	0x080011fd
 80011dc:	080015bd 	.word	0x080015bd
 80011e0:	080015bd 	.word	0x080015bd
 80011e4:	080015bd 	.word	0x080015bd
 80011e8:	080013ed 	.word	0x080013ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ec:	4bb9      	ldr	r3, [pc, #740]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80011ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80011f2:	e1e7      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011f4:	4bb8      	ldr	r3, [pc, #736]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80011f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80011fa:	e1e3      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fc:	4bb4      	ldr	r3, [pc, #720]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001208:	4bb1      	ldr	r3, [pc, #708]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d071      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001214:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	2200      	movs	r2, #0
 800121c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001220:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800122c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800123a:	4622      	mov	r2, r4
 800123c:	462b      	mov	r3, r5
 800123e:	f04f 0000 	mov.w	r0, #0
 8001242:	f04f 0100 	mov.w	r1, #0
 8001246:	0159      	lsls	r1, r3, #5
 8001248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800124c:	0150      	lsls	r0, r2, #5
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4621      	mov	r1, r4
 8001254:	1a51      	subs	r1, r2, r1
 8001256:	6439      	str	r1, [r7, #64]	; 0x40
 8001258:	4629      	mov	r1, r5
 800125a:	eb63 0301 	sbc.w	r3, r3, r1
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800126c:	4649      	mov	r1, r9
 800126e:	018b      	lsls	r3, r1, #6
 8001270:	4641      	mov	r1, r8
 8001272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001276:	4641      	mov	r1, r8
 8001278:	018a      	lsls	r2, r1, #6
 800127a:	4641      	mov	r1, r8
 800127c:	1a51      	subs	r1, r2, r1
 800127e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001280:	4649      	mov	r1, r9
 8001282:	eb63 0301 	sbc.w	r3, r3, r1
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001294:	4649      	mov	r1, r9
 8001296:	00cb      	lsls	r3, r1, #3
 8001298:	4641      	mov	r1, r8
 800129a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800129e:	4641      	mov	r1, r8
 80012a0:	00ca      	lsls	r2, r1, #3
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	4622      	mov	r2, r4
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
 80012ae:	462b      	mov	r3, r5
 80012b0:	460a      	mov	r2, r1
 80012b2:	eb42 0303 	adc.w	r3, r2, r3
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012c4:	4629      	mov	r1, r5
 80012c6:	024b      	lsls	r3, r1, #9
 80012c8:	4621      	mov	r1, r4
 80012ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012ce:	4621      	mov	r1, r4
 80012d0:	024a      	lsls	r2, r1, #9
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012da:	2200      	movs	r2, #0
 80012dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80012e8:	f7fe ff8c 	bl	8000204 <__aeabi_uldivmod>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4613      	mov	r3, r2
 80012f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012f6:	e067      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f8:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	2200      	movs	r2, #0
 8001300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001304:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800130c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001310:	67bb      	str	r3, [r7, #120]	; 0x78
 8001312:	2300      	movs	r3, #0
 8001314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001316:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800131a:	4622      	mov	r2, r4
 800131c:	462b      	mov	r3, r5
 800131e:	f04f 0000 	mov.w	r0, #0
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	0159      	lsls	r1, r3, #5
 8001328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800132c:	0150      	lsls	r0, r2, #5
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4621      	mov	r1, r4
 8001334:	1a51      	subs	r1, r2, r1
 8001336:	62b9      	str	r1, [r7, #40]	; 0x28
 8001338:	4629      	mov	r1, r5
 800133a:	eb63 0301 	sbc.w	r3, r3, r1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800134c:	4649      	mov	r1, r9
 800134e:	018b      	lsls	r3, r1, #6
 8001350:	4641      	mov	r1, r8
 8001352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001356:	4641      	mov	r1, r8
 8001358:	018a      	lsls	r2, r1, #6
 800135a:	4641      	mov	r1, r8
 800135c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001360:	4649      	mov	r1, r9
 8001362:	eb63 0b01 	sbc.w	fp, r3, r1
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001372:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800137a:	4692      	mov	sl, r2
 800137c:	469b      	mov	fp, r3
 800137e:	4623      	mov	r3, r4
 8001380:	eb1a 0303 	adds.w	r3, sl, r3
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	462b      	mov	r3, r5
 8001388:	eb4b 0303 	adc.w	r3, fp, r3
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800139a:	4629      	mov	r1, r5
 800139c:	028b      	lsls	r3, r1, #10
 800139e:	4621      	mov	r1, r4
 80013a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013a4:	4621      	mov	r1, r4
 80013a6:	028a      	lsls	r2, r1, #10
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013b0:	2200      	movs	r2, #0
 80013b2:	673b      	str	r3, [r7, #112]	; 0x70
 80013b4:	677a      	str	r2, [r7, #116]	; 0x74
 80013b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80013ba:	f7fe ff23 	bl	8000204 <__aeabi_uldivmod>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4613      	mov	r3, r2
 80013c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013c8:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	3301      	adds	r3, #1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80013da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80013de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013ea:	e0eb      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ec:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d06b      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	2200      	movs	r2, #0
 800140c:	66bb      	str	r3, [r7, #104]	; 0x68
 800140e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001416:	663b      	str	r3, [r7, #96]	; 0x60
 8001418:	2300      	movs	r3, #0
 800141a:	667b      	str	r3, [r7, #100]	; 0x64
 800141c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001420:	4622      	mov	r2, r4
 8001422:	462b      	mov	r3, r5
 8001424:	f04f 0000 	mov.w	r0, #0
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	0159      	lsls	r1, r3, #5
 800142e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001432:	0150      	lsls	r0, r2, #5
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4621      	mov	r1, r4
 800143a:	1a51      	subs	r1, r2, r1
 800143c:	61b9      	str	r1, [r7, #24]
 800143e:	4629      	mov	r1, r5
 8001440:	eb63 0301 	sbc.w	r3, r3, r1
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001452:	4659      	mov	r1, fp
 8001454:	018b      	lsls	r3, r1, #6
 8001456:	4651      	mov	r1, sl
 8001458:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800145c:	4651      	mov	r1, sl
 800145e:	018a      	lsls	r2, r1, #6
 8001460:	4651      	mov	r1, sl
 8001462:	ebb2 0801 	subs.w	r8, r2, r1
 8001466:	4659      	mov	r1, fp
 8001468:	eb63 0901 	sbc.w	r9, r3, r1
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001478:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800147c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001480:	4690      	mov	r8, r2
 8001482:	4699      	mov	r9, r3
 8001484:	4623      	mov	r3, r4
 8001486:	eb18 0303 	adds.w	r3, r8, r3
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	462b      	mov	r3, r5
 800148e:	eb49 0303 	adc.w	r3, r9, r3
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014a0:	4629      	mov	r1, r5
 80014a2:	024b      	lsls	r3, r1, #9
 80014a4:	4621      	mov	r1, r4
 80014a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014aa:	4621      	mov	r1, r4
 80014ac:	024a      	lsls	r2, r1, #9
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014b6:	2200      	movs	r2, #0
 80014b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80014ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014c0:	f7fe fea0 	bl	8000204 <__aeabi_uldivmod>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4613      	mov	r3, r2
 80014ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014ce:	e065      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x420>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	00f42400 	.word	0x00f42400
 80014d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	2200      	movs	r2, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	4611      	mov	r1, r2
 80014e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014ec:	653b      	str	r3, [r7, #80]	; 0x50
 80014ee:	2300      	movs	r3, #0
 80014f0:	657b      	str	r3, [r7, #84]	; 0x54
 80014f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80014f6:	4642      	mov	r2, r8
 80014f8:	464b      	mov	r3, r9
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001508:	0150      	lsls	r0, r2, #5
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4641      	mov	r1, r8
 8001510:	1a51      	subs	r1, r2, r1
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	4649      	mov	r1, r9
 8001516:	eb63 0301 	sbc.w	r3, r3, r1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001528:	4659      	mov	r1, fp
 800152a:	018b      	lsls	r3, r1, #6
 800152c:	4651      	mov	r1, sl
 800152e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001532:	4651      	mov	r1, sl
 8001534:	018a      	lsls	r2, r1, #6
 8001536:	4651      	mov	r1, sl
 8001538:	1a54      	subs	r4, r2, r1
 800153a:	4659      	mov	r1, fp
 800153c:	eb63 0501 	sbc.w	r5, r3, r1
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	00eb      	lsls	r3, r5, #3
 800154a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800154e:	00e2      	lsls	r2, r4, #3
 8001550:	4614      	mov	r4, r2
 8001552:	461d      	mov	r5, r3
 8001554:	4643      	mov	r3, r8
 8001556:	18e3      	adds	r3, r4, r3
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	464b      	mov	r3, r9
 800155c:	eb45 0303 	adc.w	r3, r5, r3
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800156e:	4629      	mov	r1, r5
 8001570:	028b      	lsls	r3, r1, #10
 8001572:	4621      	mov	r1, r4
 8001574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001578:	4621      	mov	r1, r4
 800157a:	028a      	lsls	r2, r1, #10
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001584:	2200      	movs	r2, #0
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
 8001588:	64fa      	str	r2, [r7, #76]	; 0x4c
 800158a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800158e:	f7fe fe39 	bl	8000204 <__aeabi_uldivmod>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4613      	mov	r3, r2
 8001598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	0f1b      	lsrs	r3, r3, #28
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80015aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ba:	e003      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80015be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	37b8      	adds	r7, #184	; 0xb8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	00f42400 	.word	0x00f42400

080015dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e28d      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8083 	beq.w	8001702 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015fc:	4b94      	ldr	r3, [pc, #592]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b04      	cmp	r3, #4
 8001606:	d019      	beq.n	800163c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001608:	4b91      	ldr	r3, [pc, #580]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001610:	2b08      	cmp	r3, #8
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001620:	d00c      	beq.n	800163c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d112      	bne.n	8001654 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d05b      	beq.n	8001700 <HAL_RCC_OscConfig+0x124>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d157      	bne.n	8001700 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e25a      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x90>
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7b      	ldr	r2, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xcc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0xb4>
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a75      	ldr	r2, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a72      	ldr	r2, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xcc>
 8001690:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6b      	ldr	r2, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9b2 	bl	8000a18 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff f9ae 	bl	8000a18 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e21f      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b61      	ldr	r3, [pc, #388]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xdc>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff f99e 	bl	8000a18 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff f99a 	bl	8000a18 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e20b      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x104>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d06f      	beq.n	80017ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800170e:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d017      	beq.n	800174a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001722:	2b08      	cmp	r3, #8
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d11c      	bne.n	8001778 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d116      	bne.n	8001778 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x186>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e1d3      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	e03a      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_OscConfig+0x278>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff f947 	bl	8000a18 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff f943 	bl	8000a18 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1b4      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4925      	ldr	r1, [pc, #148]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_RCC_OscConfig+0x278>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f926 	bl	8000a18 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff f922 	bl	8000a18 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e193      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d036      	beq.n	8001868 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d016      	beq.n	8001830 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x27c>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff f906 	bl	8000a18 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff f902 	bl	8000a18 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e173      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x234>
 800182e:	e01b      	b.n	8001868 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x27c>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff f8ef 	bl	8000a18 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	e00e      	b.n	800185c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff f8eb 	bl	8000a18 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d907      	bls.n	800185c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e15c      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
 8001850:	40023800 	.word	0x40023800
 8001854:	42470000 	.word	0x42470000
 8001858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b8a      	ldr	r3, [pc, #552]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800185e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ea      	bne.n	800183e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8097 	beq.w	80019a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a7e      	ldr	r2, [pc, #504]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <HAL_RCC_OscConfig+0x4b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x4b0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x4b0>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff f8ab 	bl	8000a18 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff f8a7 	bl	8000a18 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e118      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x4b0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x31e>
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x358>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x340>
 8001902:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a5d      	ldr	r2, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0x358>
 800191c:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a59      	ldr	r2, [pc, #356]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a56      	ldr	r2, [pc, #344]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d015      	beq.n	8001968 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff f86c 	bl	8000a18 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff f868 	bl	8000a18 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0d7      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ee      	beq.n	8001944 <HAL_RCC_OscConfig+0x368>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff f856 	bl	8000a18 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff f852 	bl	8000a18 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0c1      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ee      	bne.n	8001970 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80ad 	beq.w	8001b08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d060      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d145      	bne.n	8001a4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_RCC_OscConfig+0x4b4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f826 	bl	8000a18 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f822 	bl	8000a18 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e093      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	3b01      	subs	r3, #1
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	071b      	lsls	r3, r3, #28
 8001a1a:	491b      	ldr	r1, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4b4>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7fe fff7 	bl	8000a18 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7fe fff3 	bl	8000a18 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e064      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x452>
 8001a4c:	e05c      	b.n	8001b08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_OscConfig+0x4b4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7fe ffe0 	bl	8000a18 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7fe ffdc 	bl	8000a18 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04d      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x480>
 8001a7a:	e045      	b.n	8001b08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e040      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_RCC_OscConfig+0x538>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d030      	beq.n	8001b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d129      	bne.n	8001b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d122      	bne.n	8001b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d119      	bne.n	8001b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	3b01      	subs	r3, #1
 8001ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10f      	bne.n	8001b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e041      	b.n	8001bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fe46 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 fc2a 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e041      	b.n	8001c4c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d106      	bne.n	8001be2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f839 	bl	8001c54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f000 fbdb 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_IC_Start_IT+0x1e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	e013      	b.n	8001cae <HAL_TIM_IC_Start_IT+0x46>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d104      	bne.n	8001c96 <HAL_TIM_IC_Start_IT+0x2e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	e00b      	b.n	8001cae <HAL_TIM_IC_Start_IT+0x46>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d104      	bne.n	8001ca6 <HAL_TIM_IC_Start_IT+0x3e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	e003      	b.n	8001cae <HAL_TIM_IC_Start_IT+0x46>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <HAL_TIM_IC_Start_IT+0x58>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e013      	b.n	8001ce8 <HAL_TIM_IC_Start_IT+0x80>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d104      	bne.n	8001cd0 <HAL_TIM_IC_Start_IT+0x68>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e00b      	b.n	8001ce8 <HAL_TIM_IC_Start_IT+0x80>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d104      	bne.n	8001ce0 <HAL_TIM_IC_Start_IT+0x78>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e003      	b.n	8001ce8 <HAL_TIM_IC_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001cf0:	7b7b      	ldrb	r3, [r7, #13]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0cc      	b.n	8001e94 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_IC_Start_IT+0xa2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	e013      	b.n	8001d32 <HAL_TIM_IC_Start_IT+0xca>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_IC_Start_IT+0xb2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	e00b      	b.n	8001d32 <HAL_TIM_IC_Start_IT+0xca>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_IC_Start_IT+0xc2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	e003      	b.n	8001d32 <HAL_TIM_IC_Start_IT+0xca>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d104      	bne.n	8001d42 <HAL_TIM_IC_Start_IT+0xda>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d40:	e013      	b.n	8001d6a <HAL_TIM_IC_Start_IT+0x102>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_IC_Start_IT+0xea>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d50:	e00b      	b.n	8001d6a <HAL_TIM_IC_Start_IT+0x102>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_IC_Start_IT+0xfa>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d60:	e003      	b.n	8001d6a <HAL_TIM_IC_Start_IT+0x102>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d841      	bhi.n	8001df4 <HAL_TIM_IC_Start_IT+0x18c>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <HAL_TIM_IC_Start_IT+0x110>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001dad 	.word	0x08001dad
 8001d7c:	08001df5 	.word	0x08001df5
 8001d80:	08001df5 	.word	0x08001df5
 8001d84:	08001df5 	.word	0x08001df5
 8001d88:	08001dbf 	.word	0x08001dbf
 8001d8c:	08001df5 	.word	0x08001df5
 8001d90:	08001df5 	.word	0x08001df5
 8001d94:	08001df5 	.word	0x08001df5
 8001d98:	08001dd1 	.word	0x08001dd1
 8001d9c:	08001df5 	.word	0x08001df5
 8001da0:	08001df5 	.word	0x08001df5
 8001da4:	08001df5 	.word	0x08001df5
 8001da8:	08001de3 	.word	0x08001de3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0202 	orr.w	r2, r2, #2
 8001dba:	60da      	str	r2, [r3, #12]
      break;
 8001dbc:	e01d      	b.n	8001dfa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0204 	orr.w	r2, r2, #4
 8001dcc:	60da      	str	r2, [r3, #12]
      break;
 8001dce:	e014      	b.n	8001dfa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	60da      	str	r2, [r3, #12]
      break;
 8001de0:	e00b      	b.n	8001dfa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0210 	orr.w	r2, r2, #16
 8001df0:	60da      	str	r2, [r3, #12]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d148      	bne.n	8001e92 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fd41 	bl	8002890 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_TIM_IC_Start_IT+0x234>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d01d      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_TIM_IC_Start_IT+0x238>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d018      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_TIM_IC_Start_IT+0x23c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <HAL_TIM_IC_Start_IT+0x240>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00e      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_TIM_IC_Start_IT+0x244>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_TIM_IC_Start_IT+0x248>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_TIM_IC_Start_IT+0x1f6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_TIM_IC_Start_IT+0x24c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d111      	bne.n	8001e82 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d010      	beq.n	8001e92 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e80:	e007      	b.n	8001e92 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000800 	.word	0x40000800
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40010400 	.word	0x40010400
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40001800 	.word	0x40001800

08001eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d020      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0202 	mvn.w	r2, #2
 8001eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fb0e 	bl	8000524 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa31 	bl	8002372 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fa38 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0204 	mvn.w	r2, #4
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fae8 	bl	8000524 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fa0b 	bl	8002372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fa12 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d020      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0208 	mvn.w	r2, #8
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fac2 	bl	8000524 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f9e5 	bl	8002372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f9ec 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0210 	mvn.w	r2, #16
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fa9c 	bl	8000524 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f9bf 	bl	8002372 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f9c6 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0201 	mvn.w	r2, #1
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f99d 	bl	800235e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fcd0 	bl	80029e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f997 	bl	800239a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0220 	mvn.w	r2, #32
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fca2 	bl	80029d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e088      	b.n	80021c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80020d4:	f000 fa18 	bl	8002508 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020c 	bic.w	r2, r2, #12
 80020e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6999      	ldr	r1, [r3, #24]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	e060      	b.n	80021be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d11c      	bne.n	800213c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002112:	f000 fa9c 	bl	800264e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002124:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6999      	ldr	r1, [r3, #24]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	021a      	lsls	r2, r3, #8
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	e040      	b.n	80021be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11b      	bne.n	800217a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002152:	f000 fae9 	bl	8002728 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 020c 	bic.w	r2, r2, #12
 8002164:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69d9      	ldr	r1, [r3, #28]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
 8002178:	e021      	b.n	80021be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d11c      	bne.n	80021ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002190:	f000 fb06 	bl	80027a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69d9      	ldr	r1, [r3, #28]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	021a      	lsls	r2, r3, #8
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	61da      	str	r2, [r3, #28]
 80021b8:	e001      	b.n	80021be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_ConfigClockSource+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e0b4      	b.n	8002356 <HAL_TIM_ConfigClockSource+0x186>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800220a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002224:	d03e      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	f200 8087 	bhi.w	800233c <HAL_TIM_ConfigClockSource+0x16c>
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002232:	f000 8086 	beq.w	8002342 <HAL_TIM_ConfigClockSource+0x172>
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223a:	d87f      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 800223c:	2b70      	cmp	r3, #112	; 0x70
 800223e:	d01a      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xa6>
 8002240:	2b70      	cmp	r3, #112	; 0x70
 8002242:	d87b      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 8002244:	2b60      	cmp	r3, #96	; 0x60
 8002246:	d050      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x11a>
 8002248:	2b60      	cmp	r3, #96	; 0x60
 800224a:	d877      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 800224c:	2b50      	cmp	r3, #80	; 0x50
 800224e:	d03c      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0xfa>
 8002250:	2b50      	cmp	r3, #80	; 0x50
 8002252:	d873      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d058      	beq.n	800230a <HAL_TIM_ConfigClockSource+0x13a>
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d86f      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 800225c:	2b30      	cmp	r3, #48	; 0x30
 800225e:	d064      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x15a>
 8002260:	2b30      	cmp	r3, #48	; 0x30
 8002262:	d86b      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 8002264:	2b20      	cmp	r3, #32
 8002266:	d060      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x15a>
 8002268:	2b20      	cmp	r3, #32
 800226a:	d867      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05c      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x15a>
 8002270:	2b10      	cmp	r3, #16
 8002272:	d05a      	beq.n	800232a <HAL_TIM_ConfigClockSource+0x15a>
 8002274:	e062      	b.n	800233c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002286:	f000 fae3 	bl	8002850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	609a      	str	r2, [r3, #8]
      break;
 80022a2:	e04f      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022b4:	f000 facc 	bl	8002850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c6:	609a      	str	r2, [r3, #8]
      break;
 80022c8:	e03c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 f98a 	bl	80025f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2150      	movs	r1, #80	; 0x50
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fa99 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 80022e8:	e02c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022f6:	461a      	mov	r2, r3
 80022f8:	f000 f9e6 	bl	80026c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2160      	movs	r1, #96	; 0x60
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fa89 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 8002308:	e01c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002316:	461a      	mov	r2, r3
 8002318:	f000 f96a 	bl	80025f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2140      	movs	r1, #64	; 0x40
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fa79 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 8002328:	e00c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f000 fa70 	bl	800281a <TIM_ITRx_SetConfig>
      break;
 800233a:	e003      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      break;
 8002340:	e000      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002354:	7bfb      	ldrb	r3, [r7, #15]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a46      	ldr	r2, [pc, #280]	; (80024dc <TIM_Base_SetConfig+0x12c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d00f      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a43      	ldr	r2, [pc, #268]	; (80024e0 <TIM_Base_SetConfig+0x130>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a42      	ldr	r2, [pc, #264]	; (80024e4 <TIM_Base_SetConfig+0x134>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <TIM_Base_SetConfig+0x138>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d003      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a40      	ldr	r2, [pc, #256]	; (80024ec <TIM_Base_SetConfig+0x13c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d108      	bne.n	8002402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a35      	ldr	r2, [pc, #212]	; (80024dc <TIM_Base_SetConfig+0x12c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d027      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <TIM_Base_SetConfig+0x130>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d023      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <TIM_Base_SetConfig+0x134>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01f      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <TIM_Base_SetConfig+0x138>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01b      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <TIM_Base_SetConfig+0x13c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d017      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <TIM_Base_SetConfig+0x140>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <TIM_Base_SetConfig+0x144>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00f      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a2c      	ldr	r2, [pc, #176]	; (80024f8 <TIM_Base_SetConfig+0x148>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00b      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <TIM_Base_SetConfig+0x14c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a2a      	ldr	r2, [pc, #168]	; (8002500 <TIM_Base_SetConfig+0x150>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a29      	ldr	r2, [pc, #164]	; (8002504 <TIM_Base_SetConfig+0x154>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d108      	bne.n	8002474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <TIM_Base_SetConfig+0x12c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0xf8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <TIM_Base_SetConfig+0x13c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d103      	bne.n	80024b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f023 0201 	bic.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]
  }
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40000c00 	.word	0x40000c00
 80024ec:	40010400 	.word	0x40010400
 80024f0:	40014000 	.word	0x40014000
 80024f4:	40014400 	.word	0x40014400
 80024f8:	40014800 	.word	0x40014800
 80024fc:	40001800 	.word	0x40001800
 8002500:	40001c00 	.word	0x40001c00
 8002504:	40002000 	.word	0x40002000

08002508 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f023 0201 	bic.w	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <TIM_TI1_SetConfig+0xcc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01b      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d017      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <TIM_TI1_SetConfig+0xd0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a24      	ldr	r2, [pc, #144]	; (80025dc <TIM_TI1_SetConfig+0xd4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00f      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <TIM_TI1_SetConfig+0xd8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00b      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <TIM_TI1_SetConfig+0xdc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <TIM_TI1_SetConfig+0xe0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <TIM_TI1_SetConfig+0x66>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <TIM_TI1_SetConfig+0xe4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <TIM_TI1_SetConfig+0x6a>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <TIM_TI1_SetConfig+0x6c>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e003      	b.n	8002592 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f023 030a 	bic.w	r3, r3, #10
 80025ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f003 030a 	and.w	r3, r3, #10
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40000c00 	.word	0x40000c00
 80025e4:	40010400 	.word	0x40010400
 80025e8:	40014000 	.word	0x40014000
 80025ec:	40001800 	.word	0x40001800

080025f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0201 	bic.w	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800261a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f023 030a 	bic.w	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	621a      	str	r2, [r3, #32]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f023 0210 	bic.w	r2, r3, #16
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800268c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	031b      	lsls	r3, r3, #12
 8002692:	b29b      	uxth	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	621a      	str	r2, [r3, #32]
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f023 0210 	bic.w	r2, r3, #16
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002704:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f023 0303 	bic.w	r3, r3, #3
 8002754:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002764:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	b2db      	uxtb	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002778:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	621a      	str	r2, [r3, #32]
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	031b      	lsls	r3, r3, #12
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80027f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	031b      	lsls	r3, r3, #12
 80027f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	621a      	str	r2, [r3, #32]
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	f043 0307 	orr.w	r3, r3, #7
 800283c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	431a      	orrs	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2201      	movs	r2, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e05a      	b.n	80029aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d01d      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10c      	bne.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4313      	orrs	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40001800 	.word	0x40001800

080029d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <memset>:
 80029fc:	4402      	add	r2, r0
 80029fe:	4603      	mov	r3, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	; (8002a44 <__libc_init_array+0x38>)
 8002a10:	4c0d      	ldr	r4, [pc, #52]	; (8002a48 <__libc_init_array+0x3c>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	2600      	movs	r6, #0
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	4d0b      	ldr	r5, [pc, #44]	; (8002a4c <__libc_init_array+0x40>)
 8002a1e:	4c0c      	ldr	r4, [pc, #48]	; (8002a50 <__libc_init_array+0x44>)
 8002a20:	f000 f818 	bl	8002a54 <_init>
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	2600      	movs	r6, #0
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	08002a84 	.word	0x08002a84
 8002a48:	08002a84 	.word	0x08002a84
 8002a4c:	08002a84 	.word	0x08002a84
 8002a50:	08002a88 	.word	0x08002a88

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
