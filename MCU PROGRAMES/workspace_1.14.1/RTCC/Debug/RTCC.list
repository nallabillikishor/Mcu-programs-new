
RTCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006038  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  080063d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080063d8  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0ca  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d96  00000000  00000000  0002c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  0002df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087d  00000000  00000000  0002ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022353  00000000  00000000  0002f29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9cc  00000000  00000000  000515f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccaf4  00000000  00000000  0005ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003520  00000000  00000000  0012cab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061f0 	.word	0x080061f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080061f0 	.word	0x080061f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <readDS1307>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void readDS1307(uint8_t *data, uint8_t len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af04      	add	r7, sp, #16
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, len,
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	f04f 32ff 	mov.w	r2, #4294967295
 80005c0:	9202      	str	r2, [sp, #8]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	2200      	movs	r2, #0
 80005cc:	21d0      	movs	r1, #208	; 0xd0
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <readDS1307+0x30>)
 80005d0:	f001 fada 	bl	8001b88 <HAL_I2C_Mem_Read>
	HAL_MAX_DELAY);
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000084 	.word	0x20000084

080005e0 <bcd2dec>:
uint8_t dec2bcd(uint8_t dec) {
	return ((dec / 10) << 4) | (dec % 10);
}

uint8_t bcd2dec(uint8_t bcd) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	091b      	lsrs	r3, r3, #4
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4413      	add	r3, r2
 8000604:	b2db      	uxtb	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <writeDS1307>:
void writeDS1307(uint8_t year, uint8_t month, uint8_t date, uint8_t dayOfWeek,
		uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af04      	add	r7, sp, #16
 800061a:	4604      	mov	r4, r0
 800061c:	4608      	mov	r0, r1
 800061e:	4611      	mov	r1, r2
 8000620:	461a      	mov	r2, r3
 8000622:	4623      	mov	r3, r4
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	4603      	mov	r3, r0
 8000628:	71bb      	strb	r3, [r7, #6]
 800062a:	460b      	mov	r3, r1
 800062c:	717b      	strb	r3, [r7, #5]
 800062e:	4613      	mov	r3, r2
 8000630:	713b      	strb	r3, [r7, #4]
	uint8_t data[7];
	data[0] = (seconds / 10) << 4 | (seconds % 10);
 8000632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000636:	4a54      	ldr	r2, [pc, #336]	; (8000788 <writeDS1307+0x174>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	b258      	sxtb	r0, r3
 8000644:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000648:	4b4f      	ldr	r3, [pc, #316]	; (8000788 <writeDS1307+0x174>)
 800064a:	fba3 1302 	umull	r1, r3, r3, r2
 800064e:	08d9      	lsrs	r1, r3, #3
 8000650:	460b      	mov	r3, r1
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4303      	orrs	r3, r0
 8000660:	b25b      	sxtb	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	723b      	strb	r3, [r7, #8]
	data[1] = (minutes / 10) << 4 | (minutes % 10);
 8000666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800066a:	4a47      	ldr	r2, [pc, #284]	; (8000788 <writeDS1307+0x174>)
 800066c:	fba2 2303 	umull	r2, r3, r2, r3
 8000670:	08db      	lsrs	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	b258      	sxtb	r0, r3
 8000678:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <writeDS1307+0x174>)
 800067e:	fba3 1302 	umull	r1, r3, r3, r2
 8000682:	08d9      	lsrs	r1, r3, #3
 8000684:	460b      	mov	r3, r1
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	440b      	add	r3, r1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	b25b      	sxtb	r3, r3
 8000692:	4303      	orrs	r3, r0
 8000694:	b25b      	sxtb	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	727b      	strb	r3, [r7, #9]
	data[2] = (hours / 10) << 4 | (hours % 10);
 800069a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800069e:	4a3a      	ldr	r2, [pc, #232]	; (8000788 <writeDS1307+0x174>)
 80006a0:	fba2 2303 	umull	r2, r3, r2, r3
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	011b      	lsls	r3, r3, #4
 80006aa:	b258      	sxtb	r0, r3
 80006ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <writeDS1307+0x174>)
 80006b2:	fba3 1302 	umull	r1, r3, r3, r2
 80006b6:	08d9      	lsrs	r1, r3, #3
 80006b8:	460b      	mov	r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	4303      	orrs	r3, r0
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	72bb      	strb	r3, [r7, #10]
	data[3] = dayOfWeek;
 80006ce:	793b      	ldrb	r3, [r7, #4]
 80006d0:	72fb      	strb	r3, [r7, #11]
	data[4] = (date / 10) << 4 | (date % 10);
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <writeDS1307+0x174>)
 80006d6:	fba2 2303 	umull	r2, r3, r2, r3
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	b258      	sxtb	r0, r3
 80006e2:	797a      	ldrb	r2, [r7, #5]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <writeDS1307+0x174>)
 80006e6:	fba3 1302 	umull	r1, r3, r3, r2
 80006ea:	08d9      	lsrs	r1, r3, #3
 80006ec:	460b      	mov	r3, r1
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	4303      	orrs	r3, r0
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	733b      	strb	r3, [r7, #12]
	data[5] = (month / 10) << 4 | (month % 10);
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <writeDS1307+0x174>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	b258      	sxtb	r0, r3
 8000712:	79ba      	ldrb	r2, [r7, #6]
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <writeDS1307+0x174>)
 8000716:	fba3 1302 	umull	r1, r3, r3, r2
 800071a:	08d9      	lsrs	r1, r3, #3
 800071c:	460b      	mov	r3, r1
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4303      	orrs	r3, r0
 800072c:	b25b      	sxtb	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	737b      	strb	r3, [r7, #13]
	data[6] = (year / 10) << 4 | (year % 10);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4a14      	ldr	r2, [pc, #80]	; (8000788 <writeDS1307+0x174>)
 8000736:	fba2 2303 	umull	r2, r3, r2, r3
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	b258      	sxtb	r0, r3
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <writeDS1307+0x174>)
 8000746:	fba3 1302 	umull	r1, r3, r3, r2
 800074a:	08d9      	lsrs	r1, r3, #3
 800074c:	460b      	mov	r3, r1
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4303      	orrs	r3, r0
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, DS1307_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, data, 7,
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	2307      	movs	r3, #7
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2301      	movs	r3, #1
 8000774:	2200      	movs	r2, #0
 8000776:	21d0      	movs	r1, #208	; 0xd0
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <writeDS1307+0x178>)
 800077a:	f001 f90b 	bl	8001994 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	bf00      	nop
 8000788:	cccccccd 	.word	0xcccccccd
 800078c:	20000084 	.word	0x20000084

08000790 <dayOfWeekToString>:

const char* dayOfWeekToString(uint8_t dayOfWeek) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	switch (dayOfWeek) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	3b01      	subs	r3, #1
 800079e:	2b06      	cmp	r3, #6
 80007a0:	d81e      	bhi.n	80007e0 <dayOfWeekToString+0x50>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <dayOfWeekToString+0x18>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	080007c5 	.word	0x080007c5
 80007ac:	080007c9 	.word	0x080007c9
 80007b0:	080007cd 	.word	0x080007cd
 80007b4:	080007d1 	.word	0x080007d1
 80007b8:	080007d5 	.word	0x080007d5
 80007bc:	080007d9 	.word	0x080007d9
 80007c0:	080007dd 	.word	0x080007dd
	case 1:
		return "Sunday";
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <dayOfWeekToString+0x60>)
 80007c6:	e00c      	b.n	80007e2 <dayOfWeekToString+0x52>
	case 2:
		return "Monday";
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <dayOfWeekToString+0x64>)
 80007ca:	e00a      	b.n	80007e2 <dayOfWeekToString+0x52>
	case 3:
		return "Tuesday";
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <dayOfWeekToString+0x68>)
 80007ce:	e008      	b.n	80007e2 <dayOfWeekToString+0x52>
	case 4:
		return "Wednesday";
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <dayOfWeekToString+0x6c>)
 80007d2:	e006      	b.n	80007e2 <dayOfWeekToString+0x52>
	case 5:
		return "Thursday";
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <dayOfWeekToString+0x70>)
 80007d6:	e004      	b.n	80007e2 <dayOfWeekToString+0x52>
	case 6:
		return "Friday";
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <dayOfWeekToString+0x74>)
 80007da:	e002      	b.n	80007e2 <dayOfWeekToString+0x52>
	case 7:
		return "Saturday";
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <dayOfWeekToString+0x78>)
 80007de:	e000      	b.n	80007e2 <dayOfWeekToString+0x52>
	default:
		return "Invalid day";
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <dayOfWeekToString+0x7c>)
	}
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	08006208 	.word	0x08006208
 80007f4:	08006210 	.word	0x08006210
 80007f8:	08006218 	.word	0x08006218
 80007fc:	08006220 	.word	0x08006220
 8000800:	0800622c 	.word	0x0800622c
 8000804:	08006238 	.word	0x08006238
 8000808:	08006240 	.word	0x08006240
 800080c:	0800624c 	.word	0x0800624c

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	b08b      	sub	sp, #44	; 0x2c
 8000814:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fbdd 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f8bd 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f97f 	bl	8000b20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000822:	f000 f953 	bl	8000acc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000826:	f000 f923 	bl	8000a70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data[7];
  	readDS1307(data, 7);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2107      	movs	r1, #7
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff febc 	bl	80005ac <readDS1307>
  	// Set CH bit to 0 to enable the oscillator
  	data[0] &= ~(1 << 7); // Clear the CH bit
 8000834:	793b      	ldrb	r3, [r7, #4]
 8000836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800083a:	b2db      	uxtb	r3, r3
 800083c:	713b      	strb	r3, [r7, #4]
  	writeDS1307(data[6], data[5], data[4], data[3], data[2], data[1], data[0]);
 800083e:	7ab8      	ldrb	r0, [r7, #10]
 8000840:	7a7c      	ldrb	r4, [r7, #9]
 8000842:	7a3d      	ldrb	r5, [r7, #8]
 8000844:	79fe      	ldrb	r6, [r7, #7]
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	797a      	ldrb	r2, [r7, #5]
 800084a:	7939      	ldrb	r1, [r7, #4]
 800084c:	9102      	str	r1, [sp, #8]
 800084e:	9201      	str	r2, [sp, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4633      	mov	r3, r6
 8000854:	462a      	mov	r2, r5
 8000856:	4621      	mov	r1, r4
 8000858:	f7ff fedc 	bl	8000614 <writeDS1307>
  	writeDS1307(24, 4, 5, 6, 11, 9, 30);
 800085c:	231e      	movs	r3, #30
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2309      	movs	r3, #9
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	230b      	movs	r3, #11
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2306      	movs	r3, #6
 800086a:	2205      	movs	r2, #5
 800086c:	2104      	movs	r1, #4
 800086e:	2018      	movs	r0, #24
 8000870:	f7ff fed0 	bl	8000614 <writeDS1307>
  	HAL_Delay(100);
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f000 fc1f 	bl	80010b8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Read the updated time and date
	  		readDS1307(data, 7);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2107      	movs	r1, #7
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe94 	bl	80005ac <readDS1307>

	  		printf("Raw Data: ");
 8000884:	483d      	ldr	r0, [pc, #244]	; (800097c <main+0x16c>)
 8000886:	f004 fda7 	bl	80053d8 <iprintf>
	  		for (int i = 0; i < 7; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e00a      	b.n	80008a6 <main+0x96>
	  			printf("%02X ", data[i]);
 8000890:	1d3a      	adds	r2, r7, #4
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	4839      	ldr	r0, [pc, #228]	; (8000980 <main+0x170>)
 800089c:	f004 fd9c 	bl	80053d8 <iprintf>
	  		for (int i = 0; i < 7; i++) {
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	ddf1      	ble.n	8000890 <main+0x80>
	  		}
	  		printf("\n");
 80008ac:	200a      	movs	r0, #10
 80008ae:	f004 fda5 	bl	80053fc <putchar>

	  		// Validate and print date
	  		uint8_t day = bcd2dec(data[4]);
 80008b2:	7a3b      	ldrb	r3, [r7, #8]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe93 	bl	80005e0 <bcd2dec>
 80008ba:	4603      	mov	r3, r0
 80008bc:	74fb      	strb	r3, [r7, #19]
	  		uint8_t month = bcd2dec(data[5]);
 80008be:	7a7b      	ldrb	r3, [r7, #9]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe8d 	bl	80005e0 <bcd2dec>
 80008c6:	4603      	mov	r3, r0
 80008c8:	74bb      	strb	r3, [r7, #18]
	  		uint8_t year = bcd2dec(data[6]);
 80008ca:	7abb      	ldrb	r3, [r7, #10]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe87 	bl	80005e0 <bcd2dec>
 80008d2:	4603      	mov	r3, r0
 80008d4:	747b      	strb	r3, [r7, #17]
	  		if (day <= 31 && month <= 12 && year <= 99) {
 80008d6:	7cfb      	ldrb	r3, [r7, #19]
 80008d8:	2b1f      	cmp	r3, #31
 80008da:	d80c      	bhi.n	80008f6 <main+0xe6>
 80008dc:	7cbb      	ldrb	r3, [r7, #18]
 80008de:	2b0c      	cmp	r3, #12
 80008e0:	d809      	bhi.n	80008f6 <main+0xe6>
 80008e2:	7c7b      	ldrb	r3, [r7, #17]
 80008e4:	2b63      	cmp	r3, #99	; 0x63
 80008e6:	d806      	bhi.n	80008f6 <main+0xe6>
	  			printf("Current Date: %02d/%02d/20%02d\n", day, month, year);
 80008e8:	7cf9      	ldrb	r1, [r7, #19]
 80008ea:	7cba      	ldrb	r2, [r7, #18]
 80008ec:	7c7b      	ldrb	r3, [r7, #17]
 80008ee:	4825      	ldr	r0, [pc, #148]	; (8000984 <main+0x174>)
 80008f0:	f004 fd72 	bl	80053d8 <iprintf>
 80008f4:	e002      	b.n	80008fc <main+0xec>
	  		} else {
	  			printf("Error: Invalid date received from RTC.\n");
 80008f6:	4824      	ldr	r0, [pc, #144]	; (8000988 <main+0x178>)
 80008f8:	f004 fddc 	bl	80054b4 <puts>
	  		}


	  		uint8_t seconds = bcd2dec(data[0] & 0x7F);
 80008fc:	793b      	ldrb	r3, [r7, #4]
 80008fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe6b 	bl	80005e0 <bcd2dec>
 800090a:	4603      	mov	r3, r0
 800090c:	743b      	strb	r3, [r7, #16]
	  		uint8_t minutes = bcd2dec(data[1]);
 800090e:	797b      	ldrb	r3, [r7, #5]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe65 	bl	80005e0 <bcd2dec>
 8000916:	4603      	mov	r3, r0
 8000918:	73fb      	strb	r3, [r7, #15]
	  		uint8_t hours = bcd2dec(data[2] & 0x3F);
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe5c 	bl	80005e0 <bcd2dec>
 8000928:	4603      	mov	r3, r0
 800092a:	73bb      	strb	r3, [r7, #14]
	  		if (seconds < 60 && minutes < 60 && hours < 24) {
 800092c:	7c3b      	ldrb	r3, [r7, #16]
 800092e:	2b3b      	cmp	r3, #59	; 0x3b
 8000930:	d80c      	bhi.n	800094c <main+0x13c>
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b3b      	cmp	r3, #59	; 0x3b
 8000936:	d809      	bhi.n	800094c <main+0x13c>
 8000938:	7bbb      	ldrb	r3, [r7, #14]
 800093a:	2b17      	cmp	r3, #23
 800093c:	d806      	bhi.n	800094c <main+0x13c>
	  			printf("Current Time: %02d:%02d:%02d\n", hours, minutes, seconds);
 800093e:	7bb9      	ldrb	r1, [r7, #14]
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	7c3b      	ldrb	r3, [r7, #16]
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <main+0x17c>)
 8000946:	f004 fd47 	bl	80053d8 <iprintf>
 800094a:	e002      	b.n	8000952 <main+0x142>
	  		} else {
	  			printf("Error: Invalid time received from RTC.\n");
 800094c:	4810      	ldr	r0, [pc, #64]	; (8000990 <main+0x180>)
 800094e:	f004 fdb1 	bl	80054b4 <puts>
	  		}
	  		uint8_t dayOfWeek = bcd2dec(data[3]);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe43 	bl	80005e0 <bcd2dec>
 800095a:	4603      	mov	r3, r0
 800095c:	737b      	strb	r3, [r7, #13]
	  		printf("Day of the week: %s\n", dayOfWeekToString(dayOfWeek));
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff15 	bl	8000790 <dayOfWeekToString>
 8000966:	4603      	mov	r3, r0
 8000968:	4619      	mov	r1, r3
 800096a:	480a      	ldr	r0, [pc, #40]	; (8000994 <main+0x184>)
 800096c:	f004 fd34 	bl	80053d8 <iprintf>

	  		HAL_Delay(1000);
 8000970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000974:	f000 fba0 	bl	80010b8 <HAL_Delay>
  {
 8000978:	e77f      	b.n	800087a <main+0x6a>
 800097a:	bf00      	nop
 800097c:	08006258 	.word	0x08006258
 8000980:	08006264 	.word	0x08006264
 8000984:	0800626c 	.word	0x0800626c
 8000988:	0800628c 	.word	0x0800628c
 800098c:	080062b4 	.word	0x080062b4
 8000990:	080062d4 	.word	0x080062d4
 8000994:	080062fc 	.word	0x080062fc

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	; 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2234      	movs	r2, #52	; 0x34
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 fe64 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <SystemClock_Config+0xd0>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <SystemClock_Config+0xd0>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <SystemClock_Config+0xd0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <SystemClock_Config+0xd4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <SystemClock_Config+0xd4>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <SystemClock_Config+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a00:	2310      	movs	r3, #16
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 74;
 8000a10:	234a      	movs	r3, #74	; 0x4a
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 feb3 	bl	8004790 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a30:	f000 f8e4 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fb53 	bl	80040fc <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a5c:	f000 f8ce 	bl	8000bfc <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3750      	adds	r7, #80	; 0x50
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <MX_I2C1_Init+0x54>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_I2C1_Init+0x58>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_I2C1_Init+0x50>)
 8000aae:	f000 fe17 	bl	80016e0 <HAL_I2C_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab8:	f000 f8a0 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000084 	.word	0x20000084
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	000186a0 	.word	0x000186a0

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f004 f8e2 	bl	8004ccc <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f875 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000d8 	.word	0x200000d8
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a2c      	ldr	r2, [pc, #176]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0xd0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2120      	movs	r1, #32
 8000baa:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0xd4>)
 8000bac:	f000 fd7e 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0xd8>)
 8000bc8:	f000 fbdc 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_GPIO_Init+0xd4>)
 8000be4:	f000 fbce 	bl	8001384 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c46:	2007      	movs	r0, #7
 8000c48:	f000 fb2a 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_I2C_MspInit+0xa4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d13b      	bne.n	8000cf2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_I2C_MspInit+0xa8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_I2C_MspInit+0xa8>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_I2C_MspInit+0xa8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <HAL_I2C_MspInit+0xac>)
 8000cb2:	f000 fb67 	bl	8001384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_I2C_MspInit+0xa8>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_I2C_MspInit+0xa8>)
 8000cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_I2C_MspInit+0xa8>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	201f      	movs	r0, #31
 8000cd8:	f000 faed 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cdc:	201f      	movs	r0, #31
 8000cde:	f000 fb06 	bl	80012ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2020      	movs	r0, #32
 8000ce8:	f000 fae5 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cec:	2020      	movs	r0, #32
 8000cee:	f000 fafe 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12b      	bne.n	8000d82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d62:	230c      	movs	r3, #12
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d72:	2307      	movs	r3, #7
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_UART_MspInit+0x8c>)
 8000d7e:	f000 fb01 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40004400 	.word	0x40004400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f948 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <I2C1_EV_IRQHandler+0x10>)
 8000df2:	f001 f8fb 	bl	8001fec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000084 	.word	0x20000084

08000e00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <I2C1_ER_IRQHandler+0x10>)
 8000e06:	f001 fa44 	bl	8002292 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000084 	.word	0x20000084

08000e14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <_read+0x12>
  }

  return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e009      	b.n	8000e74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf1      	blt.n	8000e60 <_write+0x12>
  }
  return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_close>:

int _close(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eae:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_isatty>:

int _isatty(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f004 fbf6 	bl	8005710 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20020000 	.word	0x20020000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	20000120 	.word	0x20000120
 8000f58:	20000278 	.word	0x20000278

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f84:	f7ff ffea 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f004 fbb5 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fc2d 	bl	8000810 <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fc4:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 8000fc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fcc:	20000274 	.word	0x20000274

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f94f 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fdfe 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f967 	bl	800130a <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f92f 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	20000124 	.word	0x20000124

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000124 	.word	0x20000124

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff29 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff3e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff8e 	bl	80011f4 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff31 	bl	8001164 <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d004      	beq.n	8001340 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e00c      	b.n	800135a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2205      	movs	r2, #5
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001374:	b2db      	uxtb	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	e165      	b.n	800166c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8154 	bne.w	8001666 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d005      	beq.n	80013d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d130      	bne.n	8001438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f003 0201 	and.w	r2, r3, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b03      	cmp	r3, #3
 8001442:	d017      	beq.n	8001474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d123      	bne.n	80014c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	69b9      	ldr	r1, [r7, #24]
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80ae 	beq.w	8001666 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_GPIO_Init+0x300>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_GPIO_Init+0x300>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_GPIO_Init+0x300>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001526:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_GPIO_Init+0x304>)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_GPIO_Init+0x308>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x21a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <HAL_GPIO_Init+0x30c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x216>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <HAL_GPIO_Init+0x310>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x212>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_GPIO_Init+0x314>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x20e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4b      	ldr	r2, [pc, #300]	; (800169c <HAL_GPIO_Init+0x318>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x20a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4a      	ldr	r2, [pc, #296]	; (80016a0 <HAL_GPIO_Init+0x31c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x206>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a49      	ldr	r2, [pc, #292]	; (80016a4 <HAL_GPIO_Init+0x320>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x202>
 8001582:	2306      	movs	r3, #6
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 8001586:	2307      	movs	r3, #7
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x21c>
 800159e:	2300      	movs	r3, #0
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <HAL_GPIO_Init+0x304>)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015be:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <HAL_GPIO_Init+0x324>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_GPIO_Init+0x324>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_GPIO_Init+0x324>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_GPIO_Init+0x324>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001636:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_GPIO_Init+0x324>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001660:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	f67f ae96 	bls.w	80013a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40013800 	.word	0x40013800
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40020800 	.word	0x40020800
 8001698:	40020c00 	.word	0x40020c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40021400 	.word	0x40021400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e12b      	b.n	800194a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff faa6 	bl	8000c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001744:	f002 fdcc 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <HAL_I2C_Init+0x274>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d807      	bhi.n	8001764 <HAL_I2C_Init+0x84>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_I2C_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e006      	b.n	8001772 <HAL_I2C_Init+0x92>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a7d      	ldr	r2, [pc, #500]	; (800195c <HAL_I2C_Init+0x27c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0e7      	b.n	800194a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a78      	ldr	r2, [pc, #480]	; (8001960 <HAL_I2C_Init+0x280>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_I2C_Init+0x274>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d802      	bhi.n	80017b4 <HAL_I2C_Init+0xd4>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	e009      	b.n	80017c8 <HAL_I2C_Init+0xe8>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_I2C_Init+0x284>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	3301      	adds	r3, #1
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <HAL_I2C_Init+0x274>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d819      	bhi.n	800181c <HAL_I2C_Init+0x13c>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e59      	subs	r1, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017fc:	400b      	ands	r3, r1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_I2C_Init+0x138>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001810:	3301      	adds	r3, #1
 8001812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001816:	e051      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001818:	2304      	movs	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x168>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x18e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x196>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x1bc>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	2b80      	cmp	r3, #128	; 0x80
 800197c:	d103      	bne.n	8001986 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	460b      	mov	r3, r1
 80019a8:	813b      	strh	r3, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019ae:	f7ff fb77 	bl	80010a0 <HAL_GetTick>
 80019b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b20      	cmp	r3, #32
 80019be:	f040 80d9 	bne.w	8001b74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2319      	movs	r3, #25
 80019c8:	2201      	movs	r2, #1
 80019ca:	496d      	ldr	r1, [pc, #436]	; (8001b80 <HAL_I2C_Mem_Write+0x1ec>)
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f002 f911 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
 80019da:	e0cc      	b.n	8001b76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_I2C_Mem_Write+0x56>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0c5      	b.n	8001b76 <HAL_I2C_Mem_Write+0x1e2>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d007      	beq.n	8001a10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2221      	movs	r2, #33	; 0x21
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <HAL_I2C_Mem_Write+0x1f0>)
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a52:	88f8      	ldrh	r0, [r7, #6]
 8001a54:	893a      	ldrh	r2, [r7, #8]
 8001a56:	8979      	ldrh	r1, [r7, #10]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4603      	mov	r3, r0
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f001 fea0 	bl	80037a8 <I2C_RequestMemoryWrite>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d052      	beq.n	8001b14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e081      	b.n	8001b76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f002 f9d6 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d107      	bne.n	8001a9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06b      	b.n	8001b76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d11b      	bne.n	8001b14 <HAL_I2C_Mem_Write+0x180>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d017      	beq.n	8001b14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1aa      	bne.n	8001a72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f002 f9c9 	bl	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00d      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d107      	bne.n	8001b44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e016      	b.n	8001b76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	00100002 	.word	0x00100002
 8001b84:	ffff0000 	.word	0xffff0000

08001b88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	817b      	strh	r3, [r7, #10]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	813b      	strh	r3, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ba2:	f7ff fa7d 	bl	80010a0 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	f040 8214 	bne.w	8001fde <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2319      	movs	r3, #25
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	497b      	ldr	r1, [pc, #492]	; (8001dac <HAL_I2C_Mem_Read+0x224>)
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f002 f817 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e207      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Mem_Read+0x56>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e200      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d007      	beq.n	8001c04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2222      	movs	r2, #34	; 0x22
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <HAL_I2C_Mem_Read+0x228>)
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c46:	88f8      	ldrh	r0, [r7, #6]
 8001c48:	893a      	ldrh	r2, [r7, #8]
 8001c4a:	8979      	ldrh	r1, [r7, #10]
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4603      	mov	r3, r0
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f001 fe3c 	bl	80038d4 <I2C_RequestMemoryRead>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e1bc      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d113      	bne.n	8001c96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	623b      	str	r3, [r7, #32]
 8001c82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e190      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d11b      	bne.n	8001cd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e170      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d11b      	bne.n	8001d16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	e150      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d2c:	e144      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	f200 80f1 	bhi.w	8001f1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d123      	bne.n	8001d88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f002 f931 	bl	8003fac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e145      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d86:	e117      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d14e      	bne.n	8001e2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d96:	2200      	movs	r2, #0
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <HAL_I2C_Mem_Read+0x22c>)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f001 ff2a 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e11a      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
 8001daa:	bf00      	nop
 8001dac:	00100002 	.word	0x00100002
 8001db0:	ffff0000 	.word	0xffff0000
 8001db4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e2c:	e0c4      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e34:	2200      	movs	r2, #0
 8001e36:	496c      	ldr	r1, [pc, #432]	; (8001fe8 <HAL_I2C_Mem_Read+0x460>)
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f001 fedb 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cb      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e90:	2200      	movs	r2, #0
 8001e92:	4955      	ldr	r1, [pc, #340]	; (8001fe8 <HAL_I2C_Mem_Read+0x460>)
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f001 fead 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e09d      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f18:	e04e      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f002 f844 	bl	8003fac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e058      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d124      	bne.n	8001fb8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f aeb6 	bne.w	8001d2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	00010004 	.word	0x00010004

08001fec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800200c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b10      	cmp	r3, #16
 800201a:	d003      	beq.n	8002024 <HAL_I2C_EV_IRQHandler+0x38>
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	f040 80b1 	bne.w	8002186 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_I2C_EV_IRQHandler+0x6e>
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002044:	d003      	beq.n	800204e <HAL_I2C_EV_IRQHandler+0x62>
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800204c:	d101      	bne.n	8002052 <HAL_I2C_EV_IRQHandler+0x66>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_I2C_EV_IRQHandler+0x68>
 8002052:	2300      	movs	r3, #0
 8002054:	2b01      	cmp	r3, #1
 8002056:	f000 8114 	beq.w	8002282 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x90>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f002 f828 	bl	80040c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fd7a 	bl	8002b6e <I2C_Master_SB>
 800207a:	e083      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0xac>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fdf2 	bl	8002c7a <I2C_Master_ADD10>
 8002096:	e075      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_I2C_EV_IRQHandler+0xc8>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fe0e 	bl	8002cce <I2C_Master_ADDR>
 80020b2:	e067      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d036      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020cc:	f000 80db 	beq.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_I2C_EV_IRQHandler+0x10a>
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f9d6 	bl	80024a0 <I2C_MasterTransmit_TXE>
 80020f4:	e046      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80c2 	beq.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80bc 	beq.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800210e:	7bbb      	ldrb	r3, [r7, #14]
 8002110:	2b21      	cmp	r3, #33	; 0x21
 8002112:	d103      	bne.n	800211c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa5f 	bl	80025d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800211a:	e0b4      	b.n	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	f040 80b1 	bne.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 facd 	bl	80026c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212a:	e0ac      	b.n	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800213a:	f000 80a4 	beq.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x178>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x178>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fb49 	bl	80027f4 <I2C_MasterReceive_RXNE>
 8002162:	e00f      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808b 	beq.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8085 	beq.w	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fc01 	bl	8002984 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002182:	e080      	b.n	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
 8002184:	e07f      	b.n	8002286 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e007      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d011      	beq.n	80021d6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 ffcc 	bl	800316c <I2C_Slave_ADDR>
 80021d4:	e05a      	b.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x206>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f001 f806 	bl	80031fc <I2C_Slave_STOPF>
 80021f0:	e04c      	b.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021f2:	7bbb      	ldrb	r3, [r7, #14]
 80021f4:	2b21      	cmp	r3, #33	; 0x21
 80021f6:	d002      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x212>
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	2b29      	cmp	r3, #41	; 0x29
 80021fc:	d120      	bne.n	8002240 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x238>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_I2C_EV_IRQHandler+0x238>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fee7 	bl	8002ff0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002222:	e032      	b.n	800228a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02d      	beq.n	800228a <HAL_I2C_EV_IRQHandler+0x29e>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002234:	2b00      	cmp	r3, #0
 8002236:	d028      	beq.n	800228a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 ff16 	bl	800306a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800223e:	e024      	b.n	800228a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <HAL_I2C_EV_IRQHandler+0x27a>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_I2C_EV_IRQHandler+0x27a>
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 ff24 	bl	80030ac <I2C_SlaveReceive_RXNE>
 8002264:	e012      	b.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 ff54 	bl	8003128 <I2C_SlaveReceive_BTF>
 8002280:	e004      	b.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002282:	bf00      	nop
 8002284:	e002      	b.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800228a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b08a      	sub	sp, #40	; 0x28
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <HAL_I2C_ER_IRQHandler+0x4a>
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022da:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <HAL_I2C_ER_IRQHandler+0x70>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002300:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d03e      	beq.n	800238a <HAL_I2C_ER_IRQHandler+0xf8>
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d039      	beq.n	800238a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002316:	7efb      	ldrb	r3, [r7, #27]
 8002318:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002330:	7ebb      	ldrb	r3, [r7, #26]
 8002332:	2b20      	cmp	r3, #32
 8002334:	d112      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0xca>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10f      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0xca>
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b21      	cmp	r3, #33	; 0x21
 8002340:	d008      	beq.n	8002354 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b29      	cmp	r3, #41	; 0x29
 8002346:	d005      	beq.n	8002354 <HAL_I2C_ER_IRQHandler+0xc2>
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b28      	cmp	r3, #40	; 0x28
 800234c:	d106      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b21      	cmp	r3, #33	; 0x21
 8002352:	d103      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 f881 	bl	800345c <I2C_Slave_AF>
 800235a:	e016      	b.n	800238a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002364:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800236e:	7efb      	ldrb	r3, [r7, #27]
 8002370:	2b10      	cmp	r3, #16
 8002372:	d002      	beq.n	800237a <HAL_I2C_ER_IRQHandler+0xe8>
 8002374:	7efb      	ldrb	r3, [r7, #27]
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d107      	bne.n	800238a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002388:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00d      	beq.n	80023b0 <HAL_I2C_ER_IRQHandler+0x11e>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80023ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f001 f8be 	bl	8003544 <I2C_ITError>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
 800242c:	4613      	mov	r3, r2
 800242e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d150      	bne.n	8002568 <I2C_MasterTransmit_TXE+0xc8>
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b21      	cmp	r3, #33	; 0x21
 80024ca:	d14d      	bne.n	8002568 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d01d      	beq.n	800250e <I2C_MasterTransmit_TXE+0x6e>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d01a      	beq.n	800250e <I2C_MasterTransmit_TXE+0x6e>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024de:	d016      	beq.n	800250e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2211      	movs	r2, #17
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ff62 	bl	80023d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800250c:	e060      	b.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800251c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d107      	bne.n	8002558 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff7d 	bl	8002450 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002556:	e03b      	b.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff35 	bl	80023d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002566:	e033      	b.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b21      	cmp	r3, #33	; 0x21
 800256c:	d005      	beq.n	800257a <I2C_MasterTransmit_TXE+0xda>
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d12d      	bne.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b22      	cmp	r3, #34	; 0x22
 8002578:	d12a      	bne.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002592:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002594:	e01c      	b.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d103      	bne.n	80025aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f88e 	bl	80026c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80025a8:	e012      	b.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ce:	e7ff      	b.n	80025d0 <I2C_MasterTransmit_TXE+0x130>
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b21      	cmp	r3, #33	; 0x21
 80025f0:	d164      	bne.n	80026bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002620:	e04c      	b.n	80026bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d01d      	beq.n	8002664 <I2C_MasterTransmit_BTF+0x8c>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b20      	cmp	r3, #32
 800262c:	d01a      	beq.n	8002664 <I2C_MasterTransmit_BTF+0x8c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002634:	d016      	beq.n	8002664 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002644:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2211      	movs	r2, #17
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff feb7 	bl	80023d0 <HAL_I2C_MasterTxCpltCallback>
}
 8002662:	e02b      	b.n	80026bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002672:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d107      	bne.n	80026ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fed2 	bl	8002450 <HAL_I2C_MemTxCpltCallback>
}
 80026ac:	e006      	b.n	80026bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fe8a 	bl	80023d0 <HAL_I2C_MasterTxCpltCallback>
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11d      	bne.n	8002718 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10b      	bne.n	80026fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	1c9a      	adds	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80026fa:	e077      	b.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	b29b      	uxth	r3, r3
 8002702:	121b      	asrs	r3, r3, #8
 8002704:	b2da      	uxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002716:	e069      	b.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10b      	bne.n	8002738 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	b2da      	uxtb	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002736:	e059      	b.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273c:	2b02      	cmp	r3, #2
 800273e:	d152      	bne.n	80027e6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b22      	cmp	r3, #34	; 0x22
 8002744:	d10d      	bne.n	8002762 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002754:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002760:	e044      	b.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b21      	cmp	r3, #33	; 0x21
 8002770:	d112      	bne.n	8002798 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002796:	e029      	b.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d124      	bne.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b21      	cmp	r3, #33	; 0x21
 80027a6:	d121      	bne.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027b6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fe36 	bl	8002450 <HAL_I2C_MemTxCpltCallback>
}
 80027e4:	e002      	b.n	80027ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff f8be 	bl	8001968 <I2C_Flush_DR>
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b22      	cmp	r3, #34	; 0x22
 8002806:	f040 80b9 	bne.w	800297c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d921      	bls.n	8002862 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b03      	cmp	r3, #3
 800284c:	f040 8096 	bne.w	800297c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002860:	e08c      	b.n	800297c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	2b02      	cmp	r3, #2
 8002868:	d07f      	beq.n	800296a <I2C_MasterReceive_RXNE+0x176>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <I2C_MasterReceive_RXNE+0x82>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d179      	bne.n	800296a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f001 fb66 	bl	8003f48 <I2C_WaitOnSTOPRequestThroughIT>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d14c      	bne.n	800291c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d10a      	bne.n	80028f2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fdba 	bl	8002464 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028f0:	e044      	b.n	800297c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d002      	beq.n	8002906 <I2C_MasterReceive_RXNE+0x112>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b20      	cmp	r3, #32
 8002904:	d103      	bne.n	800290e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
 800290c:	e002      	b.n	8002914 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2212      	movs	r2, #18
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fd65 	bl	80023e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800291a:	e02f      	b.n	800297c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800292a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fd88 	bl	8002478 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002968:	e008      	b.n	800297c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002978:	605a      	str	r2, [r3, #4]
}
 800297a:	e7ff      	b.n	800297c <I2C_MasterReceive_RXNE+0x188>
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b04      	cmp	r3, #4
 800299a:	d11b      	bne.n	80029d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80029d2:	e0c8      	b.n	8002b66 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d129      	bne.n	8002a32 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00a      	beq.n	8002a0a <I2C_MasterReceive_BTF+0x86>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d007      	beq.n	8002a0a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a08:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a30:	e099      	b.n	8002b66 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	f040 8081 	bne.w	8002b40 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d002      	beq.n	8002a4a <I2C_MasterReceive_BTF+0xc6>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d108      	bne.n	8002a5c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e019      	b.n	8002a90 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d002      	beq.n	8002a68 <I2C_MasterReceive_BTF+0xe4>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d108      	bne.n	8002a7a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e00a      	b.n	8002a90 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d007      	beq.n	8002a90 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002aea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d10a      	bne.n	8002b16 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fca8 	bl	8002464 <HAL_I2C_MemRxCpltCallback>
}
 8002b14:	e027      	b.n	8002b66 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d002      	beq.n	8002b2a <I2C_MasterReceive_BTF+0x1a6>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d103      	bne.n	8002b32 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b30:	e002      	b.n	8002b38 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2212      	movs	r2, #18
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fc53 	bl	80023e4 <HAL_I2C_MasterRxCpltCallback>
}
 8002b3e:	e012      	b.n	8002b66 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d117      	bne.n	8002bb2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b9a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b9c:	e067      	b.n	8002c6e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
}
 8002bb0:	e05d      	b.n	8002c6e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bba:	d133      	bne.n	8002c24 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b21      	cmp	r3, #33	; 0x21
 8002bc6:	d109      	bne.n	8002bdc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd8:	611a      	str	r2, [r3, #16]
 8002bda:	e008      	b.n	8002bee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <I2C_Master_SB+0x92>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d108      	bne.n	8002c12 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d032      	beq.n	8002c6e <I2C_Master_SB+0x100>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d02d      	beq.n	8002c6e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c20:	605a      	str	r2, [r3, #4]
}
 8002c22:	e024      	b.n	8002c6e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10e      	bne.n	8002c4a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	11db      	asrs	r3, r3, #7
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 0306 	and.w	r3, r3, #6
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f063 030f 	orn	r3, r3, #15
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	611a      	str	r2, [r3, #16]
}
 8002c48:	e011      	b.n	8002c6e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d10d      	bne.n	8002c6e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	11db      	asrs	r3, r3, #7
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 0306 	and.w	r3, r3, #6
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f063 030e 	orn	r3, r3, #14
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <I2C_Master_ADD10+0x26>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d108      	bne.n	8002cb2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <I2C_Master_ADD10+0x48>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc0:	605a      	str	r2, [r3, #4]
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b091      	sub	sp, #68	; 0x44
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b22      	cmp	r3, #34	; 0x22
 8002cf6:	f040 8169 	bne.w	8002fcc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <I2C_Master_ADDR+0x54>
 8002d02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d10b      	bne.n	8002d22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	e160      	b.n	8002fe4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11d      	bne.n	8002d66 <I2C_Master_ADDR+0x98>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d32:	d118      	bne.n	8002d66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	651a      	str	r2, [r3, #80]	; 0x50
 8002d64:	e13e      	b.n	8002fe4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d113      	bne.n	8002d98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d70:	2300      	movs	r3, #0
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e115      	b.n	8002fc4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	f040 808a 	bne.w	8002eb8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002daa:	d137      	bne.n	8002e1c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dca:	d113      	bne.n	8002df4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dda:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	e0e7      	b.n	8002fc4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e0d3      	b.n	8002fc4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d02e      	beq.n	8002e80 <I2C_Master_ADDR+0x1b2>
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d02b      	beq.n	8002e80 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d102      	bne.n	8002e34 <I2C_Master_ADDR+0x166>
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d125      	bne.n	8002e80 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d00e      	beq.n	8002e58 <I2C_Master_ADDR+0x18a>
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d00b      	beq.n	8002e58 <I2C_Master_ADDR+0x18a>
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d008      	beq.n	8002e58 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e007      	b.n	8002e68 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e66:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	e0a1      	b.n	8002fc4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e085      	b.n	8002fc4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d14d      	bne.n	8002f5e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d016      	beq.n	8002ef6 <I2C_Master_ADDR+0x228>
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d013      	beq.n	8002ef6 <I2C_Master_ADDR+0x228>
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d010      	beq.n	8002ef6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	d117      	bne.n	8002f46 <I2C_Master_ADDR+0x278>
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f1c:	d00b      	beq.n	8002f36 <I2C_Master_ADDR+0x268>
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d008      	beq.n	8002f36 <I2C_Master_ADDR+0x268>
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d005      	beq.n	8002f36 <I2C_Master_ADDR+0x268>
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b10      	cmp	r3, #16
 8002f2e:	d002      	beq.n	8002f36 <I2C_Master_ADDR+0x268>
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d107      	bne.n	8002f46 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	e032      	b.n	8002fc4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7c:	d117      	bne.n	8002fae <I2C_Master_ADDR+0x2e0>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f84:	d00b      	beq.n	8002f9e <I2C_Master_ADDR+0x2d0>
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d008      	beq.n	8002f9e <I2C_Master_ADDR+0x2d0>
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d005      	beq.n	8002f9e <I2C_Master_ADDR+0x2d0>
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d002      	beq.n	8002f9e <I2C_Master_ADDR+0x2d0>
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d107      	bne.n	8002fae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002fca:	e00b      	b.n	8002fe4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
}
 8002fe2:	e7ff      	b.n	8002fe4 <I2C_Master_ADDR+0x316>
 8002fe4:	bf00      	nop
 8002fe6:	3744      	adds	r7, #68	; 0x44
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d02b      	beq.n	8003062 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d114      	bne.n	8003062 <I2C_SlaveTransmit_TXE+0x72>
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b29      	cmp	r3, #41	; 0x29
 800303c:	d111      	bne.n	8003062 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2228      	movs	r2, #40	; 0x28
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff f9cb 	bl	80023f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d011      	beq.n	80030a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d02c      	beq.n	8003120 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d114      	bne.n	8003120 <I2C_SlaveReceive_RXNE+0x74>
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b2a      	cmp	r3, #42	; 0x2a
 80030fa:	d111      	bne.n	8003120 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2222      	movs	r2, #34	; 0x22
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2228      	movs	r2, #40	; 0x28
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff f976 	bl	800240c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d012      	beq.n	8003160 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003186:	2b28      	cmp	r3, #40	; 0x28
 8003188:	d125      	bne.n	80031d6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003198:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	81bb      	strh	r3, [r7, #12]
 80031b8:	e002      	b.n	80031c0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80031c8:	89ba      	ldrh	r2, [r7, #12]
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff f926 	bl	8002420 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031d4:	e00e      	b.n	80031f4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800321a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003258:	d172      	bne.n	8003340 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b22      	cmp	r3, #34	; 0x22
 800325e:	d002      	beq.n	8003266 <I2C_Slave_STOPF+0x6a>
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b2a      	cmp	r3, #42	; 0x2a
 8003264:	d135      	bne.n	80032d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f043 0204 	orr.w	r2, r3, #4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003298:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f861 	bl	8001366 <HAL_DMA_GetState>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d049      	beq.n	800333e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	4a69      	ldr	r2, [pc, #420]	; (8003454 <I2C_Slave_STOPF+0x258>)
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe f833 	bl	8001322 <HAL_DMA_Abort_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d03d      	beq.n	800333e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	4610      	mov	r0, r2
 80032ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032d0:	e035      	b.n	800333e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003304:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe f82b 	bl	8001366 <HAL_DMA_GetState>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d014      	beq.n	8003340 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	4a4e      	ldr	r2, [pc, #312]	; (8003454 <I2C_Slave_STOPF+0x258>)
 800331c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fffd 	bl	8001322 <HAL_DMA_Abort_IT>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003338:	4610      	mov	r0, r2
 800333a:	4798      	blx	r3
 800333c:	e000      	b.n	8003340 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800333e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d03e      	beq.n	80033c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d112      	bne.n	800337e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d112      	bne.n	80033b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f8b7 	bl	8003544 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80033d6:	e039      	b.n	800344c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b2a      	cmp	r3, #42	; 0x2a
 80033dc:	d109      	bne.n	80033f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2228      	movs	r2, #40	; 0x28
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff f80d 	bl	800240c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b28      	cmp	r3, #40	; 0x28
 80033fc:	d111      	bne.n	8003422 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <I2C_Slave_STOPF+0x25c>)
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff f80e 	bl	800243c <HAL_I2C_ListenCpltCallback>
}
 8003420:	e014      	b.n	800344c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	2b22      	cmp	r3, #34	; 0x22
 8003428:	d002      	beq.n	8003430 <I2C_Slave_STOPF+0x234>
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b22      	cmp	r3, #34	; 0x22
 800342e:	d10d      	bne.n	800344c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe ffe0 	bl	800240c <HAL_I2C_SlaveRxCpltCallback>
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	08003aa5 	.word	0x08003aa5
 8003458:	ffff0000 	.word	0xffff0000

0800345c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d002      	beq.n	800347e <I2C_Slave_AF+0x22>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b20      	cmp	r3, #32
 800347c:	d129      	bne.n	80034d2 <I2C_Slave_AF+0x76>
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b28      	cmp	r3, #40	; 0x28
 8003482:	d126      	bne.n	80034d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <I2C_Slave_AF+0xe4>)
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003498:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe ffb6 	bl	800243c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80034d0:	e031      	b.n	8003536 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b21      	cmp	r3, #33	; 0x21
 80034d6:	d129      	bne.n	800352c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <I2C_Slave_AF+0xe4>)
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2221      	movs	r2, #33	; 0x21
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003502:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800350c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe fa22 	bl	8001968 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fe ff67 	bl	80023f8 <HAL_I2C_SlaveTxCpltCallback>
}
 800352a:	e004      	b.n	8003536 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003534:	615a      	str	r2, [r3, #20]
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	ffff0000 	.word	0xffff0000

08003544 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800355c:	7bbb      	ldrb	r3, [r7, #14]
 800355e:	2b10      	cmp	r3, #16
 8003560:	d002      	beq.n	8003568 <I2C_ITError+0x24>
 8003562:	7bbb      	ldrb	r3, [r7, #14]
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10a      	bne.n	800357e <I2C_ITError+0x3a>
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b22      	cmp	r3, #34	; 0x22
 800356c:	d107      	bne.n	800357e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003584:	2b28      	cmp	r3, #40	; 0x28
 8003586:	d107      	bne.n	8003598 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2228      	movs	r2, #40	; 0x28
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003596:	e015      	b.n	80035c4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a6:	d00a      	beq.n	80035be <I2C_ITError+0x7a>
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b60      	cmp	r3, #96	; 0x60
 80035ac:	d007      	beq.n	80035be <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d2:	d162      	bne.n	800369a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d020      	beq.n	8003634 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <I2C_ITError+0x25c>)
 80035f8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fe8f 	bl	8001322 <HAL_DMA_Abort_IT>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8089 	beq.w	800371e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800362e:	4610      	mov	r0, r2
 8003630:	4798      	blx	r3
 8003632:	e074      	b.n	800371e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <I2C_ITError+0x25c>)
 800363a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fe6e 	bl	8001322 <HAL_DMA_Abort_IT>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d068      	beq.n	800371e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d10b      	bne.n	8003672 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
 8003698:	e041      	b.n	800371e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b60      	cmp	r3, #96	; 0x60
 80036a4:	d125      	bne.n	80036f2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d10b      	bne.n	80036da <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fe fece 	bl	800248c <HAL_I2C_AbortCpltCallback>
 80036f0:	e015      	b.n	800371e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d10b      	bne.n	8003718 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe fead 	bl	8002478 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003762:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d113      	bne.n	8003798 <I2C_ITError+0x254>
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b28      	cmp	r3, #40	; 0x28
 8003774:	d110      	bne.n	8003798 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <I2C_ITError+0x260>)
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe fe52 	bl	800243c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	08003aa5 	.word	0x08003aa5
 80037a4:	ffff0000 	.word	0xffff0000

080037a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2200      	movs	r2, #0
 80037da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa08 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d103      	bne.n	8003802 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e05f      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003814:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	492d      	ldr	r1, [pc, #180]	; (80038d0 <I2C_RequestMemoryWrite+0x128>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa63 	bl	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04c      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	6a39      	ldr	r1, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 faee 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b04      	cmp	r3, #4
 8003858:	d107      	bne.n	800386a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003868:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e02b      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003874:	893b      	ldrh	r3, [r7, #8]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e021      	b.n	80038c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	b29b      	uxth	r3, r3
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fac8 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e005      	b.n	80038c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	00010002 	.word	0x00010002

080038d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	460b      	mov	r3, r1
 80038e8:	813b      	strh	r3, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800390c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	2200      	movs	r2, #0
 8003916:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f96a 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003934:	d103      	bne.n	800393e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0aa      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003950:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	6a3a      	ldr	r2, [r7, #32]
 8003956:	4952      	ldr	r1, [pc, #328]	; (8003aa0 <I2C_RequestMemoryRead+0x1cc>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f9c5 	bl	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e097      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	6a39      	ldr	r1, [r7, #32]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fa50 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00d      	beq.n	80039aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b04      	cmp	r3, #4
 8003994:	d107      	bne.n	80039a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e076      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039b0:	893b      	ldrh	r3, [r7, #8]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	611a      	str	r2, [r3, #16]
 80039ba:	e021      	b.n	8003a00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039bc:	893b      	ldrh	r3, [r7, #8]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fa2a 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d107      	bne.n	80039f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e050      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f6:	893b      	ldrh	r3, [r7, #8]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a02:	6a39      	ldr	r1, [r7, #32]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fa0f 	bl	8003e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d107      	bne.n	8003a28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e035      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f8d3 	bl	8003bf4 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d103      	bne.n	8003a6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e013      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a70:	897b      	ldrh	r3, [r7, #10]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	4906      	ldr	r1, [pc, #24]	; (8003aa0 <I2C_RequestMemoryRead+0x1cc>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f92e 	bl	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	00010002 	.word	0x00010002

08003aa4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <I2C_DMAAbort+0x148>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	08db      	lsrs	r3, r3, #3
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <I2C_DMAAbort+0x14c>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0a1a      	lsrs	r2, r3, #8
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00da      	lsls	r2, r3, #3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003aea:	e00a      	b.n	8003b02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b00:	d0ea      	beq.n	8003ad8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	2200      	movs	r2, #0
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	2200      	movs	r2, #0
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	2200      	movs	r2, #0
 8003b46:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2200      	movs	r2, #0
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b60      	cmp	r3, #96	; 0x60
 8003b72:	d10e      	bne.n	8003b92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7fe fc7e 	bl	800248c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b90:	e027      	b.n	8003be2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b98:	2b28      	cmp	r3, #40	; 0x28
 8003b9a:	d117      	bne.n	8003bcc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2228      	movs	r2, #40	; 0x28
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bca:	e007      	b.n	8003bdc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f7fe fc4b 	bl	8002478 <HAL_I2C_ErrorCallback>
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	14f8b589 	.word	0x14f8b589

08003bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c04:	e048      	b.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d044      	beq.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fd fa47 	bl	80010a0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d139      	bne.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10d      	bne.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	e00c      	b.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d116      	bne.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e023      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10d      	bne.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	e00c      	b.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	43da      	mvns	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d093      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf6:	e071      	b.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d123      	bne.n	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e067      	b.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d041      	beq.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d58:	f7fd f9a2 	bl	80010a0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d136      	bne.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d10c      	bne.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e00b      	b.n	8003daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e021      	b.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d10c      	bne.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e00b      	b.n	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f47f af6d 	bne.w	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f915 	bl	8004066 <I2C_IsAcknowledgeFailed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d028      	beq.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fd f927 	bl	80010a0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11d      	bne.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d016      	beq.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d1c3      	bne.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec4:	e034      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8cd 	bl	8004066 <I2C_IsAcknowledgeFailed>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e034      	b.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d028      	beq.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fd f8df 	bl	80010a0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d11d      	bne.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d016      	beq.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e007      	b.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d1c3      	bne.n	8003ec6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	0a1a      	lsrs	r2, r3, #8
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0220 	orr.w	r2, r3, #32
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e008      	b.n	8003f98 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f94:	d0e9      	beq.n	8003f6a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	14f8b589 	.word	0x14f8b589

08003fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fb8:	e049      	b.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d119      	bne.n	8003ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0210 	mvn.w	r2, #16
 8003fd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e030      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffc:	f7fd f850 	bl	80010a0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11d      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d016      	beq.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e007      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d1ae      	bne.n	8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d11b      	bne.n	80040b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004086:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80040d4:	d103      	bne.n	80040de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80040dc:	e007      	b.n	80040ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040e6:	d102      	bne.n	80040ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2208      	movs	r2, #8
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0cc      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b68      	ldr	r3, [pc, #416]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d90c      	bls.n	8004138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b8      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a58      	ldr	r2, [pc, #352]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800415a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004168:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	494d      	ldr	r1, [pc, #308]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d044      	beq.n	800421c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d119      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e06f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e067      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4934      	ldr	r1, [pc, #208]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ec:	f7fc ff58 	bl	80010a0 <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	e00a      	b.n	800420a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7fc ff54 	bl	80010a0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	4b2b      	ldr	r3, [pc, #172]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 020c 	and.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	429a      	cmp	r2, r3
 800421a:	d1eb      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d20c      	bcs.n	8004244 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e032      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4916      	ldr	r1, [pc, #88]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	490e      	ldr	r1, [pc, #56]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004282:	f000 f855 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	490a      	ldr	r1, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	5ccb      	ldrb	r3, [r1, r3]
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc feb8 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023c00 	.word	0x40023c00
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08006314 	.word	0x08006314
 80042c0:	20000000 	.word	0x20000000
 80042c4:	20000004 	.word	0x20000004

080042c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000000 	.word	0x20000000

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	08006324 	.word	0x08006324

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	08006324 	.word	0x08006324

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b0ae      	sub	sp, #184	; 0xb8
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004356:	4bcb      	ldr	r3, [pc, #812]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b0c      	cmp	r3, #12
 8004360:	f200 8206 	bhi.w	8004770 <HAL_RCC_GetSysClockFreq+0x440>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	080043a1 	.word	0x080043a1
 8004370:	08004771 	.word	0x08004771
 8004374:	08004771 	.word	0x08004771
 8004378:	08004771 	.word	0x08004771
 800437c:	080043a9 	.word	0x080043a9
 8004380:	08004771 	.word	0x08004771
 8004384:	08004771 	.word	0x08004771
 8004388:	08004771 	.word	0x08004771
 800438c:	080043b1 	.word	0x080043b1
 8004390:	08004771 	.word	0x08004771
 8004394:	08004771 	.word	0x08004771
 8004398:	08004771 	.word	0x08004771
 800439c:	080045a1 	.word	0x080045a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4bb9      	ldr	r3, [pc, #740]	; (8004688 <HAL_RCC_GetSysClockFreq+0x358>)
 80043a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80043a6:	e1e7      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043a8:	4bb8      	ldr	r3, [pc, #736]	; (800468c <HAL_RCC_GetSysClockFreq+0x35c>)
 80043aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043ae:	e1e3      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b0:	4bb4      	ldr	r3, [pc, #720]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043bc:	4bb1      	ldr	r3, [pc, #708]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d071      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c8:	4bae      	ldr	r3, [pc, #696]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80043d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043ee:	4622      	mov	r2, r4
 80043f0:	462b      	mov	r3, r5
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004400:	0150      	lsls	r0, r2, #5
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4621      	mov	r1, r4
 8004408:	1a51      	subs	r1, r2, r1
 800440a:	6439      	str	r1, [r7, #64]	; 0x40
 800440c:	4629      	mov	r1, r5
 800440e:	eb63 0301 	sbc.w	r3, r3, r1
 8004412:	647b      	str	r3, [r7, #68]	; 0x44
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004420:	4649      	mov	r1, r9
 8004422:	018b      	lsls	r3, r1, #6
 8004424:	4641      	mov	r1, r8
 8004426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800442a:	4641      	mov	r1, r8
 800442c:	018a      	lsls	r2, r1, #6
 800442e:	4641      	mov	r1, r8
 8004430:	1a51      	subs	r1, r2, r1
 8004432:	63b9      	str	r1, [r7, #56]	; 0x38
 8004434:	4649      	mov	r1, r9
 8004436:	eb63 0301 	sbc.w	r3, r3, r1
 800443a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004448:	4649      	mov	r1, r9
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4641      	mov	r1, r8
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4641      	mov	r1, r8
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4622      	mov	r2, r4
 800445e:	189b      	adds	r3, r3, r2
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
 8004462:	462b      	mov	r3, r5
 8004464:	460a      	mov	r2, r1
 8004466:	eb42 0303 	adc.w	r3, r2, r3
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004478:	4629      	mov	r1, r5
 800447a:	024b      	lsls	r3, r1, #9
 800447c:	4621      	mov	r1, r4
 800447e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004482:	4621      	mov	r1, r4
 8004484:	024a      	lsls	r2, r1, #9
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004494:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004498:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800449c:	f7fb ff08 	bl	80002b0 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044aa:	e067      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ac:	4b75      	ldr	r3, [pc, #468]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80044c6:	2300      	movs	r3, #0
 80044c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	0159      	lsls	r1, r3, #5
 80044dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e0:	0150      	lsls	r0, r2, #5
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4621      	mov	r1, r4
 80044e8:	1a51      	subs	r1, r2, r1
 80044ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb63 0301 	sbc.w	r3, r3, r1
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004500:	4649      	mov	r1, r9
 8004502:	018b      	lsls	r3, r1, #6
 8004504:	4641      	mov	r1, r8
 8004506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450a:	4641      	mov	r1, r8
 800450c:	018a      	lsls	r2, r1, #6
 800450e:	4641      	mov	r1, r8
 8004510:	ebb2 0a01 	subs.w	sl, r2, r1
 8004514:	4649      	mov	r1, r9
 8004516:	eb63 0b01 	sbc.w	fp, r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004526:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800452a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800452e:	4692      	mov	sl, r2
 8004530:	469b      	mov	fp, r3
 8004532:	4623      	mov	r3, r4
 8004534:	eb1a 0303 	adds.w	r3, sl, r3
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	462b      	mov	r3, r5
 800453c:	eb4b 0303 	adc.w	r3, fp, r3
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800454e:	4629      	mov	r1, r5
 8004550:	028b      	lsls	r3, r1, #10
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004558:	4621      	mov	r1, r4
 800455a:	028a      	lsls	r2, r1, #10
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004564:	2200      	movs	r2, #0
 8004566:	673b      	str	r3, [r7, #112]	; 0x70
 8004568:	677a      	str	r2, [r7, #116]	; 0x74
 800456a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800456e:	f7fb fe9f 	bl	80002b0 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4613      	mov	r3, r2
 8004578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	3301      	adds	r3, #1
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800458e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800459e:	e0eb      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a0:	4b38      	ldr	r3, [pc, #224]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d06b      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b8:	4b32      	ldr	r3, [pc, #200]	; (8004684 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	2200      	movs	r2, #0
 80045c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	663b      	str	r3, [r7, #96]	; 0x60
 80045cc:	2300      	movs	r3, #0
 80045ce:	667b      	str	r3, [r7, #100]	; 0x64
 80045d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80045d4:	4622      	mov	r2, r4
 80045d6:	462b      	mov	r3, r5
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	0159      	lsls	r1, r3, #5
 80045e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e6:	0150      	lsls	r0, r2, #5
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4621      	mov	r1, r4
 80045ee:	1a51      	subs	r1, r2, r1
 80045f0:	61b9      	str	r1, [r7, #24]
 80045f2:	4629      	mov	r1, r5
 80045f4:	eb63 0301 	sbc.w	r3, r3, r1
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004606:	4659      	mov	r1, fp
 8004608:	018b      	lsls	r3, r1, #6
 800460a:	4651      	mov	r1, sl
 800460c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004610:	4651      	mov	r1, sl
 8004612:	018a      	lsls	r2, r1, #6
 8004614:	4651      	mov	r1, sl
 8004616:	ebb2 0801 	subs.w	r8, r2, r1
 800461a:	4659      	mov	r1, fp
 800461c:	eb63 0901 	sbc.w	r9, r3, r1
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004634:	4690      	mov	r8, r2
 8004636:	4699      	mov	r9, r3
 8004638:	4623      	mov	r3, r4
 800463a:	eb18 0303 	adds.w	r3, r8, r3
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	462b      	mov	r3, r5
 8004642:	eb49 0303 	adc.w	r3, r9, r3
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004654:	4629      	mov	r1, r5
 8004656:	024b      	lsls	r3, r1, #9
 8004658:	4621      	mov	r1, r4
 800465a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800465e:	4621      	mov	r1, r4
 8004660:	024a      	lsls	r2, r1, #9
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800466a:	2200      	movs	r2, #0
 800466c:	65bb      	str	r3, [r7, #88]	; 0x58
 800466e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004670:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004674:	f7fb fe1c 	bl	80002b0 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4613      	mov	r3, r2
 800467e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004682:	e065      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x420>
 8004684:	40023800 	.word	0x40023800
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004690:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <HAL_RCC_GetSysClockFreq+0x458>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	2200      	movs	r2, #0
 8004698:	4618      	mov	r0, r3
 800469a:	4611      	mov	r1, r2
 800469c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046a0:	653b      	str	r3, [r7, #80]	; 0x50
 80046a2:	2300      	movs	r3, #0
 80046a4:	657b      	str	r3, [r7, #84]	; 0x54
 80046a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80046aa:	4642      	mov	r2, r8
 80046ac:	464b      	mov	r3, r9
 80046ae:	f04f 0000 	mov.w	r0, #0
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	0159      	lsls	r1, r3, #5
 80046b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046bc:	0150      	lsls	r0, r2, #5
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4641      	mov	r1, r8
 80046c4:	1a51      	subs	r1, r2, r1
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	4649      	mov	r1, r9
 80046ca:	eb63 0301 	sbc.w	r3, r3, r1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046dc:	4659      	mov	r1, fp
 80046de:	018b      	lsls	r3, r1, #6
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046e6:	4651      	mov	r1, sl
 80046e8:	018a      	lsls	r2, r1, #6
 80046ea:	4651      	mov	r1, sl
 80046ec:	1a54      	subs	r4, r2, r1
 80046ee:	4659      	mov	r1, fp
 80046f0:	eb63 0501 	sbc.w	r5, r3, r1
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	00eb      	lsls	r3, r5, #3
 80046fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004702:	00e2      	lsls	r2, r4, #3
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	4643      	mov	r3, r8
 800470a:	18e3      	adds	r3, r4, r3
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	464b      	mov	r3, r9
 8004710:	eb45 0303 	adc.w	r3, r5, r3
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004722:	4629      	mov	r1, r5
 8004724:	028b      	lsls	r3, r1, #10
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800472c:	4621      	mov	r1, r4
 800472e:	028a      	lsls	r2, r1, #10
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004738:	2200      	movs	r2, #0
 800473a:	64bb      	str	r3, [r7, #72]	; 0x48
 800473c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800473e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004742:	f7fb fdb5 	bl	80002b0 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4613      	mov	r3, r2
 800474c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <HAL_RCC_GetSysClockFreq+0x458>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	0f1b      	lsrs	r3, r3, #28
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800475e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800476e:	e003      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004778:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800477c:	4618      	mov	r0, r3
 800477e:	37b8      	adds	r7, #184	; 0xb8
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	00f42400 	.word	0x00f42400

08004790 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e28d      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8083 	beq.w	80048b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047b0:	4b94      	ldr	r3, [pc, #592]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d019      	beq.n	80047f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047bc:	4b91      	ldr	r3, [pc, #580]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047c8:	4b8e      	ldr	r3, [pc, #568]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d4:	d00c      	beq.n	80047f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d6:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d112      	bne.n	8004808 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e2:	4b88      	ldr	r3, [pc, #544]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ee:	d10b      	bne.n	8004808 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	4b84      	ldr	r3, [pc, #528]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d05b      	beq.n	80048b4 <HAL_RCC_OscConfig+0x124>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d157      	bne.n	80048b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e25a      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004810:	d106      	bne.n	8004820 <HAL_RCC_OscConfig+0x90>
 8004812:	4b7c      	ldr	r3, [pc, #496]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a7b      	ldr	r2, [pc, #492]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e01d      	b.n	800485c <HAL_RCC_OscConfig+0xcc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0xb4>
 800482a:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a75      	ldr	r2, [pc, #468]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	4b73      	ldr	r3, [pc, #460]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a72      	ldr	r2, [pc, #456]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e00b      	b.n	800485c <HAL_RCC_OscConfig+0xcc>
 8004844:	4b6f      	ldr	r3, [pc, #444]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6e      	ldr	r2, [pc, #440]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 800484a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	4b6c      	ldr	r3, [pc, #432]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6b      	ldr	r2, [pc, #428]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d013      	beq.n	800488c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fc fc1c 	bl	80010a0 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800486c:	f7fc fc18 	bl	80010a0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e21f      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	4b61      	ldr	r3, [pc, #388]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0xdc>
 800488a:	e014      	b.n	80048b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fc fc08 	bl	80010a0 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004894:	f7fc fc04 	bl	80010a0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e20b      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a6:	4b57      	ldr	r3, [pc, #348]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x104>
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d06f      	beq.n	80049a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048c2:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d017      	beq.n	80048fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048ce:	4b4d      	ldr	r3, [pc, #308]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048da:	4b4a      	ldr	r3, [pc, #296]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d11c      	bne.n	800492c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f2:	4b44      	ldr	r3, [pc, #272]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d116      	bne.n	800492c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fe:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_RCC_OscConfig+0x186>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d001      	beq.n	8004916 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e1d3      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004916:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4937      	ldr	r1, [pc, #220]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	e03a      	b.n	80049a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004934:	4b34      	ldr	r3, [pc, #208]	; (8004a08 <HAL_RCC_OscConfig+0x278>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fc fbb1 	bl	80010a0 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004942:	f7fc fbad 	bl	80010a0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e1b4      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4925      	ldr	r1, [pc, #148]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	e015      	b.n	80049a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCC_OscConfig+0x278>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fc fb90 	bl	80010a0 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004984:	f7fc fb8c 	bl	80010a0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e193      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d036      	beq.n	8004a1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCC_OscConfig+0x27c>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fc fb70 	bl	80010a0 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fc fb6c 	bl	80010a0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e173      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f0      	beq.n	80049c4 <HAL_RCC_OscConfig+0x234>
 80049e2:	e01b      	b.n	8004a1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCC_OscConfig+0x27c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fc fb59 	bl	80010a0 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f0:	e00e      	b.n	8004a10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f2:	f7fc fb55 	bl	80010a0 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d907      	bls.n	8004a10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e15c      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
 8004a04:	40023800 	.word	0x40023800
 8004a08:	42470000 	.word	0x42470000
 8004a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	4b8a      	ldr	r3, [pc, #552]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1ea      	bne.n	80049f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8097 	beq.w	8004b58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a2e:	4b83      	ldr	r3, [pc, #524]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	4b7f      	ldr	r3, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a7e      	ldr	r2, [pc, #504]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b79      	ldr	r3, [pc, #484]	; (8004c40 <HAL_RCC_OscConfig+0x4b0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a66:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <HAL_RCC_OscConfig+0x4b0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a75      	ldr	r2, [pc, #468]	; (8004c40 <HAL_RCC_OscConfig+0x4b0>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fc fb15 	bl	80010a0 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fc fb11 	bl	80010a0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e118      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCC_OscConfig+0x4b0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d106      	bne.n	8004aae <HAL_RCC_OscConfig+0x31e>
 8004aa0:	4b66      	ldr	r3, [pc, #408]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a65      	ldr	r2, [pc, #404]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	e01c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x358>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x340>
 8004ab6:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	4a60      	ldr	r2, [pc, #384]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004abc:	f043 0304 	orr.w	r3, r3, #4
 8004ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac2:	4b5e      	ldr	r3, [pc, #376]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a5d      	ldr	r2, [pc, #372]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0x358>
 8004ad0:	4b5a      	ldr	r3, [pc, #360]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	4a59      	ldr	r2, [pc, #356]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	6713      	str	r3, [r2, #112]	; 0x70
 8004adc:	4b57      	ldr	r3, [pc, #348]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a56      	ldr	r2, [pc, #344]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004ae2:	f023 0304 	bic.w	r3, r3, #4
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d015      	beq.n	8004b1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fc fad6 	bl	80010a0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fc fad2 	bl	80010a0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e0d7      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ee      	beq.n	8004af8 <HAL_RCC_OscConfig+0x368>
 8004b1a:	e014      	b.n	8004b46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fc fac0 	bl	80010a0 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fc fabc 	bl	80010a0 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e0c1      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3a:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ee      	bne.n	8004b24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4a3a      	ldr	r2, [pc, #232]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80ad 	beq.w	8004cbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d060      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d145      	bne.n	8004c02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	4b33      	ldr	r3, [pc, #204]	; (8004c44 <HAL_RCC_OscConfig+0x4b4>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fc fa90 	bl	80010a0 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fc fa8c 	bl	80010a0 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e093      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	019b      	lsls	r3, r3, #6
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	085b      	lsrs	r3, r3, #1
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	491b      	ldr	r1, [pc, #108]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_OscConfig+0x4b4>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fc fa61 	bl	80010a0 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be2:	f7fc fa5d 	bl	80010a0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e064      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf4:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x452>
 8004c00:	e05c      	b.n	8004cbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <HAL_RCC_OscConfig+0x4b4>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fc fa4a 	bl	80010a0 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fc fa46 	bl	80010a0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04d      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x480>
 8004c2e:	e045      	b.n	8004cbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e040      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40007000 	.word	0x40007000
 8004c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c48:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_RCC_OscConfig+0x538>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d030      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d129      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d122      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d119      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	3b01      	subs	r3, #1
 8004c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d10f      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800

08004ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e042      	b.n	8004d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc f808 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	; 0x24
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f82b 	bl	8004d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d70:	b0c0      	sub	sp, #256	; 0x100
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	68d9      	ldr	r1, [r3, #12]
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	ea40 0301 	orr.w	r3, r0, r1
 8004d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dc4:	f021 010c 	bic.w	r1, r1, #12
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	6999      	ldr	r1, [r3, #24]
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	ea40 0301 	orr.w	r3, r0, r1
 8004df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b8f      	ldr	r3, [pc, #572]	; (8005038 <UART_SetConfig+0x2cc>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d005      	beq.n	8004e0c <UART_SetConfig+0xa0>
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b8d      	ldr	r3, [pc, #564]	; (800503c <UART_SetConfig+0x2d0>)
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d104      	bne.n	8004e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7ff fa7c 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8004e10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e14:	e003      	b.n	8004e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e16:	f7ff fa63 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8004e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e28:	f040 810c 	bne.w	8005044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	1891      	adds	r1, r2, r2
 8004e44:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e46:	415b      	adcs	r3, r3
 8004e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e4e:	4621      	mov	r1, r4
 8004e50:	eb12 0801 	adds.w	r8, r2, r1
 8004e54:	4629      	mov	r1, r5
 8004e56:	eb43 0901 	adc.w	r9, r3, r1
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e6e:	4690      	mov	r8, r2
 8004e70:	4699      	mov	r9, r3
 8004e72:	4623      	mov	r3, r4
 8004e74:	eb18 0303 	adds.w	r3, r8, r3
 8004e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	eb49 0303 	adc.w	r3, r9, r3
 8004e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	18db      	adds	r3, r3, r3
 8004e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	eb42 0303 	adc.w	r3, r2, r3
 8004ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004eb0:	f7fb f9fe 	bl	80002b0 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4b61      	ldr	r3, [pc, #388]	; (8005040 <UART_SetConfig+0x2d4>)
 8004eba:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	011c      	lsls	r4, r3, #4
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	64b9      	str	r1, [r7, #72]	; 0x48
 8004edc:	415b      	adcs	r3, r3
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8004eea:	4649      	mov	r1, r9
 8004eec:	eb43 0b01 	adc.w	fp, r3, r1
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f04:	4692      	mov	sl, r2
 8004f06:	469b      	mov	fp, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f12:	464b      	mov	r3, r9
 8004f14:	eb4b 0303 	adc.w	r3, fp, r3
 8004f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f30:	460b      	mov	r3, r1
 8004f32:	18db      	adds	r3, r3, r3
 8004f34:	643b      	str	r3, [r7, #64]	; 0x40
 8004f36:	4613      	mov	r3, r2
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f46:	f7fb f9b3 	bl	80002b0 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <UART_SetConfig+0x2d4>)
 8004f52:	fba3 2301 	umull	r2, r3, r3, r1
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2264      	movs	r2, #100	; 0x64
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	1acb      	subs	r3, r1, r3
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f66:	4b36      	ldr	r3, [pc, #216]	; (8005040 <UART_SetConfig+0x2d4>)
 8004f68:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f74:	441c      	add	r4, r3
 8004f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f90:	415b      	adcs	r3, r3
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fcc:	464b      	mov	r3, r9
 8004fce:	460a      	mov	r2, r1
 8004fd0:	eb42 0303 	adc.w	r3, r2, r3
 8004fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fec:	460b      	mov	r3, r1
 8004fee:	18db      	adds	r3, r3, r3
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005002:	f7fb f955 	bl	80002b0 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <UART_SetConfig+0x2d4>)
 800500c:	fba3 1302 	umull	r1, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	2164      	movs	r1, #100	; 0x64
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3332      	adds	r3, #50	; 0x32
 800501e:	4a08      	ldr	r2, [pc, #32]	; (8005040 <UART_SetConfig+0x2d4>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f003 0207 	and.w	r2, r3, #7
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4422      	add	r2, r4
 8005032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005034:	e106      	b.n	8005244 <UART_SetConfig+0x4d8>
 8005036:	bf00      	nop
 8005038:	40011000 	.word	0x40011000
 800503c:	40011400 	.word	0x40011400
 8005040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800504e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005056:	4642      	mov	r2, r8
 8005058:	464b      	mov	r3, r9
 800505a:	1891      	adds	r1, r2, r2
 800505c:	6239      	str	r1, [r7, #32]
 800505e:	415b      	adcs	r3, r3
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
 8005062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005066:	4641      	mov	r1, r8
 8005068:	1854      	adds	r4, r2, r1
 800506a:	4649      	mov	r1, r9
 800506c:	eb43 0501 	adc.w	r5, r3, r1
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	00eb      	lsls	r3, r5, #3
 800507a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800507e:	00e2      	lsls	r2, r4, #3
 8005080:	4614      	mov	r4, r2
 8005082:	461d      	mov	r5, r3
 8005084:	4643      	mov	r3, r8
 8005086:	18e3      	adds	r3, r4, r3
 8005088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800508c:	464b      	mov	r3, r9
 800508e:	eb45 0303 	adc.w	r3, r5, r3
 8005092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050b2:	4629      	mov	r1, r5
 80050b4:	008b      	lsls	r3, r1, #2
 80050b6:	4621      	mov	r1, r4
 80050b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050bc:	4621      	mov	r1, r4
 80050be:	008a      	lsls	r2, r1, #2
 80050c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050c4:	f7fb f8f4 	bl	80002b0 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4b60      	ldr	r3, [pc, #384]	; (8005250 <UART_SetConfig+0x4e4>)
 80050ce:	fba3 2302 	umull	r2, r3, r3, r2
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	011c      	lsls	r4, r3, #4
 80050d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	61b9      	str	r1, [r7, #24]
 80050f0:	415b      	adcs	r3, r3
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6139      	str	r1, [r7, #16]
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800512c:	464b      	mov	r3, r9
 800512e:	460a      	mov	r2, r1
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	67bb      	str	r3, [r7, #120]	; 0x78
 8005142:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005150:	4649      	mov	r1, r9
 8005152:	008b      	lsls	r3, r1, #2
 8005154:	4641      	mov	r1, r8
 8005156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800515a:	4641      	mov	r1, r8
 800515c:	008a      	lsls	r2, r1, #2
 800515e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005162:	f7fb f8a5 	bl	80002b0 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4611      	mov	r1, r2
 800516c:	4b38      	ldr	r3, [pc, #224]	; (8005250 <UART_SetConfig+0x4e4>)
 800516e:	fba3 2301 	umull	r2, r3, r3, r1
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2264      	movs	r2, #100	; 0x64
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	1acb      	subs	r3, r1, r3
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	3332      	adds	r3, #50	; 0x32
 8005180:	4a33      	ldr	r2, [pc, #204]	; (8005250 <UART_SetConfig+0x4e4>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518c:	441c      	add	r4, r3
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005192:	2200      	movs	r2, #0
 8005194:	673b      	str	r3, [r7, #112]	; 0x70
 8005196:	677a      	str	r2, [r7, #116]	; 0x74
 8005198:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	415b      	adcs	r3, r3
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ac:	4641      	mov	r1, r8
 80051ae:	1851      	adds	r1, r2, r1
 80051b0:	6039      	str	r1, [r7, #0]
 80051b2:	4649      	mov	r1, r9
 80051b4:	414b      	adcs	r3, r1
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051c4:	4659      	mov	r1, fp
 80051c6:	00cb      	lsls	r3, r1, #3
 80051c8:	4651      	mov	r1, sl
 80051ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ce:	4651      	mov	r1, sl
 80051d0:	00ca      	lsls	r2, r1, #3
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	4642      	mov	r2, r8
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80051de:	464b      	mov	r3, r9
 80051e0:	460a      	mov	r2, r1
 80051e2:	eb42 0303 	adc.w	r3, r2, r3
 80051e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	663b      	str	r3, [r7, #96]	; 0x60
 80051f2:	667a      	str	r2, [r7, #100]	; 0x64
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005200:	4649      	mov	r1, r9
 8005202:	008b      	lsls	r3, r1, #2
 8005204:	4641      	mov	r1, r8
 8005206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520a:	4641      	mov	r1, r8
 800520c:	008a      	lsls	r2, r1, #2
 800520e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005212:	f7fb f84d 	bl	80002b0 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <UART_SetConfig+0x4e4>)
 800521c:	fba3 1302 	umull	r1, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	2164      	movs	r1, #100	; 0x64
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	3332      	adds	r3, #50	; 0x32
 800522e:	4a08      	ldr	r2, [pc, #32]	; (8005250 <UART_SetConfig+0x4e4>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4422      	add	r2, r4
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	bf00      	nop
 8005246:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800524a:	46bd      	mov	sp, r7
 800524c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005250:	51eb851f 	.word	0x51eb851f

08005254 <std>:
 8005254:	2300      	movs	r3, #0
 8005256:	b510      	push	{r4, lr}
 8005258:	4604      	mov	r4, r0
 800525a:	e9c0 3300 	strd	r3, r3, [r0]
 800525e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005262:	6083      	str	r3, [r0, #8]
 8005264:	8181      	strh	r1, [r0, #12]
 8005266:	6643      	str	r3, [r0, #100]	; 0x64
 8005268:	81c2      	strh	r2, [r0, #14]
 800526a:	6183      	str	r3, [r0, #24]
 800526c:	4619      	mov	r1, r3
 800526e:	2208      	movs	r2, #8
 8005270:	305c      	adds	r0, #92	; 0x5c
 8005272:	f000 f9ff 	bl	8005674 <memset>
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <std+0x58>)
 8005278:	6263      	str	r3, [r4, #36]	; 0x24
 800527a:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <std+0x5c>)
 800527c:	62a3      	str	r3, [r4, #40]	; 0x28
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <std+0x60>)
 8005280:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <std+0x64>)
 8005284:	6323      	str	r3, [r4, #48]	; 0x30
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <std+0x68>)
 8005288:	6224      	str	r4, [r4, #32]
 800528a:	429c      	cmp	r4, r3
 800528c:	d006      	beq.n	800529c <std+0x48>
 800528e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005292:	4294      	cmp	r4, r2
 8005294:	d002      	beq.n	800529c <std+0x48>
 8005296:	33d0      	adds	r3, #208	; 0xd0
 8005298:	429c      	cmp	r4, r3
 800529a:	d105      	bne.n	80052a8 <std+0x54>
 800529c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a4:	f000 ba5e 	b.w	8005764 <__retarget_lock_init_recursive>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	080054c5 	.word	0x080054c5
 80052b0:	080054e7 	.word	0x080054e7
 80052b4:	0800551f 	.word	0x0800551f
 80052b8:	08005543 	.word	0x08005543
 80052bc:	20000128 	.word	0x20000128

080052c0 <stdio_exit_handler>:
 80052c0:	4a02      	ldr	r2, [pc, #8]	; (80052cc <stdio_exit_handler+0xc>)
 80052c2:	4903      	ldr	r1, [pc, #12]	; (80052d0 <stdio_exit_handler+0x10>)
 80052c4:	4803      	ldr	r0, [pc, #12]	; (80052d4 <stdio_exit_handler+0x14>)
 80052c6:	f000 b869 	b.w	800539c <_fwalk_sglue>
 80052ca:	bf00      	nop
 80052cc:	2000000c 	.word	0x2000000c
 80052d0:	08006011 	.word	0x08006011
 80052d4:	20000018 	.word	0x20000018

080052d8 <cleanup_stdio>:
 80052d8:	6841      	ldr	r1, [r0, #4]
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <cleanup_stdio+0x34>)
 80052dc:	4299      	cmp	r1, r3
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	d001      	beq.n	80052e8 <cleanup_stdio+0x10>
 80052e4:	f000 fe94 	bl	8006010 <_fflush_r>
 80052e8:	68a1      	ldr	r1, [r4, #8]
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <cleanup_stdio+0x38>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d002      	beq.n	80052f6 <cleanup_stdio+0x1e>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 fe8d 	bl	8006010 <_fflush_r>
 80052f6:	68e1      	ldr	r1, [r4, #12]
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <cleanup_stdio+0x3c>)
 80052fa:	4299      	cmp	r1, r3
 80052fc:	d004      	beq.n	8005308 <cleanup_stdio+0x30>
 80052fe:	4620      	mov	r0, r4
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	f000 be84 	b.w	8006010 <_fflush_r>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	20000128 	.word	0x20000128
 8005310:	20000190 	.word	0x20000190
 8005314:	200001f8 	.word	0x200001f8

08005318 <global_stdio_init.part.0>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <global_stdio_init.part.0+0x30>)
 800531c:	4c0b      	ldr	r4, [pc, #44]	; (800534c <global_stdio_init.part.0+0x34>)
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <global_stdio_init.part.0+0x38>)
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	4620      	mov	r0, r4
 8005324:	2200      	movs	r2, #0
 8005326:	2104      	movs	r1, #4
 8005328:	f7ff ff94 	bl	8005254 <std>
 800532c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005330:	2201      	movs	r2, #1
 8005332:	2109      	movs	r1, #9
 8005334:	f7ff ff8e 	bl	8005254 <std>
 8005338:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800533c:	2202      	movs	r2, #2
 800533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005342:	2112      	movs	r1, #18
 8005344:	f7ff bf86 	b.w	8005254 <std>
 8005348:	20000260 	.word	0x20000260
 800534c:	20000128 	.word	0x20000128
 8005350:	080052c1 	.word	0x080052c1

08005354 <__sfp_lock_acquire>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__sfp_lock_acquire+0x8>)
 8005356:	f000 ba06 	b.w	8005766 <__retarget_lock_acquire_recursive>
 800535a:	bf00      	nop
 800535c:	20000269 	.word	0x20000269

08005360 <__sfp_lock_release>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__sfp_lock_release+0x8>)
 8005362:	f000 ba01 	b.w	8005768 <__retarget_lock_release_recursive>
 8005366:	bf00      	nop
 8005368:	20000269 	.word	0x20000269

0800536c <__sinit>:
 800536c:	b510      	push	{r4, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	f7ff fff0 	bl	8005354 <__sfp_lock_acquire>
 8005374:	6a23      	ldr	r3, [r4, #32]
 8005376:	b11b      	cbz	r3, 8005380 <__sinit+0x14>
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f7ff bff0 	b.w	8005360 <__sfp_lock_release>
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <__sinit+0x28>)
 8005382:	6223      	str	r3, [r4, #32]
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__sinit+0x2c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f5      	bne.n	8005378 <__sinit+0xc>
 800538c:	f7ff ffc4 	bl	8005318 <global_stdio_init.part.0>
 8005390:	e7f2      	b.n	8005378 <__sinit+0xc>
 8005392:	bf00      	nop
 8005394:	080052d9 	.word	0x080052d9
 8005398:	20000260 	.word	0x20000260

0800539c <_fwalk_sglue>:
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a0:	4607      	mov	r7, r0
 80053a2:	4688      	mov	r8, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	2600      	movs	r6, #0
 80053a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ac:	f1b9 0901 	subs.w	r9, r9, #1
 80053b0:	d505      	bpl.n	80053be <_fwalk_sglue+0x22>
 80053b2:	6824      	ldr	r4, [r4, #0]
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	d1f7      	bne.n	80053a8 <_fwalk_sglue+0xc>
 80053b8:	4630      	mov	r0, r6
 80053ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d907      	bls.n	80053d4 <_fwalk_sglue+0x38>
 80053c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c8:	3301      	adds	r3, #1
 80053ca:	d003      	beq.n	80053d4 <_fwalk_sglue+0x38>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	47c0      	blx	r8
 80053d2:	4306      	orrs	r6, r0
 80053d4:	3568      	adds	r5, #104	; 0x68
 80053d6:	e7e9      	b.n	80053ac <_fwalk_sglue+0x10>

080053d8 <iprintf>:
 80053d8:	b40f      	push	{r0, r1, r2, r3}
 80053da:	b507      	push	{r0, r1, r2, lr}
 80053dc:	4906      	ldr	r1, [pc, #24]	; (80053f8 <iprintf+0x20>)
 80053de:	ab04      	add	r3, sp, #16
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e6:	6881      	ldr	r1, [r0, #8]
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	f000 fae1 	bl	80059b0 <_vfiprintf_r>
 80053ee:	b003      	add	sp, #12
 80053f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f4:	b004      	add	sp, #16
 80053f6:	4770      	bx	lr
 80053f8:	20000064 	.word	0x20000064

080053fc <putchar>:
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <putchar+0xc>)
 80053fe:	4601      	mov	r1, r0
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	6882      	ldr	r2, [r0, #8]
 8005404:	f000 be8e 	b.w	8006124 <_putc_r>
 8005408:	20000064 	.word	0x20000064

0800540c <_puts_r>:
 800540c:	6a03      	ldr	r3, [r0, #32]
 800540e:	b570      	push	{r4, r5, r6, lr}
 8005410:	6884      	ldr	r4, [r0, #8]
 8005412:	4605      	mov	r5, r0
 8005414:	460e      	mov	r6, r1
 8005416:	b90b      	cbnz	r3, 800541c <_puts_r+0x10>
 8005418:	f7ff ffa8 	bl	800536c <__sinit>
 800541c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d405      	bmi.n	800542e <_puts_r+0x22>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	0598      	lsls	r0, r3, #22
 8005426:	d402      	bmi.n	800542e <_puts_r+0x22>
 8005428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800542a:	f000 f99c 	bl	8005766 <__retarget_lock_acquire_recursive>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	0719      	lsls	r1, r3, #28
 8005432:	d513      	bpl.n	800545c <_puts_r+0x50>
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	b18b      	cbz	r3, 800545c <_puts_r+0x50>
 8005438:	3e01      	subs	r6, #1
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005440:	3b01      	subs	r3, #1
 8005442:	60a3      	str	r3, [r4, #8]
 8005444:	b9e9      	cbnz	r1, 8005482 <_puts_r+0x76>
 8005446:	2b00      	cmp	r3, #0
 8005448:	da2e      	bge.n	80054a8 <_puts_r+0x9c>
 800544a:	4622      	mov	r2, r4
 800544c:	210a      	movs	r1, #10
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f87b 	bl	800554a <__swbuf_r>
 8005454:	3001      	adds	r0, #1
 8005456:	d007      	beq.n	8005468 <_puts_r+0x5c>
 8005458:	250a      	movs	r5, #10
 800545a:	e007      	b.n	800546c <_puts_r+0x60>
 800545c:	4621      	mov	r1, r4
 800545e:	4628      	mov	r0, r5
 8005460:	f000 f8b0 	bl	80055c4 <__swsetup_r>
 8005464:	2800      	cmp	r0, #0
 8005466:	d0e7      	beq.n	8005438 <_puts_r+0x2c>
 8005468:	f04f 35ff 	mov.w	r5, #4294967295
 800546c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800546e:	07da      	lsls	r2, r3, #31
 8005470:	d405      	bmi.n	800547e <_puts_r+0x72>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	059b      	lsls	r3, r3, #22
 8005476:	d402      	bmi.n	800547e <_puts_r+0x72>
 8005478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547a:	f000 f975 	bl	8005768 <__retarget_lock_release_recursive>
 800547e:	4628      	mov	r0, r5
 8005480:	bd70      	pop	{r4, r5, r6, pc}
 8005482:	2b00      	cmp	r3, #0
 8005484:	da04      	bge.n	8005490 <_puts_r+0x84>
 8005486:	69a2      	ldr	r2, [r4, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	dc06      	bgt.n	800549a <_puts_r+0x8e>
 800548c:	290a      	cmp	r1, #10
 800548e:	d004      	beq.n	800549a <_puts_r+0x8e>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	6022      	str	r2, [r4, #0]
 8005496:	7019      	strb	r1, [r3, #0]
 8005498:	e7cf      	b.n	800543a <_puts_r+0x2e>
 800549a:	4622      	mov	r2, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f854 	bl	800554a <__swbuf_r>
 80054a2:	3001      	adds	r0, #1
 80054a4:	d1c9      	bne.n	800543a <_puts_r+0x2e>
 80054a6:	e7df      	b.n	8005468 <_puts_r+0x5c>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	250a      	movs	r5, #10
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	701d      	strb	r5, [r3, #0]
 80054b2:	e7db      	b.n	800546c <_puts_r+0x60>

080054b4 <puts>:
 80054b4:	4b02      	ldr	r3, [pc, #8]	; (80054c0 <puts+0xc>)
 80054b6:	4601      	mov	r1, r0
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f7ff bfa7 	b.w	800540c <_puts_r>
 80054be:	bf00      	nop
 80054c0:	20000064 	.word	0x20000064

080054c4 <__sread>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	460c      	mov	r4, r1
 80054c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054cc:	f000 f8fc 	bl	80056c8 <_read_r>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	bfab      	itete	ge
 80054d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054d6:	89a3      	ldrhlt	r3, [r4, #12]
 80054d8:	181b      	addge	r3, r3, r0
 80054da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054de:	bfac      	ite	ge
 80054e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054e2:	81a3      	strhlt	r3, [r4, #12]
 80054e4:	bd10      	pop	{r4, pc}

080054e6 <__swrite>:
 80054e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ea:	461f      	mov	r7, r3
 80054ec:	898b      	ldrh	r3, [r1, #12]
 80054ee:	05db      	lsls	r3, r3, #23
 80054f0:	4605      	mov	r5, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	4616      	mov	r6, r2
 80054f6:	d505      	bpl.n	8005504 <__swrite+0x1e>
 80054f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fc:	2302      	movs	r3, #2
 80054fe:	2200      	movs	r2, #0
 8005500:	f000 f8d0 	bl	80056a4 <_lseek_r>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800550a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	4632      	mov	r2, r6
 8005512:	463b      	mov	r3, r7
 8005514:	4628      	mov	r0, r5
 8005516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	f000 b8e7 	b.w	80056ec <_write_r>

0800551e <__sseek>:
 800551e:	b510      	push	{r4, lr}
 8005520:	460c      	mov	r4, r1
 8005522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005526:	f000 f8bd 	bl	80056a4 <_lseek_r>
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	bf15      	itete	ne
 8005530:	6560      	strne	r0, [r4, #84]	; 0x54
 8005532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800553a:	81a3      	strheq	r3, [r4, #12]
 800553c:	bf18      	it	ne
 800553e:	81a3      	strhne	r3, [r4, #12]
 8005540:	bd10      	pop	{r4, pc}

08005542 <__sclose>:
 8005542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005546:	f000 b89d 	b.w	8005684 <_close_r>

0800554a <__swbuf_r>:
 800554a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554c:	460e      	mov	r6, r1
 800554e:	4614      	mov	r4, r2
 8005550:	4605      	mov	r5, r0
 8005552:	b118      	cbz	r0, 800555c <__swbuf_r+0x12>
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	b90b      	cbnz	r3, 800555c <__swbuf_r+0x12>
 8005558:	f7ff ff08 	bl	800536c <__sinit>
 800555c:	69a3      	ldr	r3, [r4, #24]
 800555e:	60a3      	str	r3, [r4, #8]
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	071a      	lsls	r2, r3, #28
 8005564:	d525      	bpl.n	80055b2 <__swbuf_r+0x68>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	b31b      	cbz	r3, 80055b2 <__swbuf_r+0x68>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6922      	ldr	r2, [r4, #16]
 800556e:	1a98      	subs	r0, r3, r2
 8005570:	6963      	ldr	r3, [r4, #20]
 8005572:	b2f6      	uxtb	r6, r6
 8005574:	4283      	cmp	r3, r0
 8005576:	4637      	mov	r7, r6
 8005578:	dc04      	bgt.n	8005584 <__swbuf_r+0x3a>
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 fd47 	bl	8006010 <_fflush_r>
 8005582:	b9e0      	cbnz	r0, 80055be <__swbuf_r+0x74>
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	3b01      	subs	r3, #1
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	6022      	str	r2, [r4, #0]
 8005590:	701e      	strb	r6, [r3, #0]
 8005592:	6962      	ldr	r2, [r4, #20]
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	429a      	cmp	r2, r3
 8005598:	d004      	beq.n	80055a4 <__swbuf_r+0x5a>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	07db      	lsls	r3, r3, #31
 800559e:	d506      	bpl.n	80055ae <__swbuf_r+0x64>
 80055a0:	2e0a      	cmp	r6, #10
 80055a2:	d104      	bne.n	80055ae <__swbuf_r+0x64>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 fd32 	bl	8006010 <_fflush_r>
 80055ac:	b938      	cbnz	r0, 80055be <__swbuf_r+0x74>
 80055ae:	4638      	mov	r0, r7
 80055b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b2:	4621      	mov	r1, r4
 80055b4:	4628      	mov	r0, r5
 80055b6:	f000 f805 	bl	80055c4 <__swsetup_r>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d0d5      	beq.n	800556a <__swbuf_r+0x20>
 80055be:	f04f 37ff 	mov.w	r7, #4294967295
 80055c2:	e7f4      	b.n	80055ae <__swbuf_r+0x64>

080055c4 <__swsetup_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <__swsetup_r+0xac>)
 80055c8:	4605      	mov	r5, r0
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	460c      	mov	r4, r1
 80055ce:	b118      	cbz	r0, 80055d8 <__swsetup_r+0x14>
 80055d0:	6a03      	ldr	r3, [r0, #32]
 80055d2:	b90b      	cbnz	r3, 80055d8 <__swsetup_r+0x14>
 80055d4:	f7ff feca 	bl	800536c <__sinit>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055de:	0718      	lsls	r0, r3, #28
 80055e0:	d422      	bmi.n	8005628 <__swsetup_r+0x64>
 80055e2:	06d9      	lsls	r1, r3, #27
 80055e4:	d407      	bmi.n	80055f6 <__swsetup_r+0x32>
 80055e6:	2309      	movs	r3, #9
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e034      	b.n	8005660 <__swsetup_r+0x9c>
 80055f6:	0758      	lsls	r0, r3, #29
 80055f8:	d512      	bpl.n	8005620 <__swsetup_r+0x5c>
 80055fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055fc:	b141      	cbz	r1, 8005610 <__swsetup_r+0x4c>
 80055fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005602:	4299      	cmp	r1, r3
 8005604:	d002      	beq.n	800560c <__swsetup_r+0x48>
 8005606:	4628      	mov	r0, r5
 8005608:	f000 f8b0 	bl	800576c <_free_r>
 800560c:	2300      	movs	r3, #0
 800560e:	6363      	str	r3, [r4, #52]	; 0x34
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	2300      	movs	r3, #0
 800561a:	6063      	str	r3, [r4, #4]
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f043 0308 	orr.w	r3, r3, #8
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	b94b      	cbnz	r3, 8005640 <__swsetup_r+0x7c>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005636:	d003      	beq.n	8005640 <__swsetup_r+0x7c>
 8005638:	4621      	mov	r1, r4
 800563a:	4628      	mov	r0, r5
 800563c:	f000 fd36 	bl	80060ac <__smakebuf_r>
 8005640:	89a0      	ldrh	r0, [r4, #12]
 8005642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005646:	f010 0301 	ands.w	r3, r0, #1
 800564a:	d00a      	beq.n	8005662 <__swsetup_r+0x9e>
 800564c:	2300      	movs	r3, #0
 800564e:	60a3      	str	r3, [r4, #8]
 8005650:	6963      	ldr	r3, [r4, #20]
 8005652:	425b      	negs	r3, r3
 8005654:	61a3      	str	r3, [r4, #24]
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	b943      	cbnz	r3, 800566c <__swsetup_r+0xa8>
 800565a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800565e:	d1c4      	bne.n	80055ea <__swsetup_r+0x26>
 8005660:	bd38      	pop	{r3, r4, r5, pc}
 8005662:	0781      	lsls	r1, r0, #30
 8005664:	bf58      	it	pl
 8005666:	6963      	ldrpl	r3, [r4, #20]
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	e7f4      	b.n	8005656 <__swsetup_r+0x92>
 800566c:	2000      	movs	r0, #0
 800566e:	e7f7      	b.n	8005660 <__swsetup_r+0x9c>
 8005670:	20000064 	.word	0x20000064

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <_close_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4d06      	ldr	r5, [pc, #24]	; (80056a0 <_close_r+0x1c>)
 8005688:	2300      	movs	r3, #0
 800568a:	4604      	mov	r4, r0
 800568c:	4608      	mov	r0, r1
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	f7fb fbf9 	bl	8000e86 <_close>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_close_r+0x1a>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	b103      	cbz	r3, 800569e <_close_r+0x1a>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20000264 	.word	0x20000264

080056a4 <_lseek_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	; (80056c4 <_lseek_r+0x20>)
 80056a8:	4604      	mov	r4, r0
 80056aa:	4608      	mov	r0, r1
 80056ac:	4611      	mov	r1, r2
 80056ae:	2200      	movs	r2, #0
 80056b0:	602a      	str	r2, [r5, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7fb fc0e 	bl	8000ed4 <_lseek>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_lseek_r+0x1e>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_lseek_r+0x1e>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	20000264 	.word	0x20000264

080056c8 <_read_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d07      	ldr	r5, [pc, #28]	; (80056e8 <_read_r+0x20>)
 80056cc:	4604      	mov	r4, r0
 80056ce:	4608      	mov	r0, r1
 80056d0:	4611      	mov	r1, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	602a      	str	r2, [r5, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7fb fb9c 	bl	8000e14 <_read>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_read_r+0x1e>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_read_r+0x1e>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20000264 	.word	0x20000264

080056ec <_write_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d07      	ldr	r5, [pc, #28]	; (800570c <_write_r+0x20>)
 80056f0:	4604      	mov	r4, r0
 80056f2:	4608      	mov	r0, r1
 80056f4:	4611      	mov	r1, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7fb fba7 	bl	8000e4e <_write>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_write_r+0x1e>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_write_r+0x1e>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	20000264 	.word	0x20000264

08005710 <__errno>:
 8005710:	4b01      	ldr	r3, [pc, #4]	; (8005718 <__errno+0x8>)
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000064 	.word	0x20000064

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4d0d      	ldr	r5, [pc, #52]	; (8005754 <__libc_init_array+0x38>)
 8005720:	4c0d      	ldr	r4, [pc, #52]	; (8005758 <__libc_init_array+0x3c>)
 8005722:	1b64      	subs	r4, r4, r5
 8005724:	10a4      	asrs	r4, r4, #2
 8005726:	2600      	movs	r6, #0
 8005728:	42a6      	cmp	r6, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	4d0b      	ldr	r5, [pc, #44]	; (800575c <__libc_init_array+0x40>)
 800572e:	4c0c      	ldr	r4, [pc, #48]	; (8005760 <__libc_init_array+0x44>)
 8005730:	f000 fd5e 	bl	80061f0 <_init>
 8005734:	1b64      	subs	r4, r4, r5
 8005736:	10a4      	asrs	r4, r4, #2
 8005738:	2600      	movs	r6, #0
 800573a:	42a6      	cmp	r6, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f855 3b04 	ldr.w	r3, [r5], #4
 8005744:	4798      	blx	r3
 8005746:	3601      	adds	r6, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f855 3b04 	ldr.w	r3, [r5], #4
 800574e:	4798      	blx	r3
 8005750:	3601      	adds	r6, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	08006368 	.word	0x08006368
 8005758:	08006368 	.word	0x08006368
 800575c:	08006368 	.word	0x08006368
 8005760:	0800636c 	.word	0x0800636c

08005764 <__retarget_lock_init_recursive>:
 8005764:	4770      	bx	lr

08005766 <__retarget_lock_acquire_recursive>:
 8005766:	4770      	bx	lr

08005768 <__retarget_lock_release_recursive>:
 8005768:	4770      	bx	lr
	...

0800576c <_free_r>:
 800576c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800576e:	2900      	cmp	r1, #0
 8005770:	d044      	beq.n	80057fc <_free_r+0x90>
 8005772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f1a1 0404 	sub.w	r4, r1, #4
 800577e:	bfb8      	it	lt
 8005780:	18e4      	addlt	r4, r4, r3
 8005782:	f000 f8df 	bl	8005944 <__malloc_lock>
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <_free_r+0x94>)
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	b933      	cbnz	r3, 800579c <_free_r+0x30>
 800578e:	6063      	str	r3, [r4, #4]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005798:	f000 b8da 	b.w	8005950 <__malloc_unlock>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d908      	bls.n	80057b2 <_free_r+0x46>
 80057a0:	6825      	ldr	r5, [r4, #0]
 80057a2:	1961      	adds	r1, r4, r5
 80057a4:	428b      	cmp	r3, r1
 80057a6:	bf01      	itttt	eq
 80057a8:	6819      	ldreq	r1, [r3, #0]
 80057aa:	685b      	ldreq	r3, [r3, #4]
 80057ac:	1949      	addeq	r1, r1, r5
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	e7ed      	b.n	800578e <_free_r+0x22>
 80057b2:	461a      	mov	r2, r3
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	b10b      	cbz	r3, 80057bc <_free_r+0x50>
 80057b8:	42a3      	cmp	r3, r4
 80057ba:	d9fa      	bls.n	80057b2 <_free_r+0x46>
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	1855      	adds	r5, r2, r1
 80057c0:	42a5      	cmp	r5, r4
 80057c2:	d10b      	bne.n	80057dc <_free_r+0x70>
 80057c4:	6824      	ldr	r4, [r4, #0]
 80057c6:	4421      	add	r1, r4
 80057c8:	1854      	adds	r4, r2, r1
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	6011      	str	r1, [r2, #0]
 80057ce:	d1e0      	bne.n	8005792 <_free_r+0x26>
 80057d0:	681c      	ldr	r4, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6053      	str	r3, [r2, #4]
 80057d6:	440c      	add	r4, r1
 80057d8:	6014      	str	r4, [r2, #0]
 80057da:	e7da      	b.n	8005792 <_free_r+0x26>
 80057dc:	d902      	bls.n	80057e4 <_free_r+0x78>
 80057de:	230c      	movs	r3, #12
 80057e0:	6003      	str	r3, [r0, #0]
 80057e2:	e7d6      	b.n	8005792 <_free_r+0x26>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf04      	itt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	bf04      	itt	eq
 80057f4:	1949      	addeq	r1, r1, r5
 80057f6:	6021      	streq	r1, [r4, #0]
 80057f8:	6054      	str	r4, [r2, #4]
 80057fa:	e7ca      	b.n	8005792 <_free_r+0x26>
 80057fc:	b003      	add	sp, #12
 80057fe:	bd30      	pop	{r4, r5, pc}
 8005800:	2000026c 	.word	0x2000026c

08005804 <sbrk_aligned>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4e0e      	ldr	r6, [pc, #56]	; (8005840 <sbrk_aligned+0x3c>)
 8005808:	460c      	mov	r4, r1
 800580a:	6831      	ldr	r1, [r6, #0]
 800580c:	4605      	mov	r5, r0
 800580e:	b911      	cbnz	r1, 8005816 <sbrk_aligned+0x12>
 8005810:	f000 fcde 	bl	80061d0 <_sbrk_r>
 8005814:	6030      	str	r0, [r6, #0]
 8005816:	4621      	mov	r1, r4
 8005818:	4628      	mov	r0, r5
 800581a:	f000 fcd9 	bl	80061d0 <_sbrk_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d00a      	beq.n	8005838 <sbrk_aligned+0x34>
 8005822:	1cc4      	adds	r4, r0, #3
 8005824:	f024 0403 	bic.w	r4, r4, #3
 8005828:	42a0      	cmp	r0, r4
 800582a:	d007      	beq.n	800583c <sbrk_aligned+0x38>
 800582c:	1a21      	subs	r1, r4, r0
 800582e:	4628      	mov	r0, r5
 8005830:	f000 fcce 	bl	80061d0 <_sbrk_r>
 8005834:	3001      	adds	r0, #1
 8005836:	d101      	bne.n	800583c <sbrk_aligned+0x38>
 8005838:	f04f 34ff 	mov.w	r4, #4294967295
 800583c:	4620      	mov	r0, r4
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	20000270 	.word	0x20000270

08005844 <_malloc_r>:
 8005844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005848:	1ccd      	adds	r5, r1, #3
 800584a:	f025 0503 	bic.w	r5, r5, #3
 800584e:	3508      	adds	r5, #8
 8005850:	2d0c      	cmp	r5, #12
 8005852:	bf38      	it	cc
 8005854:	250c      	movcc	r5, #12
 8005856:	2d00      	cmp	r5, #0
 8005858:	4607      	mov	r7, r0
 800585a:	db01      	blt.n	8005860 <_malloc_r+0x1c>
 800585c:	42a9      	cmp	r1, r5
 800585e:	d905      	bls.n	800586c <_malloc_r+0x28>
 8005860:	230c      	movs	r3, #12
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	2600      	movs	r6, #0
 8005866:	4630      	mov	r0, r6
 8005868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800586c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005940 <_malloc_r+0xfc>
 8005870:	f000 f868 	bl	8005944 <__malloc_lock>
 8005874:	f8d8 3000 	ldr.w	r3, [r8]
 8005878:	461c      	mov	r4, r3
 800587a:	bb5c      	cbnz	r4, 80058d4 <_malloc_r+0x90>
 800587c:	4629      	mov	r1, r5
 800587e:	4638      	mov	r0, r7
 8005880:	f7ff ffc0 	bl	8005804 <sbrk_aligned>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	4604      	mov	r4, r0
 8005888:	d155      	bne.n	8005936 <_malloc_r+0xf2>
 800588a:	f8d8 4000 	ldr.w	r4, [r8]
 800588e:	4626      	mov	r6, r4
 8005890:	2e00      	cmp	r6, #0
 8005892:	d145      	bne.n	8005920 <_malloc_r+0xdc>
 8005894:	2c00      	cmp	r4, #0
 8005896:	d048      	beq.n	800592a <_malloc_r+0xe6>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	4631      	mov	r1, r6
 800589c:	4638      	mov	r0, r7
 800589e:	eb04 0903 	add.w	r9, r4, r3
 80058a2:	f000 fc95 	bl	80061d0 <_sbrk_r>
 80058a6:	4581      	cmp	r9, r0
 80058a8:	d13f      	bne.n	800592a <_malloc_r+0xe6>
 80058aa:	6821      	ldr	r1, [r4, #0]
 80058ac:	1a6d      	subs	r5, r5, r1
 80058ae:	4629      	mov	r1, r5
 80058b0:	4638      	mov	r0, r7
 80058b2:	f7ff ffa7 	bl	8005804 <sbrk_aligned>
 80058b6:	3001      	adds	r0, #1
 80058b8:	d037      	beq.n	800592a <_malloc_r+0xe6>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	442b      	add	r3, r5
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	f8d8 3000 	ldr.w	r3, [r8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d038      	beq.n	800593a <_malloc_r+0xf6>
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	42a2      	cmp	r2, r4
 80058cc:	d12b      	bne.n	8005926 <_malloc_r+0xe2>
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	e00f      	b.n	80058f4 <_malloc_r+0xb0>
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	1b52      	subs	r2, r2, r5
 80058d8:	d41f      	bmi.n	800591a <_malloc_r+0xd6>
 80058da:	2a0b      	cmp	r2, #11
 80058dc:	d917      	bls.n	800590e <_malloc_r+0xca>
 80058de:	1961      	adds	r1, r4, r5
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	6025      	str	r5, [r4, #0]
 80058e4:	bf18      	it	ne
 80058e6:	6059      	strne	r1, [r3, #4]
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	bf08      	it	eq
 80058ec:	f8c8 1000 	streq.w	r1, [r8]
 80058f0:	5162      	str	r2, [r4, r5]
 80058f2:	604b      	str	r3, [r1, #4]
 80058f4:	4638      	mov	r0, r7
 80058f6:	f104 060b 	add.w	r6, r4, #11
 80058fa:	f000 f829 	bl	8005950 <__malloc_unlock>
 80058fe:	f026 0607 	bic.w	r6, r6, #7
 8005902:	1d23      	adds	r3, r4, #4
 8005904:	1af2      	subs	r2, r6, r3
 8005906:	d0ae      	beq.n	8005866 <_malloc_r+0x22>
 8005908:	1b9b      	subs	r3, r3, r6
 800590a:	50a3      	str	r3, [r4, r2]
 800590c:	e7ab      	b.n	8005866 <_malloc_r+0x22>
 800590e:	42a3      	cmp	r3, r4
 8005910:	6862      	ldr	r2, [r4, #4]
 8005912:	d1dd      	bne.n	80058d0 <_malloc_r+0x8c>
 8005914:	f8c8 2000 	str.w	r2, [r8]
 8005918:	e7ec      	b.n	80058f4 <_malloc_r+0xb0>
 800591a:	4623      	mov	r3, r4
 800591c:	6864      	ldr	r4, [r4, #4]
 800591e:	e7ac      	b.n	800587a <_malloc_r+0x36>
 8005920:	4634      	mov	r4, r6
 8005922:	6876      	ldr	r6, [r6, #4]
 8005924:	e7b4      	b.n	8005890 <_malloc_r+0x4c>
 8005926:	4613      	mov	r3, r2
 8005928:	e7cc      	b.n	80058c4 <_malloc_r+0x80>
 800592a:	230c      	movs	r3, #12
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4638      	mov	r0, r7
 8005930:	f000 f80e 	bl	8005950 <__malloc_unlock>
 8005934:	e797      	b.n	8005866 <_malloc_r+0x22>
 8005936:	6025      	str	r5, [r4, #0]
 8005938:	e7dc      	b.n	80058f4 <_malloc_r+0xb0>
 800593a:	605b      	str	r3, [r3, #4]
 800593c:	deff      	udf	#255	; 0xff
 800593e:	bf00      	nop
 8005940:	2000026c 	.word	0x2000026c

08005944 <__malloc_lock>:
 8005944:	4801      	ldr	r0, [pc, #4]	; (800594c <__malloc_lock+0x8>)
 8005946:	f7ff bf0e 	b.w	8005766 <__retarget_lock_acquire_recursive>
 800594a:	bf00      	nop
 800594c:	20000268 	.word	0x20000268

08005950 <__malloc_unlock>:
 8005950:	4801      	ldr	r0, [pc, #4]	; (8005958 <__malloc_unlock+0x8>)
 8005952:	f7ff bf09 	b.w	8005768 <__retarget_lock_release_recursive>
 8005956:	bf00      	nop
 8005958:	20000268 	.word	0x20000268

0800595c <__sfputc_r>:
 800595c:	6893      	ldr	r3, [r2, #8]
 800595e:	3b01      	subs	r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	b410      	push	{r4}
 8005964:	6093      	str	r3, [r2, #8]
 8005966:	da08      	bge.n	800597a <__sfputc_r+0x1e>
 8005968:	6994      	ldr	r4, [r2, #24]
 800596a:	42a3      	cmp	r3, r4
 800596c:	db01      	blt.n	8005972 <__sfputc_r+0x16>
 800596e:	290a      	cmp	r1, #10
 8005970:	d103      	bne.n	800597a <__sfputc_r+0x1e>
 8005972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005976:	f7ff bde8 	b.w	800554a <__swbuf_r>
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	1c58      	adds	r0, r3, #1
 800597e:	6010      	str	r0, [r2, #0]
 8005980:	7019      	strb	r1, [r3, #0]
 8005982:	4608      	mov	r0, r1
 8005984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005988:	4770      	bx	lr

0800598a <__sfputs_r>:
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598c:	4606      	mov	r6, r0
 800598e:	460f      	mov	r7, r1
 8005990:	4614      	mov	r4, r2
 8005992:	18d5      	adds	r5, r2, r3
 8005994:	42ac      	cmp	r4, r5
 8005996:	d101      	bne.n	800599c <__sfputs_r+0x12>
 8005998:	2000      	movs	r0, #0
 800599a:	e007      	b.n	80059ac <__sfputs_r+0x22>
 800599c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a0:	463a      	mov	r2, r7
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ffda 	bl	800595c <__sfputc_r>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d1f3      	bne.n	8005994 <__sfputs_r+0xa>
 80059ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059b0 <_vfiprintf_r>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	460d      	mov	r5, r1
 80059b6:	b09d      	sub	sp, #116	; 0x74
 80059b8:	4614      	mov	r4, r2
 80059ba:	4698      	mov	r8, r3
 80059bc:	4606      	mov	r6, r0
 80059be:	b118      	cbz	r0, 80059c8 <_vfiprintf_r+0x18>
 80059c0:	6a03      	ldr	r3, [r0, #32]
 80059c2:	b90b      	cbnz	r3, 80059c8 <_vfiprintf_r+0x18>
 80059c4:	f7ff fcd2 	bl	800536c <__sinit>
 80059c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ca:	07d9      	lsls	r1, r3, #31
 80059cc:	d405      	bmi.n	80059da <_vfiprintf_r+0x2a>
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	059a      	lsls	r2, r3, #22
 80059d2:	d402      	bmi.n	80059da <_vfiprintf_r+0x2a>
 80059d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059d6:	f7ff fec6 	bl	8005766 <__retarget_lock_acquire_recursive>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	071b      	lsls	r3, r3, #28
 80059de:	d501      	bpl.n	80059e4 <_vfiprintf_r+0x34>
 80059e0:	692b      	ldr	r3, [r5, #16]
 80059e2:	b99b      	cbnz	r3, 8005a0c <_vfiprintf_r+0x5c>
 80059e4:	4629      	mov	r1, r5
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7ff fdec 	bl	80055c4 <__swsetup_r>
 80059ec:	b170      	cbz	r0, 8005a0c <_vfiprintf_r+0x5c>
 80059ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059f0:	07dc      	lsls	r4, r3, #31
 80059f2:	d504      	bpl.n	80059fe <_vfiprintf_r+0x4e>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	b01d      	add	sp, #116	; 0x74
 80059fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	0598      	lsls	r0, r3, #22
 8005a02:	d4f7      	bmi.n	80059f4 <_vfiprintf_r+0x44>
 8005a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a06:	f7ff feaf 	bl	8005768 <__retarget_lock_release_recursive>
 8005a0a:	e7f3      	b.n	80059f4 <_vfiprintf_r+0x44>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a10:	2320      	movs	r3, #32
 8005a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a1a:	2330      	movs	r3, #48	; 0x30
 8005a1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005bd0 <_vfiprintf_r+0x220>
 8005a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a24:	f04f 0901 	mov.w	r9, #1
 8005a28:	4623      	mov	r3, r4
 8005a2a:	469a      	mov	sl, r3
 8005a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a30:	b10a      	cbz	r2, 8005a36 <_vfiprintf_r+0x86>
 8005a32:	2a25      	cmp	r2, #37	; 0x25
 8005a34:	d1f9      	bne.n	8005a2a <_vfiprintf_r+0x7a>
 8005a36:	ebba 0b04 	subs.w	fp, sl, r4
 8005a3a:	d00b      	beq.n	8005a54 <_vfiprintf_r+0xa4>
 8005a3c:	465b      	mov	r3, fp
 8005a3e:	4622      	mov	r2, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff ffa1 	bl	800598a <__sfputs_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f000 80a9 	beq.w	8005ba0 <_vfiprintf_r+0x1f0>
 8005a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a50:	445a      	add	r2, fp
 8005a52:	9209      	str	r2, [sp, #36]	; 0x24
 8005a54:	f89a 3000 	ldrb.w	r3, [sl]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80a1 	beq.w	8005ba0 <_vfiprintf_r+0x1f0>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295
 8005a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a68:	f10a 0a01 	add.w	sl, sl, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a74:	931a      	str	r3, [sp, #104]	; 0x68
 8005a76:	4654      	mov	r4, sl
 8005a78:	2205      	movs	r2, #5
 8005a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7e:	4854      	ldr	r0, [pc, #336]	; (8005bd0 <_vfiprintf_r+0x220>)
 8005a80:	f7fa fbc6 	bl	8000210 <memchr>
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	b9d8      	cbnz	r0, 8005ac0 <_vfiprintf_r+0x110>
 8005a88:	06d1      	lsls	r1, r2, #27
 8005a8a:	bf44      	itt	mi
 8005a8c:	2320      	movmi	r3, #32
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a92:	0713      	lsls	r3, r2, #28
 8005a94:	bf44      	itt	mi
 8005a96:	232b      	movmi	r3, #43	; 0x2b
 8005a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa2:	d015      	beq.n	8005ad0 <_vfiprintf_r+0x120>
 8005aa4:	9a07      	ldr	r2, [sp, #28]
 8005aa6:	4654      	mov	r4, sl
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f04f 0c0a 	mov.w	ip, #10
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ab4:	3b30      	subs	r3, #48	; 0x30
 8005ab6:	2b09      	cmp	r3, #9
 8005ab8:	d94d      	bls.n	8005b56 <_vfiprintf_r+0x1a6>
 8005aba:	b1b0      	cbz	r0, 8005aea <_vfiprintf_r+0x13a>
 8005abc:	9207      	str	r2, [sp, #28]
 8005abe:	e014      	b.n	8005aea <_vfiprintf_r+0x13a>
 8005ac0:	eba0 0308 	sub.w	r3, r0, r8
 8005ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	46a2      	mov	sl, r4
 8005ace:	e7d2      	b.n	8005a76 <_vfiprintf_r+0xc6>
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	1d19      	adds	r1, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	9103      	str	r1, [sp, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfbb      	ittet	lt
 8005adc:	425b      	neglt	r3, r3
 8005ade:	f042 0202 	orrlt.w	r2, r2, #2
 8005ae2:	9307      	strge	r3, [sp, #28]
 8005ae4:	9307      	strlt	r3, [sp, #28]
 8005ae6:	bfb8      	it	lt
 8005ae8:	9204      	strlt	r2, [sp, #16]
 8005aea:	7823      	ldrb	r3, [r4, #0]
 8005aec:	2b2e      	cmp	r3, #46	; 0x2e
 8005aee:	d10c      	bne.n	8005b0a <_vfiprintf_r+0x15a>
 8005af0:	7863      	ldrb	r3, [r4, #1]
 8005af2:	2b2a      	cmp	r3, #42	; 0x2a
 8005af4:	d134      	bne.n	8005b60 <_vfiprintf_r+0x1b0>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	1d1a      	adds	r2, r3, #4
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	9203      	str	r2, [sp, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bfb8      	it	lt
 8005b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b06:	3402      	adds	r4, #2
 8005b08:	9305      	str	r3, [sp, #20]
 8005b0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005be0 <_vfiprintf_r+0x230>
 8005b0e:	7821      	ldrb	r1, [r4, #0]
 8005b10:	2203      	movs	r2, #3
 8005b12:	4650      	mov	r0, sl
 8005b14:	f7fa fb7c 	bl	8000210 <memchr>
 8005b18:	b138      	cbz	r0, 8005b2a <_vfiprintf_r+0x17a>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	eba0 000a 	sub.w	r0, r0, sl
 8005b20:	2240      	movs	r2, #64	; 0x40
 8005b22:	4082      	lsls	r2, r0
 8005b24:	4313      	orrs	r3, r2
 8005b26:	3401      	adds	r4, #1
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2e:	4829      	ldr	r0, [pc, #164]	; (8005bd4 <_vfiprintf_r+0x224>)
 8005b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b34:	2206      	movs	r2, #6
 8005b36:	f7fa fb6b 	bl	8000210 <memchr>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d03f      	beq.n	8005bbe <_vfiprintf_r+0x20e>
 8005b3e:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <_vfiprintf_r+0x228>)
 8005b40:	bb1b      	cbnz	r3, 8005b8a <_vfiprintf_r+0x1da>
 8005b42:	9b03      	ldr	r3, [sp, #12]
 8005b44:	3307      	adds	r3, #7
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	9303      	str	r3, [sp, #12]
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	443b      	add	r3, r7
 8005b52:	9309      	str	r3, [sp, #36]	; 0x24
 8005b54:	e768      	b.n	8005a28 <_vfiprintf_r+0x78>
 8005b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	e7a6      	b.n	8005aae <_vfiprintf_r+0xfe>
 8005b60:	2300      	movs	r3, #0
 8005b62:	3401      	adds	r4, #1
 8005b64:	9305      	str	r3, [sp, #20]
 8005b66:	4619      	mov	r1, r3
 8005b68:	f04f 0c0a 	mov.w	ip, #10
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b72:	3a30      	subs	r2, #48	; 0x30
 8005b74:	2a09      	cmp	r2, #9
 8005b76:	d903      	bls.n	8005b80 <_vfiprintf_r+0x1d0>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0c6      	beq.n	8005b0a <_vfiprintf_r+0x15a>
 8005b7c:	9105      	str	r1, [sp, #20]
 8005b7e:	e7c4      	b.n	8005b0a <_vfiprintf_r+0x15a>
 8005b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b84:	4604      	mov	r4, r0
 8005b86:	2301      	movs	r3, #1
 8005b88:	e7f0      	b.n	8005b6c <_vfiprintf_r+0x1bc>
 8005b8a:	ab03      	add	r3, sp, #12
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	462a      	mov	r2, r5
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <_vfiprintf_r+0x22c>)
 8005b92:	a904      	add	r1, sp, #16
 8005b94:	4630      	mov	r0, r6
 8005b96:	f3af 8000 	nop.w
 8005b9a:	4607      	mov	r7, r0
 8005b9c:	1c78      	adds	r0, r7, #1
 8005b9e:	d1d6      	bne.n	8005b4e <_vfiprintf_r+0x19e>
 8005ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ba2:	07d9      	lsls	r1, r3, #31
 8005ba4:	d405      	bmi.n	8005bb2 <_vfiprintf_r+0x202>
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	059a      	lsls	r2, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_vfiprintf_r+0x202>
 8005bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bae:	f7ff fddb 	bl	8005768 <__retarget_lock_release_recursive>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	065b      	lsls	r3, r3, #25
 8005bb6:	f53f af1d 	bmi.w	80059f4 <_vfiprintf_r+0x44>
 8005bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bbc:	e71c      	b.n	80059f8 <_vfiprintf_r+0x48>
 8005bbe:	ab03      	add	r3, sp, #12
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <_vfiprintf_r+0x22c>)
 8005bc6:	a904      	add	r1, sp, #16
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 f879 	bl	8005cc0 <_printf_i>
 8005bce:	e7e4      	b.n	8005b9a <_vfiprintf_r+0x1ea>
 8005bd0:	0800632c 	.word	0x0800632c
 8005bd4:	08006336 	.word	0x08006336
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800598b 	.word	0x0800598b
 8005be0:	08006332 	.word	0x08006332

08005be4 <_printf_common>:
 8005be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	4616      	mov	r6, r2
 8005bea:	4699      	mov	r9, r3
 8005bec:	688a      	ldr	r2, [r1, #8]
 8005bee:	690b      	ldr	r3, [r1, #16]
 8005bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bfb8      	it	lt
 8005bf8:	4613      	movlt	r3, r2
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c00:	4607      	mov	r7, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	b10a      	cbz	r2, 8005c0a <_printf_common+0x26>
 8005c06:	3301      	adds	r3, #1
 8005c08:	6033      	str	r3, [r6, #0]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	6833      	ldrmi	r3, [r6, #0]
 8005c12:	3302      	addmi	r3, #2
 8005c14:	6033      	strmi	r3, [r6, #0]
 8005c16:	6825      	ldr	r5, [r4, #0]
 8005c18:	f015 0506 	ands.w	r5, r5, #6
 8005c1c:	d106      	bne.n	8005c2c <_printf_common+0x48>
 8005c1e:	f104 0a19 	add.w	sl, r4, #25
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	6832      	ldr	r2, [r6, #0]
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dc26      	bgt.n	8005c7a <_printf_common+0x96>
 8005c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c30:	1e13      	subs	r3, r2, #0
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	bf18      	it	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	0692      	lsls	r2, r2, #26
 8005c3a:	d42b      	bmi.n	8005c94 <_printf_common+0xb0>
 8005c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c40:	4649      	mov	r1, r9
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d01e      	beq.n	8005c88 <_printf_common+0xa4>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	f003 0306 	and.w	r3, r3, #6
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	bf02      	ittt	eq
 8005c56:	68e5      	ldreq	r5, [r4, #12]
 8005c58:	6833      	ldreq	r3, [r6, #0]
 8005c5a:	1aed      	subeq	r5, r5, r3
 8005c5c:	68a3      	ldr	r3, [r4, #8]
 8005c5e:	bf0c      	ite	eq
 8005c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c64:	2500      	movne	r5, #0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bfc4      	itt	gt
 8005c6a:	1a9b      	subgt	r3, r3, r2
 8005c6c:	18ed      	addgt	r5, r5, r3
 8005c6e:	2600      	movs	r6, #0
 8005c70:	341a      	adds	r4, #26
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d11a      	bne.n	8005cac <_printf_common+0xc8>
 8005c76:	2000      	movs	r0, #0
 8005c78:	e008      	b.n	8005c8c <_printf_common+0xa8>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4638      	mov	r0, r7
 8005c82:	47c0      	blx	r8
 8005c84:	3001      	adds	r0, #1
 8005c86:	d103      	bne.n	8005c90 <_printf_common+0xac>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c90:	3501      	adds	r5, #1
 8005c92:	e7c6      	b.n	8005c22 <_printf_common+0x3e>
 8005c94:	18e1      	adds	r1, r4, r3
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	2030      	movs	r0, #48	; 0x30
 8005c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c9e:	4422      	add	r2, r4
 8005ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca8:	3302      	adds	r3, #2
 8005caa:	e7c7      	b.n	8005c3c <_printf_common+0x58>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c0      	blx	r8
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d0e6      	beq.n	8005c88 <_printf_common+0xa4>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7d9      	b.n	8005c72 <_printf_common+0x8e>
	...

08005cc0 <_printf_i>:
 8005cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	7e0f      	ldrb	r7, [r1, #24]
 8005cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc8:	2f78      	cmp	r7, #120	; 0x78
 8005cca:	4691      	mov	r9, r2
 8005ccc:	4680      	mov	r8, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	469a      	mov	sl, r3
 8005cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cd6:	d807      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cd8:	2f62      	cmp	r7, #98	; 0x62
 8005cda:	d80a      	bhi.n	8005cf2 <_printf_i+0x32>
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	f000 80d4 	beq.w	8005e8a <_printf_i+0x1ca>
 8005ce2:	2f58      	cmp	r7, #88	; 0x58
 8005ce4:	f000 80c0 	beq.w	8005e68 <_printf_i+0x1a8>
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf0:	e03a      	b.n	8005d68 <_printf_i+0xa8>
 8005cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cf6:	2b15      	cmp	r3, #21
 8005cf8:	d8f6      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cfa:	a101      	add	r1, pc, #4	; (adr r1, 8005d00 <_printf_i+0x40>)
 8005cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005ce9 	.word	0x08005ce9
 8005d0c:	08005ce9 	.word	0x08005ce9
 8005d10:	08005ce9 	.word	0x08005ce9
 8005d14:	08005ce9 	.word	0x08005ce9
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ce9 	.word	0x08005ce9
 8005d20:	08005ce9 	.word	0x08005ce9
 8005d24:	08005ce9 	.word	0x08005ce9
 8005d28:	08005ce9 	.word	0x08005ce9
 8005d2c:	08005e71 	.word	0x08005e71
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005e2b 	.word	0x08005e2b
 8005d38:	08005ce9 	.word	0x08005ce9
 8005d3c:	08005ce9 	.word	0x08005ce9
 8005d40:	08005e93 	.word	0x08005e93
 8005d44:	08005ce9 	.word	0x08005ce9
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005ce9 	.word	0x08005ce9
 8005d50:	08005ce9 	.word	0x08005ce9
 8005d54:	08005e33 	.word	0x08005e33
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	602a      	str	r2, [r5, #0]
 8005d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e09f      	b.n	8005eac <_printf_i+0x1ec>
 8005d6c:	6820      	ldr	r0, [r4, #0]
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	0607      	lsls	r7, r0, #24
 8005d72:	f103 0104 	add.w	r1, r3, #4
 8005d76:	6029      	str	r1, [r5, #0]
 8005d78:	d501      	bpl.n	8005d7e <_printf_i+0xbe>
 8005d7a:	681e      	ldr	r6, [r3, #0]
 8005d7c:	e003      	b.n	8005d86 <_printf_i+0xc6>
 8005d7e:	0646      	lsls	r6, r0, #25
 8005d80:	d5fb      	bpl.n	8005d7a <_printf_i+0xba>
 8005d82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	da03      	bge.n	8005d92 <_printf_i+0xd2>
 8005d8a:	232d      	movs	r3, #45	; 0x2d
 8005d8c:	4276      	negs	r6, r6
 8005d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d92:	485a      	ldr	r0, [pc, #360]	; (8005efc <_printf_i+0x23c>)
 8005d94:	230a      	movs	r3, #10
 8005d96:	e012      	b.n	8005dbe <_printf_i+0xfe>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1d19      	adds	r1, r3, #4
 8005d9e:	6029      	str	r1, [r5, #0]
 8005da0:	0605      	lsls	r5, r0, #24
 8005da2:	d501      	bpl.n	8005da8 <_printf_i+0xe8>
 8005da4:	681e      	ldr	r6, [r3, #0]
 8005da6:	e002      	b.n	8005dae <_printf_i+0xee>
 8005da8:	0641      	lsls	r1, r0, #25
 8005daa:	d5fb      	bpl.n	8005da4 <_printf_i+0xe4>
 8005dac:	881e      	ldrh	r6, [r3, #0]
 8005dae:	4853      	ldr	r0, [pc, #332]	; (8005efc <_printf_i+0x23c>)
 8005db0:	2f6f      	cmp	r7, #111	; 0x6f
 8005db2:	bf0c      	ite	eq
 8005db4:	2308      	moveq	r3, #8
 8005db6:	230a      	movne	r3, #10
 8005db8:	2100      	movs	r1, #0
 8005dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dbe:	6865      	ldr	r5, [r4, #4]
 8005dc0:	60a5      	str	r5, [r4, #8]
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	bfa2      	ittt	ge
 8005dc6:	6821      	ldrge	r1, [r4, #0]
 8005dc8:	f021 0104 	bicge.w	r1, r1, #4
 8005dcc:	6021      	strge	r1, [r4, #0]
 8005dce:	b90e      	cbnz	r6, 8005dd4 <_printf_i+0x114>
 8005dd0:	2d00      	cmp	r5, #0
 8005dd2:	d04b      	beq.n	8005e6c <_printf_i+0x1ac>
 8005dd4:	4615      	mov	r5, r2
 8005dd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dda:	fb03 6711 	mls	r7, r3, r1, r6
 8005dde:	5dc7      	ldrb	r7, [r0, r7]
 8005de0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005de4:	4637      	mov	r7, r6
 8005de6:	42bb      	cmp	r3, r7
 8005de8:	460e      	mov	r6, r1
 8005dea:	d9f4      	bls.n	8005dd6 <_printf_i+0x116>
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d10b      	bne.n	8005e08 <_printf_i+0x148>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	07de      	lsls	r6, r3, #31
 8005df4:	d508      	bpl.n	8005e08 <_printf_i+0x148>
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	6861      	ldr	r1, [r4, #4]
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	bfde      	ittt	le
 8005dfe:	2330      	movle	r3, #48	; 0x30
 8005e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e08:	1b52      	subs	r2, r2, r5
 8005e0a:	6122      	str	r2, [r4, #16]
 8005e0c:	f8cd a000 	str.w	sl, [sp]
 8005e10:	464b      	mov	r3, r9
 8005e12:	aa03      	add	r2, sp, #12
 8005e14:	4621      	mov	r1, r4
 8005e16:	4640      	mov	r0, r8
 8005e18:	f7ff fee4 	bl	8005be4 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d14a      	bne.n	8005eb6 <_printf_i+0x1f6>
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	b004      	add	sp, #16
 8005e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f043 0320 	orr.w	r3, r3, #32
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	4833      	ldr	r0, [pc, #204]	; (8005f00 <_printf_i+0x240>)
 8005e34:	2778      	movs	r7, #120	; 0x78
 8005e36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	6829      	ldr	r1, [r5, #0]
 8005e3e:	061f      	lsls	r7, r3, #24
 8005e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e44:	d402      	bmi.n	8005e4c <_printf_i+0x18c>
 8005e46:	065f      	lsls	r7, r3, #25
 8005e48:	bf48      	it	mi
 8005e4a:	b2b6      	uxthmi	r6, r6
 8005e4c:	07df      	lsls	r7, r3, #31
 8005e4e:	bf48      	it	mi
 8005e50:	f043 0320 	orrmi.w	r3, r3, #32
 8005e54:	6029      	str	r1, [r5, #0]
 8005e56:	bf48      	it	mi
 8005e58:	6023      	strmi	r3, [r4, #0]
 8005e5a:	b91e      	cbnz	r6, 8005e64 <_printf_i+0x1a4>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	f023 0320 	bic.w	r3, r3, #32
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	2310      	movs	r3, #16
 8005e66:	e7a7      	b.n	8005db8 <_printf_i+0xf8>
 8005e68:	4824      	ldr	r0, [pc, #144]	; (8005efc <_printf_i+0x23c>)
 8005e6a:	e7e4      	b.n	8005e36 <_printf_i+0x176>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	e7bd      	b.n	8005dec <_printf_i+0x12c>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	6826      	ldr	r6, [r4, #0]
 8005e74:	6961      	ldr	r1, [r4, #20]
 8005e76:	1d18      	adds	r0, r3, #4
 8005e78:	6028      	str	r0, [r5, #0]
 8005e7a:	0635      	lsls	r5, r6, #24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	d501      	bpl.n	8005e84 <_printf_i+0x1c4>
 8005e80:	6019      	str	r1, [r3, #0]
 8005e82:	e002      	b.n	8005e8a <_printf_i+0x1ca>
 8005e84:	0670      	lsls	r0, r6, #25
 8005e86:	d5fb      	bpl.n	8005e80 <_printf_i+0x1c0>
 8005e88:	8019      	strh	r1, [r3, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	4615      	mov	r5, r2
 8005e90:	e7bc      	b.n	8005e0c <_printf_i+0x14c>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	602a      	str	r2, [r5, #0]
 8005e98:	681d      	ldr	r5, [r3, #0]
 8005e9a:	6862      	ldr	r2, [r4, #4]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7fa f9b6 	bl	8000210 <memchr>
 8005ea4:	b108      	cbz	r0, 8005eaa <_printf_i+0x1ea>
 8005ea6:	1b40      	subs	r0, r0, r5
 8005ea8:	6060      	str	r0, [r4, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb4:	e7aa      	b.n	8005e0c <_printf_i+0x14c>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d0ad      	beq.n	8005e20 <_printf_i+0x160>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	079b      	lsls	r3, r3, #30
 8005ec8:	d413      	bmi.n	8005ef2 <_printf_i+0x232>
 8005eca:	68e0      	ldr	r0, [r4, #12]
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	bfb8      	it	lt
 8005ed2:	4618      	movlt	r0, r3
 8005ed4:	e7a6      	b.n	8005e24 <_printf_i+0x164>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d09d      	beq.n	8005e20 <_printf_i+0x160>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	9903      	ldr	r1, [sp, #12]
 8005eea:	1a5b      	subs	r3, r3, r1
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf2      	bgt.n	8005ed6 <_printf_i+0x216>
 8005ef0:	e7eb      	b.n	8005eca <_printf_i+0x20a>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	f104 0619 	add.w	r6, r4, #25
 8005ef8:	e7f5      	b.n	8005ee6 <_printf_i+0x226>
 8005efa:	bf00      	nop
 8005efc:	0800633d 	.word	0x0800633d
 8005f00:	0800634e 	.word	0x0800634e

08005f04 <__sflush_r>:
 8005f04:	898a      	ldrh	r2, [r1, #12]
 8005f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	0710      	lsls	r0, r2, #28
 8005f0e:	460c      	mov	r4, r1
 8005f10:	d458      	bmi.n	8005fc4 <__sflush_r+0xc0>
 8005f12:	684b      	ldr	r3, [r1, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	dc05      	bgt.n	8005f24 <__sflush_r+0x20>
 8005f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	dc02      	bgt.n	8005f24 <__sflush_r+0x20>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d0f9      	beq.n	8005f1e <__sflush_r+0x1a>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f30:	682f      	ldr	r7, [r5, #0]
 8005f32:	6a21      	ldr	r1, [r4, #32]
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	d032      	beq.n	8005f9e <__sflush_r+0x9a>
 8005f38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	075a      	lsls	r2, r3, #29
 8005f3e:	d505      	bpl.n	8005f4c <__sflush_r+0x48>
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	1ac0      	subs	r0, r0, r3
 8005f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f46:	b10b      	cbz	r3, 8005f4c <__sflush_r+0x48>
 8005f48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f4a:	1ac0      	subs	r0, r0, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4602      	mov	r2, r0
 8005f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f52:	6a21      	ldr	r1, [r4, #32]
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b0      	blx	r6
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	d106      	bne.n	8005f6c <__sflush_r+0x68>
 8005f5e:	6829      	ldr	r1, [r5, #0]
 8005f60:	291d      	cmp	r1, #29
 8005f62:	d82b      	bhi.n	8005fbc <__sflush_r+0xb8>
 8005f64:	4a29      	ldr	r2, [pc, #164]	; (800600c <__sflush_r+0x108>)
 8005f66:	410a      	asrs	r2, r1
 8005f68:	07d6      	lsls	r6, r2, #31
 8005f6a:	d427      	bmi.n	8005fbc <__sflush_r+0xb8>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	6062      	str	r2, [r4, #4]
 8005f70:	04d9      	lsls	r1, r3, #19
 8005f72:	6922      	ldr	r2, [r4, #16]
 8005f74:	6022      	str	r2, [r4, #0]
 8005f76:	d504      	bpl.n	8005f82 <__sflush_r+0x7e>
 8005f78:	1c42      	adds	r2, r0, #1
 8005f7a:	d101      	bne.n	8005f80 <__sflush_r+0x7c>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b903      	cbnz	r3, 8005f82 <__sflush_r+0x7e>
 8005f80:	6560      	str	r0, [r4, #84]	; 0x54
 8005f82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f84:	602f      	str	r7, [r5, #0]
 8005f86:	2900      	cmp	r1, #0
 8005f88:	d0c9      	beq.n	8005f1e <__sflush_r+0x1a>
 8005f8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	d002      	beq.n	8005f98 <__sflush_r+0x94>
 8005f92:	4628      	mov	r0, r5
 8005f94:	f7ff fbea 	bl	800576c <_free_r>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	6360      	str	r0, [r4, #52]	; 0x34
 8005f9c:	e7c0      	b.n	8005f20 <__sflush_r+0x1c>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b0      	blx	r6
 8005fa4:	1c41      	adds	r1, r0, #1
 8005fa6:	d1c8      	bne.n	8005f3a <__sflush_r+0x36>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0c5      	beq.n	8005f3a <__sflush_r+0x36>
 8005fae:	2b1d      	cmp	r3, #29
 8005fb0:	d001      	beq.n	8005fb6 <__sflush_r+0xb2>
 8005fb2:	2b16      	cmp	r3, #22
 8005fb4:	d101      	bne.n	8005fba <__sflush_r+0xb6>
 8005fb6:	602f      	str	r7, [r5, #0]
 8005fb8:	e7b1      	b.n	8005f1e <__sflush_r+0x1a>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	e7ad      	b.n	8005f20 <__sflush_r+0x1c>
 8005fc4:	690f      	ldr	r7, [r1, #16]
 8005fc6:	2f00      	cmp	r7, #0
 8005fc8:	d0a9      	beq.n	8005f1e <__sflush_r+0x1a>
 8005fca:	0793      	lsls	r3, r2, #30
 8005fcc:	680e      	ldr	r6, [r1, #0]
 8005fce:	bf08      	it	eq
 8005fd0:	694b      	ldreq	r3, [r1, #20]
 8005fd2:	600f      	str	r7, [r1, #0]
 8005fd4:	bf18      	it	ne
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	eba6 0807 	sub.w	r8, r6, r7
 8005fdc:	608b      	str	r3, [r1, #8]
 8005fde:	f1b8 0f00 	cmp.w	r8, #0
 8005fe2:	dd9c      	ble.n	8005f1e <__sflush_r+0x1a>
 8005fe4:	6a21      	ldr	r1, [r4, #32]
 8005fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fe8:	4643      	mov	r3, r8
 8005fea:	463a      	mov	r2, r7
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b0      	blx	r6
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	dc06      	bgt.n	8006002 <__sflush_r+0xfe>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8006000:	e78e      	b.n	8005f20 <__sflush_r+0x1c>
 8006002:	4407      	add	r7, r0
 8006004:	eba8 0800 	sub.w	r8, r8, r0
 8006008:	e7e9      	b.n	8005fde <__sflush_r+0xda>
 800600a:	bf00      	nop
 800600c:	dfbffffe 	.word	0xdfbffffe

08006010 <_fflush_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	690b      	ldr	r3, [r1, #16]
 8006014:	4605      	mov	r5, r0
 8006016:	460c      	mov	r4, r1
 8006018:	b913      	cbnz	r3, 8006020 <_fflush_r+0x10>
 800601a:	2500      	movs	r5, #0
 800601c:	4628      	mov	r0, r5
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	b118      	cbz	r0, 800602a <_fflush_r+0x1a>
 8006022:	6a03      	ldr	r3, [r0, #32]
 8006024:	b90b      	cbnz	r3, 800602a <_fflush_r+0x1a>
 8006026:	f7ff f9a1 	bl	800536c <__sinit>
 800602a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f3      	beq.n	800601a <_fflush_r+0xa>
 8006032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006034:	07d0      	lsls	r0, r2, #31
 8006036:	d404      	bmi.n	8006042 <_fflush_r+0x32>
 8006038:	0599      	lsls	r1, r3, #22
 800603a:	d402      	bmi.n	8006042 <_fflush_r+0x32>
 800603c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800603e:	f7ff fb92 	bl	8005766 <__retarget_lock_acquire_recursive>
 8006042:	4628      	mov	r0, r5
 8006044:	4621      	mov	r1, r4
 8006046:	f7ff ff5d 	bl	8005f04 <__sflush_r>
 800604a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800604c:	07da      	lsls	r2, r3, #31
 800604e:	4605      	mov	r5, r0
 8006050:	d4e4      	bmi.n	800601c <_fflush_r+0xc>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	059b      	lsls	r3, r3, #22
 8006056:	d4e1      	bmi.n	800601c <_fflush_r+0xc>
 8006058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605a:	f7ff fb85 	bl	8005768 <__retarget_lock_release_recursive>
 800605e:	e7dd      	b.n	800601c <_fflush_r+0xc>

08006060 <__swhatbuf_r>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	460c      	mov	r4, r1
 8006064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006068:	2900      	cmp	r1, #0
 800606a:	b096      	sub	sp, #88	; 0x58
 800606c:	4615      	mov	r5, r2
 800606e:	461e      	mov	r6, r3
 8006070:	da0d      	bge.n	800608e <__swhatbuf_r+0x2e>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	bf0c      	ite	eq
 800607e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006082:	2340      	movne	r3, #64	; 0x40
 8006084:	2000      	movs	r0, #0
 8006086:	6031      	str	r1, [r6, #0]
 8006088:	602b      	str	r3, [r5, #0]
 800608a:	b016      	add	sp, #88	; 0x58
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	466a      	mov	r2, sp
 8006090:	f000 f87c 	bl	800618c <_fstat_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	dbec      	blt.n	8006072 <__swhatbuf_r+0x12>
 8006098:	9901      	ldr	r1, [sp, #4]
 800609a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800609e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060a2:	4259      	negs	r1, r3
 80060a4:	4159      	adcs	r1, r3
 80060a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060aa:	e7eb      	b.n	8006084 <__swhatbuf_r+0x24>

080060ac <__smakebuf_r>:
 80060ac:	898b      	ldrh	r3, [r1, #12]
 80060ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060b0:	079d      	lsls	r5, r3, #30
 80060b2:	4606      	mov	r6, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	d507      	bpl.n	80060c8 <__smakebuf_r+0x1c>
 80060b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	2301      	movs	r3, #1
 80060c2:	6163      	str	r3, [r4, #20]
 80060c4:	b002      	add	sp, #8
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	ab01      	add	r3, sp, #4
 80060ca:	466a      	mov	r2, sp
 80060cc:	f7ff ffc8 	bl	8006060 <__swhatbuf_r>
 80060d0:	9900      	ldr	r1, [sp, #0]
 80060d2:	4605      	mov	r5, r0
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff fbb5 	bl	8005844 <_malloc_r>
 80060da:	b948      	cbnz	r0, 80060f0 <__smakebuf_r+0x44>
 80060dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e0:	059a      	lsls	r2, r3, #22
 80060e2:	d4ef      	bmi.n	80060c4 <__smakebuf_r+0x18>
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	f043 0302 	orr.w	r3, r3, #2
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	e7e3      	b.n	80060b8 <__smakebuf_r+0xc>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	6163      	str	r3, [r4, #20]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	6120      	str	r0, [r4, #16]
 8006102:	b15b      	cbz	r3, 800611c <__smakebuf_r+0x70>
 8006104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f851 	bl	80061b0 <_isatty_r>
 800610e:	b128      	cbz	r0, 800611c <__smakebuf_r+0x70>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	431d      	orrs	r5, r3
 8006120:	81a5      	strh	r5, [r4, #12]
 8006122:	e7cf      	b.n	80060c4 <__smakebuf_r+0x18>

08006124 <_putc_r>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	460d      	mov	r5, r1
 8006128:	4614      	mov	r4, r2
 800612a:	4606      	mov	r6, r0
 800612c:	b118      	cbz	r0, 8006136 <_putc_r+0x12>
 800612e:	6a03      	ldr	r3, [r0, #32]
 8006130:	b90b      	cbnz	r3, 8006136 <_putc_r+0x12>
 8006132:	f7ff f91b 	bl	800536c <__sinit>
 8006136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006138:	07d8      	lsls	r0, r3, #31
 800613a:	d405      	bmi.n	8006148 <_putc_r+0x24>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	0599      	lsls	r1, r3, #22
 8006140:	d402      	bmi.n	8006148 <_putc_r+0x24>
 8006142:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006144:	f7ff fb0f 	bl	8005766 <__retarget_lock_acquire_recursive>
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	3b01      	subs	r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	60a3      	str	r3, [r4, #8]
 8006150:	da05      	bge.n	800615e <_putc_r+0x3a>
 8006152:	69a2      	ldr	r2, [r4, #24]
 8006154:	4293      	cmp	r3, r2
 8006156:	db12      	blt.n	800617e <_putc_r+0x5a>
 8006158:	b2eb      	uxtb	r3, r5
 800615a:	2b0a      	cmp	r3, #10
 800615c:	d00f      	beq.n	800617e <_putc_r+0x5a>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	701d      	strb	r5, [r3, #0]
 8006166:	b2ed      	uxtb	r5, r5
 8006168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616a:	07da      	lsls	r2, r3, #31
 800616c:	d405      	bmi.n	800617a <_putc_r+0x56>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	059b      	lsls	r3, r3, #22
 8006172:	d402      	bmi.n	800617a <_putc_r+0x56>
 8006174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006176:	f7ff faf7 	bl	8005768 <__retarget_lock_release_recursive>
 800617a:	4628      	mov	r0, r5
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	4629      	mov	r1, r5
 8006180:	4622      	mov	r2, r4
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff f9e1 	bl	800554a <__swbuf_r>
 8006188:	4605      	mov	r5, r0
 800618a:	e7ed      	b.n	8006168 <_putc_r+0x44>

0800618c <_fstat_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d07      	ldr	r5, [pc, #28]	; (80061ac <_fstat_r+0x20>)
 8006190:	2300      	movs	r3, #0
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	4611      	mov	r1, r2
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	f7fa fe80 	bl	8000e9e <_fstat>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	d102      	bne.n	80061a8 <_fstat_r+0x1c>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	b103      	cbz	r3, 80061a8 <_fstat_r+0x1c>
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	bd38      	pop	{r3, r4, r5, pc}
 80061aa:	bf00      	nop
 80061ac:	20000264 	.word	0x20000264

080061b0 <_isatty_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d06      	ldr	r5, [pc, #24]	; (80061cc <_isatty_r+0x1c>)
 80061b4:	2300      	movs	r3, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fa fe7f 	bl	8000ebe <_isatty>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_isatty_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_isatty_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20000264 	.word	0x20000264

080061d0 <_sbrk_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d06      	ldr	r5, [pc, #24]	; (80061ec <_sbrk_r+0x1c>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	f7fa fe88 	bl	8000ef0 <_sbrk>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_sbrk_r+0x1a>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_sbrk_r+0x1a>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000264 	.word	0x20000264

080061f0 <_init>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr

080061fc <_fini>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	bf00      	nop
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr
